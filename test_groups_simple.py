#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –≥—Ä—É–ø–ø –¥–ª—è MedicalNotes (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)
"""

import os
import sys
import subprocess

def run_gradle_test():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã —á–µ—Ä–µ–∑ Gradle"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ Gradle...")
    
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–µ–∫—Ç
        print("üì¶ –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...")
        result = subprocess.run(["./gradlew", "assembleDebug"], 
                              capture_output=True, text=True, cwd=".")
        
        if result.returncode != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏: {result.stderr}")
            return False
        
        print("‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º unit —Ç–µ—Å—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
        print("üî¨ –ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤...")
        result = subprocess.run(["./gradlew", "testDebugUnitTest"], 
                              capture_output=True, text=True, cwd=".")
        
        if result.returncode != 0:
            print(f"‚ö†Ô∏è Unit —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏: {result.stderr}")
        else:
            print("‚úÖ Unit —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤: {e}")
        return False

def analyze_code():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–¥ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º —Å –≥—Ä—É–ø–ø–∞–º–∏"""
    print("üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–±–ª–µ–º —Å –≥—Ä—É–ø–ø–∞–º–∏...")
    
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã
    files_to_check = [
        "app/src/main/java/com/medicalnotes/app/adapters/GroupAdapter.kt",
        "app/src/main/java/com/medicalnotes/app/adapters/GroupMedicineAdapter.kt",
        "app/src/main/java/com/medicalnotes/app/GroupManagementActivity.kt",
        "app/src/main/java/com/medicalnotes/app/utils/MedicineGroupingUtil.kt",
        "app/src/main/java/com/medicalnotes/app/utils/GroupTestSuite.kt"
    ]
    
    for file_path in files_to_check:
        if os.path.exists(file_path):
            print(f"üìÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª: {file_path}")
            
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
                if "TODO" in content or "FIXME" in content:
                    issues.append(f"–ù–∞–π–¥–µ–Ω—ã TODO/FIXME –≤ {file_path}")
                
                if "groupOrder" in content and "groupOrder <= 0" not in content:
                    issues.append(f"–í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π groupOrder –≤ {file_path}")
                
                if "groupName" in content and "groupName.isEmpty()" not in content:
                    issues.append(f"–í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π groupName –≤ {file_path}")
                
                if "Exception" in content or "Error" in content:
                    issues.append(f"–ù–∞–π–¥–µ–Ω—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ {file_path}")
                
            except Exception as e:
                issues.append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
        else:
            issues.append(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    
    return issues

def check_manifest():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç AndroidManifest.xml –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–±–ª–µ–º —Å –≥—Ä—É–ø–ø–∞–º–∏"""
    print("üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ AndroidManifest.xml...")
    
    manifest_path = "app/src/main/AndroidManifest.xml"
    issues = []
    
    if os.path.exists(manifest_path):
        try:
            with open(manifest_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
            if "android.permission.WRITE_EXTERNAL_STORAGE" not in content:
                issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–æ–≤")
            
            if "android.permission.READ_EXTERNAL_STORAGE" not in content:
                issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ GroupManagementActivity
            if "GroupManagementActivity" not in content:
                issues.append("GroupManagementActivity –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ")
            
        except Exception as e:
            issues.append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: {e}")
    else:
        issues.append("AndroidManifest.xml –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return issues

def check_layouts():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–∞–∫–µ—Ç—ã –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–±–ª–µ–º —Å –≥—Ä—É–ø–ø–∞–º–∏"""
    print("üé® –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫–µ—Ç–æ–≤...")
    
    layout_files = [
        "app/src/main/res/layout/activity_group_management.xml",
        "app/src/main/res/layout/item_group.xml",
        "app/src/main/res/layout/item_group_medicine.xml"
    ]
    
    issues = []
    
    for layout_file in layout_files:
        if os.path.exists(layout_file):
            try:
                with open(layout_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                if "RecyclerView" in content and "android:id" not in content:
                    issues.append(f"RecyclerView –±–µ–∑ ID –≤ {layout_file}")
                
                if "TextView" in content and "android:text" not in content:
                    issues.append(f"TextView –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –≤ {layout_file}")
                
            except Exception as e:
                issues.append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –º–∞–∫–µ—Ç–∞ {layout_file}: {e}")
        else:
            issues.append(f"–ú–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {layout_file}")
    
    return issues

def generate_test_report():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏...")
    
    report = []
    report.append("=" * 60)
    report.append("–û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê –ì–†–£–ü–ü")
    report.append("=" * 60)
    report.append("")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
    code_issues = analyze_code()
    report.append("–ê–ù–ê–õ–ò–ó –ö–û–î–ê:")
    if code_issues:
        for issue in code_issues:
            report.append(f"  ‚ö†Ô∏è {issue}")
    else:
        report.append("  ‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    report.append("")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
    manifest_issues = check_manifest()
    report.append("–ü–†–û–í–ï–†–ö–ê –ú–ê–ù–ò–§–ï–°–¢–ê:")
    if manifest_issues:
        for issue in manifest_issues:
            report.append(f"  ‚ö†Ô∏è {issue}")
    else:
        report.append("  ‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    report.append("")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫–µ—Ç–æ–≤
    layout_issues = check_layouts()
    report.append("–ü–†–û–í–ï–†–ö–ê –ú–ê–ö–ï–¢–û–í:")
    if layout_issues:
        for issue in layout_issues:
            report.append(f"  ‚ö†Ô∏è {issue}")
    else:
        report.append("  ‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    report.append("")
    
    # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    report.append("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    report.append("  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏—é groupOrder (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 0)")
    report.append("  2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏—é groupName (–Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º)")
    report.append("  3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ—Ä—è–¥–∫–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö")
    report.append("  4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—É—Å—Ç—ã—Ö –≥—Ä—É–ø–ø")
    report.append("  5. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ")
    report.append("")
    
    # –ò—Ç–æ–≥–∏
    total_issues = len(code_issues) + len(manifest_issues) + len(layout_issues)
    report.append("–ò–¢–û–ì–ò:")
    report.append(f"  –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {total_issues}")
    
    if total_issues == 0:
        report.append("  üéâ –ö–æ–¥ –≥–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ!")
    else:
        report.append("  ‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
    
    report.append("=" * 60)
    
    return report

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –£–ü–†–û–©–ï–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê –ì–†–£–ü–ü")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Gradle —Ç–µ—Å—Ç—ã
    gradle_success = run_gradle_test()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = generate_test_report()
    
    # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
    for line in report:
        print(line)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
    with open("group_test_report.txt", "w", encoding="utf-8") as f:
        for line in report:
            f.write(line + "\n")
    
    print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: group_test_report.txt")
    
    if gradle_success:
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏!")

if __name__ == "__main__":
    main() 