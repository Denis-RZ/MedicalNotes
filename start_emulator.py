#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Android —ç–º—É–ª—è—Ç–æ—Ä–∞
"""

import os
import sys
import subprocess
import time
import json
from pathlib import Path

class EmulatorLauncher:
    def __init__(self):
        self.emulator_path = None
        self.avd_manager_path = None
        
    def find_android_tools(self):
        """–ü–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ Android SDK"""
        possible_sdk_paths = [
            os.path.expanduser("~/AppData/Local/Android/Sdk"),
            "C:/Users/%USERNAME%/AppData/Local/Android/Sdk",
            "C:/Android/Sdk",
            "C:/Program Files/Android/Android Studio/sdk"
        ]
        
        for sdk_path in possible_sdk_paths:
            sdk_path = os.path.expandvars(sdk_path)
            if os.path.exists(sdk_path):
                emulator_path = os.path.join(sdk_path, "emulator", "emulator.exe")
                avd_manager_path = os.path.join(sdk_path, "cmdline-tools", "latest", "bin", "avdmanager.bat")
                
                if os.path.exists(emulator_path):
                    self.emulator_path = emulator_path
                    print(f"‚úÖ –≠–º—É–ª—è—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω: {emulator_path}")
                
                if os.path.exists(avd_manager_path):
                    self.avd_manager_path = avd_manager_path
                    print(f"‚úÖ AVD Manager –Ω–∞–π–¥–µ–Ω: {avd_manager_path}")
                
                if self.emulator_path and self.avd_manager_path:
                    return True
        
        print("‚ùå Android SDK –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    def list_avds(self):
        """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö AVD (Android Virtual Devices)"""
        try:
            result = subprocess.run([self.avd_manager_path, "list", "avd"], 
                                  capture_output=True, text=True, encoding='utf-8')
            
            if result.returncode != 0:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ AVD: {result.stderr}")
                return []
            
            avds = []
            lines = result.stdout.strip().split('\n')
            
            for line in lines:
                if line.strip() and "Name:" in line:
                    avd_name = line.split("Name:")[1].strip()
                    avds.append(avd_name)
            
            return avds
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ AVD: {e}")
            return []
    
    def create_avd(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ AVD"""
        try:
            print("üì± –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ AVD...")
            
            # –°–æ–∑–¥–∞–µ–º AVD —Å API 26 (Android 8.0)
            result = subprocess.run([
                self.avd_manager_path, "create", "avd",
                "-n", "MedicalNotes_Test",
                "-k", "system-images;android-26;google_apis;x86_64",
                "-d", "pixel_2"
            ], capture_output=True, text=True, encoding='utf-8')
            
            if result.returncode == 0:
                print("‚úÖ AVD —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                return "MedicalNotes_Test"
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è AVD: {result.stderr}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è AVD: {e}")
            return None
    
    def start_emulator(self, avd_name):
        """–ó–∞–ø—É—Å–∫ —ç–º—É–ª—è—Ç–æ—Ä–∞"""
        try:
            print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —ç–º—É–ª—è—Ç–æ—Ä: {avd_name}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —ç–º—É–ª—è—Ç–æ—Ä –≤ —Ñ–æ–Ω–µ
            process = subprocess.Popen([
                self.emulator_path, "-avd", avd_name,
                "-no-snapshot-load",  # –ù–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Å–Ω–∞–ø—à–æ—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
                "-no-boot-anim",      # –û—Ç–∫–ª—é—á–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
                "-gpu", "swiftshader_indirect"  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            
            print("‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞...")
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞
            for i in range(60):  # –ú–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥
                time.sleep(1)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ª–∏ —ç–º—É–ª—è—Ç–æ—Ä
                try:
                    result = subprocess.run(["adb", "devices"], 
                                          capture_output=True, text=True, encoding='utf-8')
                    
                    if "emulator" in result.stdout:
                        print("‚úÖ –≠–º—É–ª—è—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω!")
                        return True
                        
                except:
                    pass
                
                if i % 10 == 0:
                    print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ... ({i+1}/60)")
            
            print("‚ùå –≠–º—É–ª—è—Ç–æ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ 60 —Å–µ–∫—É–Ω–¥")
            process.terminate()
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞: {e}")
            return False
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞"""
        print("üì± Android Emulator Launcher")
        print("=" * 40)
        
        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã Android
        if not self.find_android_tools():
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ AVD
        avds = self.list_avds()
        
        if not avds:
            print("üì± AVD –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π...")
            avd_name = self.create_avd()
            if not avd_name:
                return False
            avds = [avd_name]
        
        # –í—ã–±–∏—Ä–∞–µ–º AVD
        if len(avds) == 1:
            avd_name = avds[0]
            print(f"‚úÖ –í—ã–±—Ä–∞–Ω AVD: {avd_name}")
        else:
            print("üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ AVD:")
            for i, avd in enumerate(avds, 1):
                print(f"  {i}. {avd}")
            
            try:
                choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ AVD (–Ω–æ–º–µ—Ä): ")) - 1
                if 0 <= choice < len(avds):
                    avd_name = avds[choice]
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")
                    return False
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
                return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —ç–º—É–ª—è—Ç–æ—Ä
        if self.start_emulator(avd_name):
            print("\nüéâ –≠–º—É–ª—è—Ç–æ—Ä –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
            print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å run_app.py –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
            return True
        else:
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    launcher = EmulatorLauncher()
    
    try:
        success = launcher.run()
        if not success:
            sys.exit(1)
    except KeyboardInterrupt:
        print("\nüëã –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 