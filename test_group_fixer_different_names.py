#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import xml.etree.ElementTree as ET
from datetime import datetime

def test_group_fixer_logic():
    """Test how GroupFixer works with different group names"""
    
    print("=== –¢–ï–°–¢ –õ–û–ì–ò–ö–ò GroupFixer –° –†–ê–ó–ù–´–ú–ò –ù–ê–ó–í–ê–ù–ò–Ø–ú–ò –ì–†–£–ü–ü ===")
    print()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –≥—Ä—É–ø–ø
    test_data = '''<?xml version="1.0" encoding="UTF-8"?>
<medicines>
  <medicine>
    <id>1</id>
    <name>–õ–∏–ø–µ—Ç–æ—Ä</name>
    <groupId>1001</groupId>
    <groupName>–¢–µ—Å—Ç–µ—Ä</groupName>
    <groupOrder>1</groupOrder>
    <groupStartDate>1754451744031</groupStartDate>
    <groupFrequency>EVERY_OTHER_DAY</groupFrequency>
  </medicine>
  <medicine>
    <id>2</id>
    <name>–§—É–±—É–∫—Å—É—Å–∞—Ç</name>
    <groupId>1002</groupId>
    <groupName>–¢–µ—Å—Ç–µ—Ä</groupName>
    <groupOrder>2</groupOrder>
    <groupStartDate>1754451755574</groupStartDate>
    <groupFrequency>EVERY_OTHER_DAY</groupFrequency>
  </medicine>
  <medicine>
    <id>3</id>
    <name>–ê—Å–ø–∏—Ä–∏–Ω</name>
    <groupId>2001</groupId>
    <groupName>–£—Ç—Ä–µ–Ω–Ω–∏–µ</groupName>
    <groupOrder>1</groupOrder>
    <groupStartDate>1754451800000</groupStartDate>
    <groupFrequency>DAILY</groupFrequency>
  </medicine>
  <medicine>
    <id>4</id>
    <name>–í–∏—Ç–∞–º–∏–Ω D</name>
    <groupId>2002</groupId>
    <groupName>–£—Ç—Ä–µ–Ω–Ω–∏–µ</groupName>
    <groupOrder>2</groupOrder>
    <groupStartDate>1754451801000</groupStartDate>
    <groupFrequency>DAILY</groupFrequency>
  </medicine>
  <medicine>
    <id>5</id>
    <name>–û–º–µ–≥–∞-3</name>
    <groupId>3001</groupId>
    <groupName>–í–µ—á–µ—Ä–Ω–∏–µ</groupName>
    <groupOrder>1</groupOrder>
    <groupStartDate>1754451900000</groupStartDate>
    <groupFrequency>DAILY</groupFrequency>
  </medicine>
</medicines>'''
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    with open('test_different_groups.xml', 'w', encoding='utf-8') as f:
        f.write(test_data)
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    tree = ET.parse('test_different_groups.xml')
    root = tree.getroot()
    
    medicines = []
    for medicine_elem in root.findall('medicine'):
        medicine = {
            'id': medicine_elem.find('id').text,
            'name': medicine_elem.find('name').text,
            'groupId': medicine_elem.find('groupId').text,
            'groupName': medicine_elem.find('groupName').text,
            'groupOrder': int(medicine_elem.find('groupOrder').text),
            'groupStartDate': int(medicine_elem.find('groupStartDate').text),
            'groupFrequency': medicine_elem.find('groupFrequency').text
        }
        medicines.append(medicine)
    
    print("–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    for medicine in medicines:
        print(f"  {medicine['name']}: –≥—Ä—É–ø–ø–∞ '{medicine['groupName']}', ID {medicine['groupId']}, –ø–æ—Ä—è–¥–æ–∫ {medicine['groupOrder']}")
    print()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É GroupFixer
    print("=== –õ–û–ì–ò–ö–ê GroupFixer ===")
    
    # 1. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥—Ä—É–ø–ø—ã
    groups_by_name = {}
    for medicine in medicines:
        group_name = medicine['groupName']
        if group_name not in groups_by_name:
            groups_by_name[group_name] = []
        groups_by_name[group_name].append(medicine)
    
    print(f"–ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: {len(groups_by_name)}")
    for group_name, group_medicines in groups_by_name.items():
        print(f"  –ì—Ä—É–ø–ø–∞ '{group_name}': {len(group_medicines)} –ª–µ–∫–∞—Ä—Å—Ç–≤")
    print()
    
    # 2. –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å (–æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–æ —Ä–∞–∑–Ω—ã–µ ID)
    groups_to_fix = {}
    for group_name, group_medicines in groups_by_name.items():
        unique_group_ids = set(medicine['groupId'] for medicine in group_medicines)
        if len(unique_group_ids) > 1:
            groups_to_fix[group_name] = group_medicines
            print(f"üîß –ì—Ä—É–ø–ø–∞ '{group_name}' –∏–º–µ–µ—Ç {len(unique_group_ids)} —Ä–∞–∑–Ω—ã—Ö ID: {unique_group_ids}")
        else:
            print(f"‚úÖ –ì—Ä—É–ø–ø–∞ '{group_name}' –≤ –ø–æ—Ä—è–¥–∫–µ (ID: {unique_group_ids})")
    print()
    
    # 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –≥—Ä—É–ø–ø—ã
    fixed_medicines = medicines.copy()
    
    for group_name, group_medicines in groups_to_fix.items():
        print(f"–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É: {group_name}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—É—é —Ä–∞–Ω–Ω—é—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞
        earliest_start = min(medicine['groupStartDate'] for medicine in group_medicines)
        earliest_start_date = datetime.fromtimestamp(earliest_start / 1000)
        print(f"  –û–±—â–∞—è –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≥—Ä—É–ø–ø—ã: {earliest_start_date}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π ID –≥—Ä—É–ø–ø—ã –∫–∞–∫ –æ–±—â–∏–π
        common_group_id = group_medicines[0]['groupId']
        print(f"  –û–±—â–∏–π ID –≥—Ä—É–ø–ø—ã: {common_group_id}")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º –ø–æ—Ä—è–¥–æ–∫
        sorted_medicines = sorted(group_medicines, key=lambda m: m['groupOrder'])
        
        for i, medicine in enumerate(sorted_medicines, 1):
            print(f"  {medicine['name']}: –ø–æ—Ä—è–¥–æ–∫ {medicine['groupOrder']} -> {i}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –≤ —Å–ø–∏—Å–∫–µ
            for j, med in enumerate(fixed_medicines):
                if med['id'] == medicine['id']:
                    fixed_medicines[j]['groupId'] = common_group_id
                    fixed_medicines[j]['groupStartDate'] = earliest_start
                    fixed_medicines[j]['groupOrder'] = i
                    break
        print()
    
    print("=== –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ===")
    for medicine in fixed_medicines:
        print(f"  {medicine['name']}: –≥—Ä—É–ø–ø–∞ '{medicine['groupName']}', ID {medicine['groupId']}, –ø–æ—Ä—è–¥–æ–∫ {medicine['groupOrder']}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥—Ä—É–ø–ø—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –æ—Å—Ç–∞–ª–∏—Å—å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏
    final_groups = {}
    for medicine in fixed_medicines:
        group_name = medicine['groupName']
        if group_name not in final_groups:
            final_groups[group_name] = []
        final_groups[group_name].append(medicine)
    
    print("–§–∏–Ω–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã:")
    for group_name, group_medicines in final_groups.items():
        group_ids = set(medicine['groupId'] for medicine in group_medicines)
        print(f"  –ì—Ä—É–ø–ø–∞ '{group_name}': ID {group_ids}, {len(group_medicines)} –ª–µ–∫–∞—Ä—Å—Ç–≤")
        for medicine in group_medicines:
            print(f"    - {medicine['name']} (–ø–æ—Ä—è–¥–æ–∫ {medicine['groupOrder']})")
    print()
    
    print("=== –í–´–í–û–î ===")
    print("‚úÖ GroupFixer –ù–ï –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –≥—Ä—É–ø–ø!")
    print("‚úÖ –ö–∞–∂–¥–∞—è –≥—Ä—É–ø–ø–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ–π")
    print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º, –Ω–æ —Ä–∞–∑–Ω—ã–º–∏ ID")
    print("‚úÖ –õ–µ–∫–∞—Ä—Å—Ç–≤–∞ –±–µ–∑ –≥—Ä—É–ø–ø—ã (groupName –ø—É—Å—Ç–æ–π) –Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—é—Ç—Å—è")

if __name__ == "__main__":
    test_group_fixer_logic() 