#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∫–∏ Android –ø—Ä–æ–µ–∫—Ç–∞ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º Gradle
"""

import os
import sys
import subprocess
import time
from pathlib import Path

def print_step(step, description):
    print(f"\n{'='*60}")
    print(f"–®–ê–ì {step}: {description}")
    print(f"{'='*60}")

def print_info(message):
    print(f"[INFO] {message}")

def print_error(message):
    print(f"[ERROR] {message}")

def print_success(message):
    print(f"[SUCCESS] {message}")

def setup_local_gradle():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π Gradle"""
    print_step(1, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ Gradle")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è Gradle
        local_gradle = Path('./.gradle_local')
        local_gradle.mkdir(exist_ok=True)
        
        # –ö–æ–ø–∏—Ä—É–µ–º gradle wrapper –∏–∑ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        source_wrapper = Path('../AndroidVoiceOn/gradle/wrapper')
        target_wrapper = Path('./gradle/wrapper')
        
        if source_wrapper.exists():
            import shutil
            shutil.copytree(source_wrapper, target_wrapper, dirs_exist_ok=True)
            print_success("Gradle wrapper —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω")
        
        print_success("–õ–æ–∫–∞–ª—å–Ω—ã–π Gradle –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return True
    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Gradle: {e}")
        return False

def build_project():
    """–°–æ–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç"""
    print_step(2, "–°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞")
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ Gradle
        env = os.environ.copy()
        env['GRADLE_USER_HOME'] = str(Path('./.gradle_local').absolute())
        print_info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω GRADLE_USER_HOME: {env['GRADLE_USER_HOME']}")
        
        print_info("–ó–∞–ø—É—Å–∫ gradlew clean...")
        clean_result = subprocess.run(
            ['gradlew.bat', 'clean'],
            capture_output=True,
            text=True,
            timeout=60,
            env=env
        )
        
        if clean_result.returncode != 0:
            print_info("–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")
        
        print_info("–ó–∞–ø—É—Å–∫ gradlew assembleDebug...")
        print_info("–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É —Å –≤—ã–≤–æ–¥–æ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        process = subprocess.Popen(
            ['gradlew.bat', 'assembleDebug'],
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
            bufsize=1,
            universal_newlines=True,
            env=env
        )
        
        # –í—ã–≤–æ–¥–∏–º –≤—ã–≤–æ–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        for line in process.stdout:
            print(line.rstrip())
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        return_code = process.wait()
        
        if return_code == 0:
            print_success("APK —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω!")
            return True
        else:
            print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ. –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {return_code}")
            return False
            
    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ: {e}")
        return False

def find_apk():
    """–ò—â–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã–π APK —Ñ–∞–π–ª"""
    print_step(3, "–ü–æ–∏—Å–∫ APK —Ñ–∞–π–ª–∞")
    
    apk_path = Path('app/build/outputs/apk/debug/app-debug.apk')
    
    if apk_path.exists():
        size_mb = apk_path.stat().st_size / (1024 * 1024)
        print_success(f"APK –Ω–∞–π–¥–µ–Ω: {apk_path}")
        print_info(f"–†–∞–∑–º–µ—Ä: {size_mb:.2f} –ú–ë")
        print_info(f"–ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {apk_path.absolute()}")
        return True
    else:
        print_error("APK —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print_info("–û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å: app/build/outputs/apk/debug/app-debug.apk")
        return False

def main():
    print("üöÄ –°–±–æ—Ä–∫–∞ Android –ø—Ä–æ–µ–∫—Ç–∞ MedicalNotes (–ª–æ–∫–∞–ª—å–Ω—ã–π Gradle)")
    print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {time.strftime('%Y-%m-%d %H:%M:%S')}")
    
    if not setup_local_gradle():
        print_error("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gradle –Ω–µ —É–¥–∞–ª–∞—Å—å")
        return False
    
    if not build_project():
        print_error("–°–±–æ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
        return False
    
    if not find_apk():
        print_error("APK –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print("\n" + "="*60)
    print_success("üéâ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print(f"–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {time.strftime('%Y-%m-%d %H:%M:%S')}")
    print("="*60)
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n[INFO] –°–±–æ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print_error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 