package com.medicalnotes.app.utils

import org.junit.Test
import org.junit.Assert.*
import java.time.LocalDateTime
import java.time.LocalTime
import java.time.ZoneId

class NotificationSchedulerTest {
    
    @Test
    fun testComputeNextTrigger_Creation_FutureTime() {
        // –°—Ü–µ–Ω–∞—Ä–∏–π 1: –°–æ–∑–¥–∞–Ω–∏–µ –≤ 12:00 –Ω–∞ 12:02
        val now = LocalDateTime.of(2024, 1, 15, 12, 0) // 12:00
        val targetTime = LocalTime.of(12, 2) // 12:02
        
        val result = NotificationScheduler.computeNextTriggerStatic(now, targetTime, isEdit = false)
        
        val expectedTime = LocalDateTime.of(2024, 1, 15, 12, 2) // —Å–µ–≥–æ–¥–Ω—è –≤ 12:02
        val expectedMs = expectedTime.atZone(ZoneId.systemDefault()).toInstant().toEpochMilli()
        
        assertEquals(expectedMs, result.triggerAtMs)
        assertFalse(result.markOverdue)
    }
    
    @Test
    fun testComputeNextTrigger_Edit_FutureTime() {
        // –°—Ü–µ–Ω–∞—Ä–∏–π 2: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ 12:01 –Ω–∞ 12:05
        val now = LocalDateTime.of(2024, 1, 15, 12, 1) // 12:01
        val targetTime = LocalTime.of(12, 5) // 12:05
        
        val result = NotificationScheduler.computeNextTriggerStatic(now, targetTime, isEdit = true)
        
        val expectedTime = LocalDateTime.of(2024, 1, 15, 12, 5) // —Å–µ–≥–æ–¥–Ω—è –≤ 12:05
        val expectedMs = expectedTime.atZone(ZoneId.systemDefault()).toInstant().toEpochMilli()
        
        assertEquals(expectedMs, result.triggerAtMs)
        assertFalse(result.markOverdue)
    }
    
    @Test
    fun testComputeNextTrigger_Edit_PastTime() {
        // –°—Ü–µ–Ω–∞—Ä–∏–π 3: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ 12:10 –Ω–∞ 09:00 (–ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è)
        val now = LocalDateTime.of(2024, 1, 15, 12, 10) // 12:10
        val targetTime = LocalTime.of(9, 0) // 09:00
        
        val result = NotificationScheduler.computeNextTriggerStatic(now, targetTime, isEdit = true)
        
        val expectedTime = LocalDateTime.of(2024, 1, 15, 12, 11) // ASAP: +1 –º–∏–Ω—É—Ç–∞
        val expectedMs = expectedTime.atZone(ZoneId.systemDefault()).toInstant().toEpochMilli()
        
        assertEquals(expectedMs, result.triggerAtMs)
        assertTrue(result.markOverdue)
    }
    
    @Test
    fun testComputeNextTrigger_Creation_PastTime() {
        // –°–æ–∑–¥–∞–Ω–∏–µ –≤ 12:00 –Ω–∞ 09:00 (–ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è) - –ø–µ—Ä–µ–Ω–æ—Å –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        val now = LocalDateTime.of(2024, 1, 15, 12, 0) // 12:00
        val targetTime = LocalTime.of(9, 0) // 09:00
        
        val result = NotificationScheduler.computeNextTriggerStatic(now, targetTime, isEdit = false)
        
        val expectedTime = LocalDateTime.of(2024, 1, 16, 9, 0) // –∑–∞–≤—Ç—Ä–∞ –≤ 09:00
        val expectedMs = expectedTime.atZone(ZoneId.systemDefault()).toInstant().toEpochMilli()
        
        assertEquals(expectedMs, result.triggerAtMs)
        assertFalse(result.markOverdue)
    }
    
    @Test
    fun testComputeNextTrigger_Edit_ExactCurrentTime() {
        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        val now = LocalDateTime.of(2024, 1, 15, 12, 0) // 12:00
        val targetTime = LocalTime.of(12, 0) // 12:00
        
        val result = NotificationScheduler.computeNextTriggerStatic(now, targetTime, isEdit = true)
        
        val expectedTime = LocalDateTime.of(2024, 1, 15, 12, 1) // ASAP: +1 –º–∏–Ω—É—Ç–∞
        val expectedMs = expectedTime.atZone(ZoneId.systemDefault()).toInstant().toEpochMilli()
        
        assertEquals(expectedMs, result.triggerAtMs)
        assertTrue(result.markOverdue)
    }
    
    @Test
    fun testComputeNextTrigger_Creation_ExactCurrentTime() {
        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        val now = LocalDateTime.of(2024, 1, 15, 12, 0) // 12:00
        val targetTime = LocalTime.of(12, 0) // 12:00
        
        val result = NotificationScheduler.computeNextTriggerStatic(now, targetTime, isEdit = false)
        
        val expectedTime = LocalDateTime.of(2024, 1, 15, 12, 0) // —Å–µ–≥–æ–¥–Ω—è –≤ 12:00
        val expectedMs = expectedTime.atZone(ZoneId.systemDefault()).toInstant().toEpochMilli()
        
        assertEquals(expectedMs, result.triggerAtMs)
        assertFalse(result.markOverdue)
    }
    
    @Test
    fun testNotificationTitlesAndDescriptions_OverdueMedicine() {
        println("=== –¢–ï–°–¢ –ó–ê–ì–û–õ–û–í–ö–û–í –ò –û–ü–ò–°–ê–ù–ò–ô –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –î–õ–Ø –ü–†–û–°–†–û–ß–ï–ù–ù–´–• –õ–ï–ö–ê–†–°–¢–í ===")
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤
        val medicineName = "–ê—Å–ø–∏—Ä–∏–Ω"
        val medicineTime = LocalTime.of(9, 0)
        val isOverdue = true
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ NotificationManager.showMedicineCardNotification
        val title = if (isOverdue) "–ü–†–û–°–†–û–ß–ï–ù–û: $medicineName" else "–ü—Ä–∏–º–∏—Ç–µ: $medicineName"
        val contentText = if (isOverdue) "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ! –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –±—ã–ª–æ –Ω–∞ $medicineTime" else "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ $medicineTime"
        
        println("üìù –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï:")
        println("   –ù–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞: $medicineName")
        println("   –í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞: $medicineTime")
        println("   –°—Ç–∞—Ç—É—Å –ø—Ä–æ—Å—Ä–æ—á–∫–∏: $isOverdue")
        
        println("\nüîç –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        println("   –ó–∞–≥–æ–ª–æ–≤–æ–∫: '$title'")
        println("   –û–ø–∏—Å–∞–Ω–∏–µ: '$contentText'")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
        val expectedTitle = "–ü–†–û–°–†–û–ß–ï–ù–û: $medicineName"
        assertEquals("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å '–ü–†–û–°–†–û–ß–ï–ù–û'", expectedTitle, title)
        assertTrue("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '–ü–†–û–°–†–û–ß–ï–ù–û'", title.startsWith("–ü–†–û–°–†–û–ß–ï–ù–û:"))
        assertTrue("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞", title.contains(medicineName))
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
        val expectedDescription = "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ! –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –±—ã–ª–æ –Ω–∞ $medicineTime"
        assertEquals("–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É", expectedDescription, contentText)
        assertTrue("–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ!'", contentText.startsWith("–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ!"))
        assertTrue("–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞", contentText.contains(medicineTime.toString()))
        
        println("\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢: –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
    }
    
    @Test
    fun testNotificationTitlesAndDescriptions_RegularMedicine() {
        println("=== –¢–ï–°–¢ –ó–ê–ì–û–õ–û–í–ö–û–í –ò –û–ü–ò–°–ê–ù–ò–ô –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –î–õ–Ø –û–ë–´–ß–ù–´–• –õ–ï–ö–ê–†–°–¢–í ===")
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤
        val medicineName = "–í–∏—Ç–∞–º–∏–Ω C"
        val medicineTime = LocalTime.of(14, 30)
        val isOverdue = false
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ NotificationManager.showMedicineCardNotification
        val title = if (isOverdue) "–ü–†–û–°–†–û–ß–ï–ù–û: $medicineName" else "–ü—Ä–∏–º–∏—Ç–µ: $medicineName"
        val contentText = if (isOverdue) "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ! –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –±—ã–ª–æ –Ω–∞ $medicineTime" else "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ $medicineTime"
        
        println("üìù –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï:")
        println("   –ù–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞: $medicineName")
        println("   –í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞: $medicineTime")
        println("   –°—Ç–∞—Ç—É—Å –ø—Ä–æ—Å—Ä–æ—á–∫–∏: $isOverdue")
        
        println("\nüîç –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        println("   –ó–∞–≥–æ–ª–æ–≤–æ–∫: '$title'")
        println("   –û–ø–∏—Å–∞–Ω–∏–µ: '$contentText'")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
        val expectedTitle = "–ü—Ä–∏–º–∏—Ç–µ: $medicineName"
        assertEquals("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å '–ü—Ä–∏–º–∏—Ç–µ'", expectedTitle, title)
        assertTrue("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '–ü—Ä–∏–º–∏—Ç–µ:'", title.startsWith("–ü—Ä–∏–º–∏—Ç–µ:"))
        assertTrue("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞", title.contains(medicineName))
        assertFalse("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å '–ü–†–û–°–†–û–ß–ï–ù–û'", title.contains("–ü–†–û–°–†–û–ß–ï–ù–û"))
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
        val expectedDescription = "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ $medicineTime"
        assertEquals("–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è", expectedDescription, contentText)
        assertTrue("–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞'", contentText.startsWith("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞"))
        assertTrue("–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞", contentText.contains(medicineTime.toString()))
        assertFalse("–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ!'", contentText.contains("–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ!"))
        
        println("\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢: –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
    }
    
    @Test
    fun testOverdueFlagLogic() {
        println("=== –¢–ï–°–¢ –õ–û–ì–ò–ö–ò –§–õ–ê–ì–ê –ü–†–û–°–†–û–ß–ö–ò ===")
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å —Ñ–ª–∞–≥–æ–º markOverdue
        val testCases = listOf(
            Triple("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è", LocalTime.of(9, 0), true),
            Triple("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è", LocalTime.of(16, 0), false),
            Triple("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è", LocalTime.of(9, 0), false),
            Triple("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è", LocalTime.of(16, 0), false)
        )
        
        val now = LocalDateTime.of(2024, 1, 15, 12, 0) // 12:00
        
        testCases.forEach { (description, targetTime, isEdit) ->
            println("\nüìã –¢–ï–°–¢: $description")
            println("   –í—Ä–µ–º—è: $targetTime")
            println("   –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: $isEdit")
            
            val result = NotificationScheduler.computeNextTriggerStatic(now, targetTime, isEdit)
            
            println("   –†–µ–∑—É–ª—å—Ç–∞—Ç markOverdue: ${result.markOverdue}")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É
            if (isEdit && targetTime <= now.toLocalTime()) {
                assertTrue("–ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è markOverdue –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å true", result.markOverdue)
            } else {
                assertFalse("–í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö markOverdue –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å false", result.markOverdue)
            }
        }
        
        println("\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢: –õ–æ–≥–∏–∫–∞ —Ñ–ª–∞–≥–∞ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    }
    
    /**
     * –î–û–ë–ê–í–õ–ï–ù–û: –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –≥—Ä—É–ø–ø—ã "—á–µ—Ä–µ–∑ –¥–µ–Ω—å" —Å —Ä–∞–∑–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ª–µ–∫–∞—Ä—Å—Ç–≤
     */
    @Test
    fun testGroupEveryOtherDayLogic_MultipleMedicines() {
        android.util.Log.d("NotificationSchedulerTest", "=== –¢–ï–°–¢ –ì–†–£–ü–ü–´ '–ß–ï–†–ï–ó –î–ï–ù–¨' –° –†–ê–ó–ù–´–ú –ö–û–õ–ò–ß–ï–°–¢–í–û–ú –õ–ï–ö–ê–†–°–¢–í ===")
        
        val today = java.time.LocalDate.now()
        val tomorrow = today.plusDays(1)
        val dayAfterTomorrow = today.plusDays(2)
        
        // –°–æ–∑–¥–∞–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ—Ä—è–¥–∫–∞–º–∏ –≤ –≥—Ä—É–ø–ø–µ
        val medicines = listOf(
            createTestMedicine("–õ–µ–∫–∞—Ä—Å—Ç–≤–æ 1", groupOrder = 1),
            createTestMedicine("–õ–µ–∫–∞—Ä—Å—Ç–≤–æ 2", groupOrder = 2),
            createTestMedicine("–õ–µ–∫–∞—Ä—Å—Ç–≤–æ 3", groupOrder = 3),
            createTestMedicine("–õ–µ–∫–∞—Ä—Å—Ç–≤–æ 4", groupOrder = 4),
            createTestMedicine("–õ–µ–∫–∞—Ä—Å—Ç–≤–æ 5", groupOrder = 5)
        )
        
        android.util.Log.d("NotificationSchedulerTest", "üìÖ –°–ï–ì–û–î–ù–Ø ($today):")
        medicines.forEach { medicine ->
            val shouldTake = DosageCalculator.shouldTakeMedicine(medicine, today)
            android.util.Log.d("NotificationSchedulerTest", "  ${medicine.name} (‚Ññ${medicine.groupOrder}): ${if (shouldTake) "‚úÖ –ü–†–ò–ù–ò–ú–ê–¢–¨" else "‚ùå –ù–ï –ü–†–ò–ù–ò–ú–ê–¢–¨"}")
        }
        
        android.util.Log.d("NotificationSchedulerTest", "üìÖ –ó–ê–í–¢–†–ê ($tomorrow):")
        medicines.forEach { medicine ->
            val shouldTake = DosageCalculator.shouldTakeMedicine(medicine, tomorrow)
            android.util.Log.d("NotificationSchedulerTest", "  ${medicine.name} (‚Ññ${medicine.groupOrder}): ${if (shouldTake) "‚úÖ –ü–†–ò–ù–ò–ú–ê–¢–¨" else "‚ùå –ù–ï –ü–†–ò–ù–ò–ú–ê–¢–¨"}")
        }
        
        android.util.Log.d("NotificationSchedulerTest", "üìÖ –ü–û–°–õ–ï–ó–ê–í–¢–†–ê ($dayAfterTomorrow):")
        medicines.forEach { medicine ->
            val shouldTake = DosageCalculator.shouldTakeMedicine(medicine, dayAfterTomorrow)
            android.util.Log.d("NotificationSchedulerTest", "  ${medicine.name} (‚Ññ${medicine.groupOrder}): ${if (shouldTake) "‚úÖ –ü–†–ò–ù–ò–ú–ê–¢–¨" else "‚ùå –ù–ï –ü–†–ò–ù–ò–ú–ê–¢–¨"}")
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É
        val todayResults = medicines.map { it to DosageCalculator.shouldTakeMedicine(it, today) }
        val tomorrowResults = medicines.map { it to DosageCalculator.shouldTakeMedicine(it, tomorrow) }
        
        // –°–µ–≥–æ–¥–Ω—è –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ —Å –Ω–µ—á–µ—Ç–Ω—ã–º–∏ –ø–æ—Ä—è–¥–∫–∞–º–∏ (1,3,5)
        val shouldTakeToday = todayResults.filter { it.second }.map { it.first.groupOrder }
        val shouldTakeTomorrow = tomorrowResults.filter { it.second }.map { it.first.groupOrder }
        
        android.util.Log.d("NotificationSchedulerTest", "‚úÖ –°–µ–≥–æ–¥–Ω—è –ø—Ä–∏–Ω–∏–º–∞—é—Ç: $shouldTakeToday")
        android.util.Log.d("NotificationSchedulerTest", "‚úÖ –ó–∞–≤—Ç—Ä–∞ –ø—Ä–∏–Ω–∏–º–∞—é—Ç: $shouldTakeTomorrow")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        assertTrue("–°–µ–≥–æ–¥–Ω—è –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–µ—á–µ—Ç–Ω—ã–µ –ø–æ—Ä—è–¥–∫–∏", shouldTakeToday.all { it % 2 == 1 })
        assertTrue("–ó–∞–≤—Ç—Ä–∞ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å —á–µ—Ç–Ω—ã–µ –ø–æ—Ä—è–¥–∫–∏", shouldTakeTomorrow.all { it % 2 == 0 })
        
        android.util.Log.d("NotificationSchedulerTest", "‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –õ–æ–≥–∏–∫–∞ –≥—Ä—É–ø–ø—ã '—á–µ—Ä–µ–∑ –¥–µ–Ω—å' —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    }
    
    private fun createTestMedicine(name: String, groupOrder: Int): com.medicalnotes.app.models.Medicine {
        return com.medicalnotes.app.models.Medicine(
            id = System.currentTimeMillis() + groupOrder,
            name = name,
            dosage = "1 —Ç–∞–±–ª–µ—Ç–∫–∞",
            quantity = 10,
            remainingQuantity = 10,
            time = java.time.LocalTime.of(9, 0),
            frequency = com.medicalnotes.app.models.DosageFrequency.EVERY_OTHER_DAY,
            groupName = "–ì—Ä—É–ø–ø–∞ —á–µ—Ä–µ–∑ –¥–µ–Ω—å",
            groupOrder = groupOrder,
            startDate = System.currentTimeMillis() - (24 * 60 * 60 * 1000) // –ù–∞—á–∞–ª–∏ –≤—á–µ—Ä–∞
        )
    }
} 