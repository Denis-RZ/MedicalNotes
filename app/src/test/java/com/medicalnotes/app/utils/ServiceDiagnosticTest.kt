package com.medicalnotes.app.utils

import android.content.Context
import android.content.Intent
import android.os.Build
import androidx.test.core.app.ApplicationProvider
import com.medicalnotes.app.service.OverdueCheckService
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith
import org.robolectric.RobolectricTestRunner
import org.robolectric.annotation.Config
import org.junit.Assert.*

/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–ª—É–∂–±—ã –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
 */
@RunWith(RobolectricTestRunner::class)
@Config(sdk = [Build.VERSION_CODES.O_MR1])
class ServiceDiagnosticTest {
    
    private lateinit var context: Context
    
    @Before
    fun setUp() {
        context = ApplicationProvider.getApplicationContext()
    }
    
    @Test
    fun testServiceStartup() {
        println("\nüîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–ü–£–°–ö–ê –°–õ–£–ñ–ë–´")
        println("=============================")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª—É–∂–±–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–∞
        try {
            OverdueCheckService.startService(context)
            println("‚úÖ –°–ª—É–∂–±–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞")
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–ª—É–∂–±—ã: ${e.message}")
            fail("–°–ª—É–∂–±–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–∞: ${e.message}")
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª—É–∂–±–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ
        val serviceIntent = Intent(context, OverdueCheckService::class.java)
        val resolveInfo = context.packageManager.resolveService(serviceIntent, 0)
        
        if (resolveInfo != null) {
            println("‚úÖ –°–ª—É–∂–±–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ")
            println("   - –ò–º—è: ${resolveInfo.serviceInfo.name}")
            println("   - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: ${resolveInfo.serviceInfo.exported}")
            println("   - –í–∫–ª—é—á–µ–Ω–∞: ${resolveInfo.serviceInfo.enabled}")
        } else {
            println("‚ùå –°–ª—É–∂–±–∞ –ù–ï –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ!")
            fail("–°–ª—É–∂–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ AndroidManifest.xml")
        }
    }
    
    @Test
    fun testServiceForegroundCapability() {
        println("\nüîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê FOREGROUND –°–õ–£–ñ–ë–´")
        println("=================================")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è foreground —Å–ª—É–∂–±—ã
        val hasForegroundPermission = context.checkSelfPermission(android.Manifest.permission.FOREGROUND_SERVICE) == android.content.pm.PackageManager.PERMISSION_GRANTED
        val hasForegroundHealthPermission = context.checkSelfPermission(android.Manifest.permission.FOREGROUND_SERVICE_HEALTH) == android.content.pm.PackageManager.PERMISSION_GRANTED
        
        println("–†–∞–∑—Ä–µ—à–µ–Ω–∏—è foreground —Å–ª—É–∂–±—ã:")
        println("   - FOREGROUND_SERVICE: ${if (hasForegroundPermission) "‚úÖ" else "‚ùå"}")
        println("   - FOREGROUND_SERVICE_HEALTH: ${if (hasForegroundHealthPermission) "‚úÖ" else "‚ùå"}")
        
        if (!hasForegroundPermission) {
            println("‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ FOREGROUND_SERVICE")
        }
        if (!hasForegroundHealthPermission) {
            println("‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ FOREGROUND_SERVICE_HEALTH")
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª—É–∂–±–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ foreground
        try {
            val service = OverdueCheckService()
            service.onCreate()
            println("‚úÖ –°–ª—É–∂–±–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞")
            
            val intent = Intent(context, OverdueCheckService::class.java)
            val result = service.onStartCommand(intent, 0, 1)
            println("‚úÖ onStartCommand –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            println("   - –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: $result")
            println("   - START_STICKY: ${result == android.app.Service.START_STICKY}")
            
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å–ª—É–∂–±—ã: ${e.message}")
            e.printStackTrace()
        }
    }
    
    @Test
    fun testServiceConfiguration() {
        println("\nüîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –°–õ–£–ñ–ë–´")
        println("===================================")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–ª—É–∂–±—ã
        println("–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–ª—É–∂–±—ã:")
        println("   - CHANNEL_ID: ${OverdueCheckService.CHANNEL_ID}")
        println("   - CHANNEL_ID_OVERDUE: ${OverdueCheckService.CHANNEL_ID_OVERDUE}")
        println("   - NOTIFICATION_ID: ${OverdueCheckService.NOTIFICATION_ID}")
        println("   - NOTIFICATION_ID_OVERDUE: ${OverdueCheckService.NOTIFICATION_ID_OVERDUE}")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –Ω–µ –ø—É—Å—Ç—ã–µ
        assertNotNull("CHANNEL_ID –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å null", OverdueCheckService.CHANNEL_ID)
        assertNotNull("CHANNEL_ID_OVERDUE –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å null", OverdueCheckService.CHANNEL_ID_OVERDUE)
        assertTrue("NOTIFICATION_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 0", OverdueCheckService.NOTIFICATION_ID > 0)
        assertTrue("NOTIFICATION_ID_OVERDUE –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 0", OverdueCheckService.NOTIFICATION_ID_OVERDUE > 0)
        
        println("‚úÖ –í—Å–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–ª—É–∂–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–æ–≤
        try {
            OverdueCheckService.setEditingActive(true)
            val isEditing = OverdueCheckService.isCurrentlyEditing()
            println("‚úÖ –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Ä–∞–±–æ—Ç–∞—é—Ç")
            println("   - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ: $isEditing")
            
            OverdueCheckService.setEditingActive(false)
            val isNotEditing = OverdueCheckService.isCurrentlyEditing()
            println("   - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ: $isNotEditing")
            
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–∞—Ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º: ${e.message}")
            fail("–ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç: ${e.message}")
        }
    }
    
    @Test
    fun comprehensiveServiceAnalysis() {
        println("\nüîç –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó –°–õ–£–ñ–ë–´")
        println("=============================")
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        testServiceStartup()
        testServiceForegroundCapability()
        testServiceConfiguration()
        
        println("\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
        println("===================")
        println("‚úÖ –°–ª—É–∂–±–∞ OverdueCheckService:")
        println("   - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ AndroidManifest.xml")
        println("   - –ú–æ–∂–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∫–∞–∫ foreground —Å–ª—É–∂–±–∞")
        println("   - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç START_STICKY –¥–ª—è –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
        println("   - –ò–º–µ–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
        println("   - –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –º–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        println("\nüéØ –û–ñ–ò–î–ê–ï–ú–û–ï –ü–û–í–ï–î–ï–ù–ò–ï –ù–ê –†–ï–ê–õ–¨–ù–û–ú –£–°–¢–†–û–ô–°–¢–í–ï:")
        println("   - –°–ª—É–∂–±–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        println("   - –î–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ñ–æ–Ω–µ –¥–∞–∂–µ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        println("   - –î–æ–ª–∂–Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø—Ä–∏ '—É–±–∏–π—Å—Ç–≤–µ' –ø—Ä–æ—Ü–µ—Å—Å–∞")
        println("   - –î–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç")
        println("   - –î–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö")
        
        println("\n‚ö†Ô∏è  –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ –ù–ê –†–ï–ê–õ–¨–ù–û–ú –£–°–¢–†–û–ô–°–¢–í–ï:")
        println("   - –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–º")
        println("   - –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞—Ç–∞—Ä–µ–∏")
        println("   - Do Not Disturb —Ä–µ–∂–∏–º")
        println("   - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        println("   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞")
        
        println("\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        println("   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ")
        println("   2. –û—Ç–∫–ª—é—á–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –±–∞—Ç–∞—Ä–µ–∏ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        println("   3. –í–∫–ª—é—á–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        println("   4. –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è Do Not Disturb")
        println("   5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ —á–µ—Ä–µ–∑ adb logcat –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏")
    }
} 