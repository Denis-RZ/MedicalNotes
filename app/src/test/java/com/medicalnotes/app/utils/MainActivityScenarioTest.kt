package com.medicalnotes.app.utils

import com.medicalnotes.app.models.DosageFrequency
import com.medicalnotes.app.models.Medicine
import org.junit.Test
import org.junit.Assert.*
import java.time.LocalDate
import java.time.LocalTime

class MainActivityScenarioTest {

    @Test
    fun testMainActivityScenario() {
        val today = LocalDate.now()
        val startDate = today.minusDays(10)
        
        // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –ª–µ–∫–∞—Ä—Å—Ç–≤ "—á–µ—Ä–µ–∑ –¥–µ–Ω—å"
        val lipetor = Medicine(
            id = 1,
            name = "–õ–∏–ø–µ—Ç–æ—Ä",
            dosage = "1 —Ç–∞–±–ª–µ—Ç–∫–∞",
            frequency = DosageFrequency.EVERY_OTHER_DAY,
            time = LocalTime.of(18, 0),
            startDate = startDate.toEpochDay() * 24 * 60 * 60 * 1000,
            isActive = true,
            groupId = 1L,
            groupName = "–ì—Ä—É–ø–ø–∞ 1",
            groupOrder = 1, // –ü—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –≤ —á–µ—Ç–Ω—ã–µ –¥–Ω–∏ (0, 2, 4...)
            takenToday = false,
            quantity = 30,
            remainingQuantity = 30
        )
        
        val fubuxicin = Medicine(
            id = 2,
            name = "–§—É–±—É–∫—Å–∏—Ü–∏–Ω",
            dosage = "1 —Ç–∞–±–ª–µ—Ç–∫–∞",
            frequency = DosageFrequency.EVERY_OTHER_DAY,
            time = LocalTime.of(18, 0),
            startDate = startDate.toEpochDay() * 24 * 60 * 60 * 1000,
            isActive = true,
            groupId = 1L,
            groupName = "–ì—Ä—É–ø–ø–∞ 1",
            groupOrder = 2, // –ü—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –≤ –Ω–µ—á–µ—Ç–Ω—ã–µ –¥–Ω–∏ (1, 3, 5...)
            takenToday = false,
            quantity = 30,
            remainingQuantity = 30
        )
        
        val medicines = listOf(lipetor, fubuxicin)
        
        println("=== –¢–ï–°–¢ –°–¶–ï–ù–ê–†–ò–Ø MainActivity ===")
        println("–°–µ–≥–æ–¥–Ω—è: $today")
        println("–î–Ω–µ–π —Å –Ω–∞—á–∞–ª–∞: ${java.time.temporal.ChronoUnit.DAYS.between(startDate, today)}")
        
        // –®–∞–≥ 1: –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–∫–∞–∫ –≤ loadTodayMedicines)
        println("\n=== –®–ê–ì 1: –ù–ê–ß–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï (loadTodayMedicines) ===")
        val initialTodayMedicines = getActiveMedicinesForDate(medicines, today)
        println("–ù–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ '–Ω–∞ —Å–µ–≥–æ–¥–Ω—è': ${initialTodayMedicines.map { it.name }}")
        
        // –®–∞–≥ 2: –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ "–ø—Ä–∏–Ω—è–ª" –¥–ª—è –õ–∏–ø–µ—Ç–æ—Ä–∞ (–∫–∞–∫ –≤ takeMedicine)
        println("\n=== –®–ê–ì 2: –ù–ê–ñ–ê–¢–ò–ï '–ü–†–ò–ù–Ø–õ' –î–õ–Ø –õ–ò–ü–ï–¢–û–†–ê (takeMedicine) ===")
        val updatedMedicines = medicines.map { medicine ->
            if (medicine.id == 1L) { // –õ–∏–ø–µ—Ç–æ—Ä
                val updated = medicine.copy(
                    takenToday = true,
                    isMissed = false,
                    lastTakenTime = System.currentTimeMillis(),
                    takenAt = System.currentTimeMillis(),
                    remainingQuantity = medicine.remainingQuantity - 1
                )
                println("–û–±–Ω–æ–≤–ª–µ–Ω –õ–∏–ø–µ—Ç–æ—Ä:")
                println("  - takenToday: ${updated.takenToday}")
                println("  - remainingQuantity: ${updated.remainingQuantity}")
                println("  - lastTakenTime: ${updated.lastTakenTime}")
                updated
            } else {
                medicine
            }
        }
        
        // –®–∞–≥ 3: –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ (–∫–∞–∫ –≤ loadTodayMedicines –ø–æ—Å–ª–µ takeMedicine)
        println("\n=== –®–ê–ì 3: –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê –°–ü–ò–°–ö–ê (loadTodayMedicines –ø–æ—Å–ª–µ takeMedicine) ===")
        val finalTodayMedicines = getActiveMedicinesForDate(updatedMedicines, today)
        println("–§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ '–Ω–∞ —Å–µ–≥–æ–¥–Ω—è': ${finalTodayMedicines.map { it.name }}")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        val lipetorInInitial = initialTodayMedicines.any { it.id == 1L }
        val fubuxicinInInitial = initialTodayMedicines.any { it.id == 2L }
        val lipetorInFinal = finalTodayMedicines.any { it.id == 1L }
        val fubuxicinInFinal = finalTodayMedicines.any { it.id == 2L }
        
        println("\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===")
        println("–õ–∏–ø–µ—Ç–æ—Ä –≤ –Ω–∞—á–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ: $lipetorInInitial")
        println("–§—É–±—É–∫—Å–∏—Ü–∏–Ω –≤ –Ω–∞—á–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ: $fubuxicinInInitial")
        println("–õ–∏–ø–µ—Ç–æ—Ä –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ: $lipetorInFinal")
        println("–§—É–±—É–∫—Å–∏—Ü–∏–Ω –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ: $fubuxicinInFinal")
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –¥–µ–Ω—å –≥—Ä—É–ø–ø—ã —Å–µ–≥–æ–¥–Ω—è
        val daysSinceStart = java.time.temporal.ChronoUnit.DAYS.between(startDate, today)
        val groupDay = (daysSinceStart % 2).toInt()
        println("–î–µ–Ω—å –≥—Ä—É–ø–ø—ã: $groupDay (${if (groupDay == 0) "—á–µ—Ç–Ω—ã–π" else "–Ω–µ—á–µ—Ç–Ω—ã–π"})")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        if (groupDay == 0) {
            // –ß–µ—Ç–Ω—ã–π –¥–µ–Ω—å - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –õ–∏–ø–µ—Ç–æ—Ä
            assertTrue("–õ–∏–ø–µ—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –Ω–∞—á–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ –≤ —á–µ—Ç–Ω—ã–π –¥–µ–Ω—å", lipetorInInitial)
            assertFalse("–§—É–±—É–∫—Å–∏—Ü–∏–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –Ω–∞—á–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ –≤ —á–µ—Ç–Ω—ã–π –¥–µ–Ω—å", fubuxicinInInitial)
            assertFalse("–õ–∏–ø–µ—Ç–æ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ (–ø—Ä–∏–Ω—è—Ç)", lipetorInFinal)
            assertFalse("–§—É–±—É–∫—Å–∏—Ü–∏–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ", fubuxicinInFinal)
        } else {
            // –ù–µ—á–µ—Ç–Ω—ã–π –¥–µ–Ω—å - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –§—É–±—É–∫—Å–∏—Ü–∏–Ω
            assertFalse("–õ–∏–ø–µ—Ç–æ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –Ω–∞—á–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ –≤ –Ω–µ—á–µ—Ç–Ω—ã–π –¥–µ–Ω—å", lipetorInInitial)
            assertTrue("–§—É–±—É–∫—Å–∏—Ü–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –Ω–∞—á–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ –≤ –Ω–µ—á–µ—Ç–Ω—ã–π –¥–µ–Ω—å", fubuxicinInInitial)
            assertFalse("–õ–∏–ø–µ—Ç–æ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ", lipetorInFinal)
            assertFalse("–§—É–±—É–∫—Å–∏—Ü–∏–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ (–ø—Ä–∏–Ω—è—Ç)", fubuxicinInFinal)
        }
        
        // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ —Å–ø–∏—Å–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º
        assertTrue("–°–ø–∏—Å–æ–∫ '–Ω–∞ —Å–µ–≥–æ–¥–Ω—è' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞", finalTodayMedicines.isEmpty())
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –§—É–±—É–∫—Å–∏—Ü–∏–Ω –ù–ï –ø–æ—è–≤–∏–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –õ–∏–ø–µ—Ç–æ—Ä–∞
        assertFalse("–§—É–±—É–∫—Å–∏—Ü–∏–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è –≤ —Å–ø–∏—Å–∫–µ –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –õ–∏–ø–µ—Ç–æ—Ä–∞", fubuxicinInFinal)
    }
    
    /**
     * –°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é getActiveMedicinesForDate –∏–∑ DosageCalculator
     */
    private fun getActiveMedicinesForDate(medicines: List<Medicine>, date: LocalDate): List<Medicine> {
        println("=== –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ê–ö–¢–ò–í–ù–´–• –õ–ï–ö–ê–†–°–¢–í ===")
        val activeMedicines = medicines.filter { medicine ->
            val isActive = medicine.isActive
            val shouldTake = shouldTakeMedicineInGroup(medicine, date)
            val isActiveAndShouldTake = isActive && shouldTake
            
            println("–õ–µ–∫–∞—Ä—Å—Ç–≤–æ: ${medicine.name}")
            println("  - isActive: $isActive")
            println("  - shouldTake: $shouldTake")
            println("  - isActiveAndShouldTake: $isActiveAndShouldTake")
            
            isActiveAndShouldTake
        }
        
        println("–ê–∫—Ç–∏–≤–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤: ${activeMedicines.size}")
        
        // –ü—Ä–∏–Ω—è—Ç—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –¥–æ–ª–∂–Ω—ã –∏—Å—á–µ–∑–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ "–Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
        val medicinesForToday = activeMedicines.filter { medicine ->
            !medicine.takenToday
        }
        
        println("–†–µ–∑—É–ª—å—Ç–∞—Ç: ${medicinesForToday.size} –ª–µ–∫–∞—Ä—Å—Ç–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
        
        // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        activeMedicines.forEach { medicine ->
            println("üîç –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: ${medicine.name}")
            println("  - takenToday: ${medicine.takenToday}")
            println("  - lastTakenTime: ${medicine.lastTakenTime}")
            println("  - –í —Å–ø–∏—Å–∫–µ '–Ω–∞ —Å–µ–≥–æ–¥–Ω—è': ${medicinesForToday.contains(medicine)}")
            println("  - –ü—Ä–∏—á–∏–Ω–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è: ${if (!medicinesForToday.contains(medicine)) "takenToday = true" else "–≤–∫–ª—é—á–µ–Ω–æ"}")
        }
        
        return medicinesForToday
    }
    
    /**
     * –õ–æ–≥–∏–∫–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤ (—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ DosageCalculator)
     */
    private fun shouldTakeMedicineInGroup(medicine: Medicine, date: LocalDate): Boolean {
        val startDate = LocalDate.ofEpochDay(medicine.startDate / (24 * 60 * 60 * 1000))
        val daysSinceStart = java.time.temporal.ChronoUnit.DAYS.between(startDate, date)
        
        // –õ–æ–≥–∏–∫–∞ –≥—Ä—É–ø–ø—ã "—á–µ—Ä–µ–∑ –¥–µ–Ω—å"
        if (medicine.frequency == DosageFrequency.EVERY_OTHER_DAY) {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –¥–µ–Ω—å –≥—Ä—É–ø–ø—ã —Å–µ–≥–æ–¥–Ω—è (0, 1, 2, 3...)
            val groupDay = (daysSinceStart % 2).toInt()
            
            val shouldTake = when {
                medicine.groupOrder <= 0 -> false  // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
                medicine.groupOrder % 2 == 1 -> groupDay == 0  // –ù–µ—á–µ—Ç–Ω—ã–µ –ø–æ—Ä—è–¥–∫–∏ (1,3,5...) –≤ —á–µ—Ç–Ω—ã–µ –¥–Ω–∏
                medicine.groupOrder % 2 == 0 -> groupDay == 1  // –ß–µ—Ç–Ω—ã–µ –ø–æ—Ä—è–¥–∫–∏ (2,4,6...) –≤ –Ω–µ—á–µ—Ç–Ω—ã–µ –¥–Ω–∏
                else -> false
            }
            
            return shouldTake
        }
        
        return false
    }
} 