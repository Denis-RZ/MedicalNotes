package com.medicalnotes.app.utils

import android.app.NotificationManager
import android.content.Context
import android.os.Build
import androidx.test.core.app.ApplicationProvider
import com.medicalnotes.app.models.DosageFrequency
import com.medicalnotes.app.models.Medicine
import com.medicalnotes.app.service.OverdueCheckService
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith
import org.robolectric.RobolectricTestRunner
import org.robolectric.annotation.Config
import java.time.LocalTime
import org.junit.Assert.*
import android.util.Log

@RunWith(RobolectricTestRunner::class)
@Config(sdk = [Build.VERSION_CODES.O_MR1, Build.VERSION_CODES.P, Build.VERSION_CODES.Q, Build.VERSION_CODES.R, Build.VERSION_CODES.S])
class OverdueNotificationTest {
    
    private lateinit var context: Context
    private lateinit var dataManager: DataManager
    private lateinit var notificationManager: NotificationManager
    
    @Before
    fun setUp() {
        context = ApplicationProvider.getApplicationContext()
        dataManager = DataManager(context)
        notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        
        // –û—á–∏—â–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
        notificationManager.cancelAll()
        Log.d("OverdueTest", "=== –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ===")
    }
    
    @Test
    fun testOverdueNotificationShowsWithoutSound() {
        Log.d("OverdueTest", "=== –¢–ï–°–¢ –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ë–ï–ó –ó–í–£–ö–ê ===")
        
        // 1. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ
        val overdueMedicine = createOverdueMedicine()
        Log.d("OverdueTest", "üìù –°–æ–∑–¥–∞–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ: ${overdueMedicine.name}")
        Log.d("OverdueTest", "   –í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞: ${overdueMedicine.time}")
        Log.d("OverdueTest", "   –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${LocalTime.now()}")
        
        // 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–æ
        val addSuccess = dataManager.addMedicine(overdueMedicine)
        assertTrue("–õ–µ–∫–∞—Ä—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ", addSuccess)
        Log.d("OverdueTest", "‚úÖ –õ–µ–∫–∞—Ä—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        
        // 3. –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        simulateOverdueNotification(overdueMedicine)
        
        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ
        val activeNotifications = notificationManager.activeNotifications
        Log.d("OverdueTest", "üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${activeNotifications.size}")
        
        val overdueNotification = activeNotifications.find { 
            it.id == OverdueCheckService.NOTIFICATION_ID_OVERDUE 
        }
        
        assertNotNull("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤–∞—Ö –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–æ", overdueNotification)
        Log.d("OverdueTest", "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤–∞—Ö –Ω–∞–π–¥–µ–Ω–æ")
        
        // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        val notification = overdueNotification!!.notification
        Log.d("OverdueTest", "üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
        Log.d("OverdueTest", "   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${notification.priority}")
        Log.d("OverdueTest", "   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${notification.category}")
        Log.d("OverdueTest", "   –í–∏–¥–∏–º–æ—Å—Ç—å: ${notification.visibility}")
        Log.d("OverdueTest", "   Full Screen Intent: ${notification.fullScreenIntent != null}")
        Log.d("OverdueTest", "   –ó–≤—É–∫: ${notification.sound}")
        Log.d("OverdueTest", "   –í–∏–±—Ä–∞—Ü–∏—è: ${notification.vibrate}")
        
        // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        assertEquals("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º", 
            android.app.Notification.PRIORITY_MAX, notification.priority)
        assertEquals("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å ALARM", 
            android.app.Notification.CATEGORY_ALARM, notification.category)
        assertEquals("–í–∏–¥–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å PUBLIC", 
            android.app.Notification.VISIBILITY_PUBLIC, notification.visibility)
        assertTrue("Full Screen Intent –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", 
            notification.fullScreenIntent != null)
        assertNull("–ó–≤—É–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω", notification.sound)
        
        Log.d("OverdueTest", "‚úÖ –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        Log.d("OverdueTest", "=== –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û ===")
    }
    
    private fun createOverdueMedicine(): Medicine {
        val overdueTime = LocalTime.now().minusHours(2)
        
        return Medicine(
            id = 0,
            name = "–¢–µ—Å—Ç –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–µ –õ–µ–∫–∞—Ä—Å—Ç–≤–æ",
            dosage = "1 —Ç–∞–±–ª–µ—Ç–∫–∞",
            quantity = 30,
            remainingQuantity = 30,
            medicineType = "—Ç–∞–±–ª–µ—Ç–∫–∏",
            time = overdueTime,
            notes = "–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ",
            isActive = true,
            frequency = DosageFrequency.DAILY,
            startDate = System.currentTimeMillis() - 86400000,
            takenToday = false,
            lastTakenTime = 0L
        )
    }
    
    private fun simulateOverdueNotification(medicine: Medicine) {
        Log.d("OverdueTest", "üîÑ –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è ${medicine.name}")
        
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é, –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç OverdueCheckService
        val intent = android.content.Intent(context, com.medicalnotes.app.MainActivity::class.java).apply {
            flags = android.content.Intent.FLAG_ACTIVITY_NEW_TASK or android.content.Intent.FLAG_ACTIVITY_CLEAR_TASK
            putExtra("show_overdue_medicines", true)
        }
        
        val pendingIntent = android.app.PendingIntent.getActivity(
            context,
            0,
            intent,
            android.app.PendingIntent.FLAG_UPDATE_CURRENT or android.app.PendingIntent.FLAG_IMMUTABLE
        )
        
        val notification = androidx.core.app.NotificationCompat.Builder(context, OverdueCheckService.CHANNEL_ID_OVERDUE)
            .setContentTitle("üö® –ü–†–û–°–†–û–ß–ï–ù–ù–´–ï –õ–ï–ö–ê–†–°–¢–í–ê!")
            .setContentText("–£ –≤–∞—Å 1 –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤")
            .setStyle(androidx.core.app.NotificationCompat.BigTextStyle()
                .bigText("üö® –ü–†–û–°–†–û–ß–ï–ù–ù–´–ï –õ–ï–ö–ê–†–°–¢–í–ê: ${medicine.name}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–º–∏—Ç–µ –∏—Ö –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!"))
            .setSmallIcon(com.medicalnotes.app.R.drawable.ic_medicine)
            .setContentIntent(pendingIntent)
            .setPriority(androidx.core.app.NotificationCompat.PRIORITY_MAX)
            .setCategory(androidx.core.app.NotificationCompat.CATEGORY_ALARM)
            .setAutoCancel(false)
            .setOngoing(true)
            .setSound(null) // –ë–µ–∑ –∑–≤—É–∫–∞
            .setVibrate(null) // –ë–µ–∑ –≤–∏–±—Ä–∞—Ü–∏–∏
            .setLights(0xFF0000FF.toInt(), 3000, 3000)
            .setVisibility(androidx.core.app.NotificationCompat.VISIBILITY_PUBLIC)
            .setFullScreenIntent(pendingIntent, true)
            .setTimeoutAfter(0)
            .build()
        
        notificationManager.notify(OverdueCheckService.NOTIFICATION_ID_OVERDUE, notification)
        Log.d("OverdueTest", "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ")
    }
} 