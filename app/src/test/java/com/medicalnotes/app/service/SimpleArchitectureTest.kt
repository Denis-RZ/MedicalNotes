package com.medicalnotes.app.service

import android.content.Context
import androidx.test.core.app.ApplicationProvider
import com.medicalnotes.app.models.DosageFrequency
import com.medicalnotes.app.models.Medicine
import com.medicalnotes.app.utils.DataManager
import com.medicalnotes.app.utils.MedicineStatus
import com.medicalnotes.app.utils.MedicineStatusHelper
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith
import org.robolectric.RobolectricTestRunner
import org.robolectric.annotation.Config
import java.time.LocalDate
import java.time.LocalTime
import java.util.*

@RunWith(RobolectricTestRunner::class)
@Config(sdk = [28])
class SimpleArchitectureTest {

    private lateinit var context: Context
    private lateinit var dataManager: DataManager

    @Before
    fun setUp() {
        context = ApplicationProvider.getApplicationContext()
        dataManager = DataManager(context)
        clearTestData()
    }

    @Test
    fun testArchitecture_OverdueMedicineFlow() {
        println("üèóÔ∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ô –¢–ï–°–¢: –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ")
        println("=".repeat(50))
        
        // 1. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ (2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥)
        val overdueMedicine = createTestMedicine(
            name = "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ",
            time = LocalTime.now().minusHours(2),
            frequency = DosageFrequency.DAILY
        )
        
        println("üìù –°–æ–∑–¥–∞–Ω–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ: ${overdueMedicine.name}")
        println("   –í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞: ${overdueMedicine.time}")
        println("   –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${LocalTime.now()}")
        
        // 2. –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        val addSuccess = dataManager.addMedicine(overdueMedicine)
        println("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É: ${if (addSuccess) "–£–°–ü–ï–•" else "–û–®–ò–ë–ö–ê"}")
        
        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É MedicineStatusHelper
        println("\nüîç –ê–ù–ê–õ–ò–ó –õ–û–ì–ò–ö–ò:")
        
        val shouldTakeToday = MedicineStatusHelper.shouldTakeToday(overdueMedicine)
        println("   –ü–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é —Å–µ–≥–æ–¥–Ω—è: $shouldTakeToday")
        
        val isOverdue = MedicineStatusHelper.isOverdue(overdueMedicine)
        println("   –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: $isOverdue")
        
        val status = MedicineStatusHelper.getMedicineStatus(overdueMedicine)
        println("   –°—Ç–∞—Ç—É—Å: $status")
        
        // 4. –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É OverdueCheckService
        println("\nüîÑ –°–ò–ú–£–õ–Ø–¶–ò–Ø –§–û–ù–û–í–û–ì–û –ü–†–û–¶–ï–°–°–ê:")
        simulateOverdueCheck()
        
        println("\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢: –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è")
    }

    @Test
    fun testArchitecture_BufferTimeFlow() {
        println("üèóÔ∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ô –¢–ï–°–¢: –õ–µ–∫–∞—Ä—Å—Ç–≤–æ –≤ –±—É—Ñ–µ—Ä–µ")
        println("=".repeat(50))
        
        // 1. –°–æ–∑–¥–∞–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –≤ –±—É—Ñ–µ—Ä–µ (10 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥)
        val bufferMedicine = createTestMedicine(
            name = "–õ–µ–∫–∞—Ä—Å—Ç–≤–æ –≤ –±—É—Ñ–µ—Ä–µ",
            time = LocalTime.now().minusMinutes(10),
            frequency = DosageFrequency.DAILY
        )
        
        println("üìù –°–æ–∑–¥–∞–Ω–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ: ${bufferMedicine.name}")
        println("   –í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞: ${bufferMedicine.time}")
        println("   –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${LocalTime.now()}")
        println("   –ë—É—Ñ–µ—Ä –≤—Ä–µ–º–µ–Ω–∏: 15 –º–∏–Ω—É—Ç")
        
        // 2. –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        val addSuccess = dataManager.addMedicine(bufferMedicine)
        println("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É: ${if (addSuccess) "–£–°–ü–ï–•" else "–û–®–ò–ë–ö–ê"}")
        
        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É MedicineStatusHelper
        println("\nüîç –ê–ù–ê–õ–ò–ó –õ–û–ì–ò–ö–ò:")
        
        val shouldTakeToday = MedicineStatusHelper.shouldTakeToday(bufferMedicine)
        println("   –ü–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é —Å–µ–≥–æ–¥–Ω—è: $shouldTakeToday")
        
        val isOverdue = MedicineStatusHelper.isOverdue(bufferMedicine)
        println("   –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: $isOverdue")
        
        val status = MedicineStatusHelper.getMedicineStatus(bufferMedicine)
        println("   –°—Ç–∞—Ç—É—Å: $status")
        
        // 4. –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É OverdueCheckService
        println("\nüîÑ –°–ò–ú–£–õ–Ø–¶–ò–Ø –§–û–ù–û–í–û–ì–û –ü–†–û–¶–ï–°–°–ê:")
        simulateOverdueCheck()
        
        println("\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢: –õ–µ–∫–∞—Ä—Å—Ç–≤–æ –≤ –±—É—Ñ–µ—Ä–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
    }

    @Test
    fun testArchitecture_MultipleMedicinesFlow() {
        println("üèóÔ∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ô –¢–ï–°–¢: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞")
        println("=".repeat(50))
        
        // 1. –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–µ–∫–∞—Ä—Å—Ç–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
        val medicines = listOf(
            createTestMedicine("–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–µ", LocalTime.now().minusHours(2), DosageFrequency.DAILY),
            createTestMedicine("–í –±—É—Ñ–µ—Ä–µ", LocalTime.now().minusMinutes(10), DosageFrequency.DAILY),
            createTestMedicine("–ü—Ä–∏–Ω—è—Ç–æ–µ", LocalTime.now().minusHours(1), DosageFrequency.DAILY, takenToday = true),
            createTestMedicine("–ë—É–¥—É—â–µ–µ", LocalTime.now().plusHours(2), DosageFrequency.DAILY)
        )
        
        println("üìù –°–æ–∑–¥–∞–Ω–æ –ª–µ–∫–∞—Ä—Å—Ç–≤: ${medicines.size}")
        medicines.forEach { medicine ->
            println("   - ${medicine.name}: ${medicine.time}")
        }
        
        // 2. –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
        println("\nüíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ë–ê–ó–£:")
        medicines.forEach { medicine ->
            val addSuccess = dataManager.addMedicine(medicine)
            println("   ${medicine.name}: ${if (addSuccess) "–£–°–ü–ï–•" else "–û–®–ò–ë–ö–ê"}")
        }
        
        // 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã
        println("\nüîç –ê–ù–ê–õ–ò–ó –°–¢–ê–¢–£–°–û–í:")
        val allMedicines = dataManager.getActiveMedicines()
        println("   –í—Å–µ–≥–æ –≤ –±–∞–∑–µ: ${allMedicines.size}")
        
        val overdueMedicines = allMedicines.filter { MedicineStatusHelper.isOverdue(it) }
        println("   –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö: ${overdueMedicines.size}")
        overdueMedicines.forEach { println("     - ${it.name}") }
        
        val upcomingMedicines = allMedicines.filter { 
            MedicineStatusHelper.getMedicineStatus(it) == MedicineStatus.UPCOMING 
        }
        println("   –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö: ${upcomingMedicines.size}")
        upcomingMedicines.forEach { println("     - ${it.name}") }
        
        val takenMedicines = allMedicines.filter { 
            MedicineStatusHelper.getMedicineStatus(it) == MedicineStatus.TAKEN_TODAY 
        }
        println("   –ü—Ä–∏–Ω—è—Ç—ã—Ö: ${takenMedicines.size}")
        takenMedicines.forEach { println("     - ${it.name}") }
        
        // 4. –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É OverdueCheckService
        println("\nüîÑ –°–ò–ú–£–õ–Ø–¶–ò–Ø –§–û–ù–û–í–û–ì–û –ü–†–û–¶–ï–°–°–ê:")
        simulateOverdueCheck()
        
        println("\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è")
    }

    @Test
    fun testArchitecture_BufferTimeLogic() {
        println("üèóÔ∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ô –¢–ï–°–¢: –õ–æ–≥–∏–∫–∞ –±—É—Ñ–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏")
        println("=".repeat(50))
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –±—É—Ñ–µ—Ä–∞
        val testCases = listOf(
            Triple("–î–æ –±—É—Ñ–µ—Ä–∞", LocalTime.now().minusMinutes(14), false),
            Triple("–†–æ–≤–Ω–æ –±—É—Ñ–µ—Ä", LocalTime.now().minusMinutes(15), false),
            Triple("–ü–æ—Å–ª–µ –±—É—Ñ–µ—Ä–∞", LocalTime.now().minusMinutes(16), true)
        )
        
        println("üìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–†–ê–ù–ò–ß–ù–´–• –°–õ–£–ß–ê–ï–í:")
        testCases.forEach { (description, time, expectedOverdue) ->
            val medicine = createTestMedicine(
                name = "–¢–µ—Å—Ç $description",
                time = time,
                frequency = DosageFrequency.DAILY
            )
            
            val isOverdue = MedicineStatusHelper.isOverdue(medicine)
            val result = if (isOverdue == expectedOverdue) "‚úÖ" else "‚ùå"
            
            println("   $result $description:")
            println("     –í—Ä–µ–º—è: $time")
            println("     –û–∂–∏–¥–∞–µ—Ç—Å—è: ${if (expectedOverdue) "–ü–†–û–°–†–û–ß–ï–ù–û" else "–ù–ï –ü–†–û–°–†–û–ß–ï–ù–û"}")
            println("     –†–µ–∑—É–ª—å—Ç–∞—Ç: ${if (isOverdue) "–ü–†–û–°–†–û–ß–ï–ù–û" else "–ù–ï –ü–†–û–°–†–û–ß–ï–ù–û"}")
        }
        
        println("\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢: –õ–æ–≥–∏–∫–∞ –±—É—Ñ–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    }

    @Test
    fun testArchitecture_ServiceIntervals() {
        println("üèóÔ∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ô –¢–ï–°–¢: –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã —Å–µ—Ä–≤–∏—Å–∞")
        println("=".repeat(50))
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã —Å–µ—Ä–≤–∏—Å–∞
        val checkIntervalField = OverdueCheckService::class.java.getDeclaredField("CHECK_INTERVAL")
        checkIntervalField.isAccessible = true
        val checkInterval = checkIntervalField.get(null) as Long
        
        val editingIntervalField = OverdueCheckService::class.java.getDeclaredField("EDITING_CHECK_INTERVAL")
        editingIntervalField.isAccessible = true
        val editingInterval = editingIntervalField.get(null) as Long
        
        val minIntervalField = OverdueCheckService::class.java.getDeclaredField("MIN_CHECK_INTERVAL")
        minIntervalField.isAccessible = true
        val minInterval = minIntervalField.get(null) as Long
        
        println("‚è∞ –ù–ê–°–¢–†–û–ô–ö–ò –ò–ù–¢–ï–†–í–ê–õ–û–í:")
        println("   –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: ${checkInterval/1000} —Å–µ–∫—É–Ω–¥ (${checkInterval/60000} –º–∏–Ω—É—Ç)")
        println("   –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${editingInterval/1000} —Å–µ–∫—É–Ω–¥ (${editingInterval/60000} –º–∏–Ω—É—Ç)")
        println("   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π: ${minInterval/1000} —Å–µ–∫—É–Ω–¥ (${minInterval/60000} –º–∏–Ω—É—Ç)")
        
        println("\nüìà –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø:")
        println("   –ë—ã–ª–æ: –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥")
        println("   –°—Ç–∞–ª–æ: –∫–∞–∂–¥—ã–µ ${checkInterval/1000} —Å–µ–∫—É–Ω–¥")
        println("   –≠–∫–æ–Ω–æ–º–∏—è –±–∞—Ç–∞—Ä–µ–∏: ${(checkInterval - 60000) / 60000} –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏")
        
        println("\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢: –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –±–∞—Ç–∞—Ä–µ–∏")
    }

    @Test
    fun testSimpleArchitectureDemo() {
        println("\n" + "=".repeat(60))
        println("üèóÔ∏è –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–´ –§–û–ù–û–í–û–ì–û –ü–†–û–¶–ï–°–°–ê")
        println("=".repeat(60))
        
        // 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        val overdueMedicine = createTestMedicine(
            name = "–ê—Å–ø–∏—Ä–∏–Ω",
            time = LocalTime.now().minusHours(2),
            frequency = DosageFrequency.DAILY
        )
        
        val bufferMedicine = createTestMedicine(
            name = "–í–∏—Ç–∞–º–∏–Ω C",
            time = LocalTime.now().minusMinutes(10),
            frequency = DosageFrequency.DAILY
        )
        
        val takenMedicine = createTestMedicine(
            name = "–ü–∞—Ä–∞—Ü–µ—Ç–∞–º–æ–ª",
            time = LocalTime.now().minusHours(1),
            frequency = DosageFrequency.DAILY,
            takenToday = true
        )
        
        // 2. –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        dataManager.addMedicine(overdueMedicine)
        dataManager.addMedicine(bufferMedicine)
        dataManager.addMedicine(takenMedicine)
        
        println("üìù –°–û–ó–î–ê–ù–´ –¢–ï–°–¢–û–í–´–ï –õ–ï–ö–ê–†–°–¢–í–ê:")
        println("   - ${overdueMedicine.name}: ${overdueMedicine.time} (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ)")
        println("   - ${bufferMedicine.name}: ${bufferMedicine.time} (–≤ –±—É—Ñ–µ—Ä–µ)")
        println("   - ${takenMedicine.name}: ${takenMedicine.time} (–ø—Ä–∏–Ω—è—Ç–æ)")
        
        // 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã
        println("\nüîç –ê–ù–ê–õ–ò–ó –°–¢–ê–¢–£–°–û–í:")
        
        val allMedicines = dataManager.getActiveMedicines()
        println("   –í—Å–µ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤ –≤ –±–∞–∑–µ: ${allMedicines.size}")
        
        allMedicines.forEach { medicine ->
            val status = MedicineStatusHelper.getMedicineStatus(medicine)
            val isOverdue = MedicineStatusHelper.isOverdue(medicine)
            val shouldTakeToday = MedicineStatusHelper.shouldTakeToday(medicine)
            
            println("   ${medicine.name}:")
            println("     –°—Ç–∞—Ç—É—Å: $status")
            println("     –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: $isOverdue")
            println("     –ü–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é —Å–µ–≥–æ–¥–Ω—è: $shouldTakeToday")
        }
        
        // 4. –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        println("\nüîÑ –°–ò–ú–£–õ–Ø–¶–ò–Ø –§–û–ù–û–í–û–ì–û –ü–†–û–¶–ï–°–°–ê:")
        simulateOverdueCheck()
        
        // 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
        println("\nüèóÔ∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ï –û–°–û–ë–ï–ù–ù–û–°–¢–ò:")
        println("   ‚úÖ –ë—É—Ñ–µ—Ä –≤—Ä–µ–º–µ–Ω–∏: 15 –º–∏–Ω—É—Ç")
        println("   ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø—Ä–æ–≤–µ—Ä–∫–∏")
        println("   ‚úÖ –£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤—É–∫–æ–º")
        println("   ‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        println("   ‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö")
        
        println("\n" + "=".repeat(60))
        println("‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û")
        println("=".repeat(60))
    }

    @Test
    fun testRealTimeOverdueWaiting() {
        println("\n" + "=".repeat(60))
        println("‚è∞ –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ì–û –í–†–ï–ú–ï–ù–ò: –û–ñ–ò–î–ê–ù–ò–ï –ü–†–û–°–†–û–ß–ö–ò")
        println("=".repeat(60))
        
        // 1. –°–æ–∑–¥–∞–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Å–∫–æ—Ä–æ –ø—Ä–æ—Å—Ä–æ—á–∏—Ç—Å—è
        val currentTime = LocalTime.now()
        val medicineTime = currentTime.plusMinutes(1) // –ß–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É
        
        val medicine = createTestMedicine(
            name = "–¢–µ—Å—Ç–æ–≤–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ",
            time = medicineTime,
            frequency = DosageFrequency.DAILY
        )
        
        dataManager.addMedicine(medicine)
        
        println("üìù –°–û–ó–î–ê–ù–û –õ–ï–ö–ê–†–°–¢–í–û:")
        println("   –ù–∞–∑–≤–∞–Ω–∏–µ: ${medicine.name}")
        println("   –í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞: ${medicine.time}")
        println("   –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: $currentTime")
        println("   –ë—É—Ñ–µ—Ä –≤—Ä–µ–º–µ–Ω–∏: 15 –º–∏–Ω—É—Ç")
        
        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        println("\nüîç –ù–ê–ß–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–°:")
        var status = MedicineStatusHelper.getMedicineStatus(medicine)
        var isOverdue = MedicineStatusHelper.isOverdue(medicine)
        println("   –°—Ç–∞—Ç—É—Å: $status")
        println("   –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: $isOverdue")
        
        // 3. –ñ–¥–µ–º, –ø–æ–∫–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –Ω–µ —Å—Ç–∞–Ω–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–º
        println("\n‚è≥ –û–ñ–ò–î–ê–ù–ò–ï –ü–†–û–°–†–û–ß–ö–ò...")
        println("   –ñ–¥–µ–º 2 –º–∏–Ω—É—Ç—ã, —á—Ç–æ–±—ã –ª–µ–∫–∞—Ä—Å—Ç–≤–æ —Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–∏–ª–æ—Å—å...")
        
        try {
            // –ñ–¥–µ–º 2 –º–∏–Ω—É—Ç—ã (120 —Å–µ–∫—É–Ω–¥)
            for (i in 1..120) {
                if (i % 30 == 0) { // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    val elapsedMinutes = i / 60
                    val elapsedSeconds = i % 60
                    println("   –ü—Ä–æ—à–ª–æ: ${elapsedMinutes}–º ${elapsedSeconds}—Å")
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                    status = MedicineStatusHelper.getMedicineStatus(medicine)
                    isOverdue = MedicineStatusHelper.isOverdue(medicine)
                    println("   –°—Ç–∞—Ç—É—Å: $status, –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: $isOverdue")
                }
                Thread.sleep(1000) // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É
            }
        } catch (e: InterruptedException) {
            println("   –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ")
        }
        
        // 4. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        println("\n‚úÖ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:")
        status = MedicineStatusHelper.getMedicineStatus(medicine)
        isOverdue = MedicineStatusHelper.isOverdue(medicine)
        println("   –°—Ç–∞—Ç—É—Å: $status")
        println("   –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: $isOverdue")
        
        if (isOverdue) {
            println("   üéâ –õ–ï–ö–ê–†–°–¢–í–û –°–¢–ê–õ–û –ü–†–û–°–†–û–ß–ï–ù–ù–´–ú!")
        } else {
            println("   ‚ö†Ô∏è –õ–ï–ö–ê–†–°–¢–í–û –ï–©–ï –ù–ï –ü–†–û–°–†–û–ß–ï–ù–û")
        }
        
        // 5. –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        println("\nüîÑ –°–ò–ú–£–õ–Ø–¶–ò–Ø –§–û–ù–û–í–û–ì–û –ü–†–û–¶–ï–°–°–ê:")
        simulateOverdueCheck()
        
        println("\n" + "=".repeat(60))
        println("‚úÖ –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ì–û –í–†–ï–ú–ï–ù–ò –ó–ê–í–ï–†–®–ï–ù")
        println("=".repeat(60))
    }

    @Test
    fun testBufferTimeTransition() {
        println("\n" + "=".repeat(60))
        println("üïê –¢–ï–°–¢ –ü–ï–†–ï–•–û–î–ê –ß–ï–†–ï–ó –ë–£–§–ï–† –í–†–ï–ú–ï–ù–ò")
        println("=".repeat(60))
        
        // 1. –°–æ–∑–¥–∞–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –≤ –±—É—Ñ–µ—Ä–µ
        val currentTime = LocalTime.now()
        val medicineTime = currentTime.minusMinutes(10) // 10 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥ (–≤ –±—É—Ñ–µ—Ä–µ)
        
        val medicine = createTestMedicine(
            name = "–õ–µ–∫–∞—Ä—Å—Ç–≤–æ –≤ –±—É—Ñ–µ—Ä–µ",
            time = medicineTime,
            frequency = DosageFrequency.DAILY
        )
        
        dataManager.addMedicine(medicine)
        
        println("üìù –°–û–ó–î–ê–ù–û –õ–ï–ö–ê–†–°–¢–í–û –í –ë–£–§–ï–†–ï:")
        println("   –ù–∞–∑–≤–∞–Ω–∏–µ: ${medicine.name}")
        println("   –í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞: ${medicine.time}")
        println("   –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: $currentTime")
        println("   –†–∞–∑–Ω–∏—Ü–∞: 10 –º–∏–Ω—É—Ç (–≤ –±—É—Ñ–µ—Ä–µ)")
        
        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        println("\nüîç –ù–ê–ß–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–°:")
        var status = MedicineStatusHelper.getMedicineStatus(medicine)
        var isOverdue = MedicineStatusHelper.isOverdue(medicine)
        println("   –°—Ç–∞—Ç—É—Å: $status")
        println("   –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: $isOverdue")
        
        // 3. –ñ–¥–µ–º, –ø–æ–∫–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –Ω–µ –≤—ã–π–¥–µ—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞
        println("\n‚è≥ –û–ñ–ò–î–ê–ù–ò–ï –í–´–•–û–î–ê –ò–ó –ë–£–§–ï–†–ê...")
        println("   –ñ–¥–µ–º 10 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –≤—ã—à–ª–æ –∏–∑ –±—É—Ñ–µ—Ä–∞...")
        
        try {
            // –ñ–¥–µ–º 10 –º–∏–Ω—É—Ç (600 —Å–µ–∫—É–Ω–¥)
            for (i in 1..600) {
                if (i % 60 == 0) { // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    val elapsedMinutes = i / 60
                    println("   –ü—Ä–æ—à–ª–æ: ${elapsedMinutes} –º–∏–Ω—É—Ç")
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                    status = MedicineStatusHelper.getMedicineStatus(medicine)
                    isOverdue = MedicineStatusHelper.isOverdue(medicine)
                    println("   –°—Ç–∞—Ç—É—Å: $status, –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: $isOverdue")
                    
                    if (isOverdue) {
                        println("   üéØ –õ–ï–ö–ê–†–°–¢–í–û –í–´–®–õ–û –ò–ó –ë–£–§–ï–†–ê –ò –°–¢–ê–õ–û –ü–†–û–°–†–û–ß–ï–ù–ù–´–ú!")
                        break
                    }
                }
                Thread.sleep(1000) // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É
            }
        } catch (e: InterruptedException) {
            println("   –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ")
        }
        
        // 4. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        println("\n‚úÖ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:")
        status = MedicineStatusHelper.getMedicineStatus(medicine)
        isOverdue = MedicineStatusHelper.isOverdue(medicine)
        println("   –°—Ç–∞—Ç—É—Å: $status")
        println("   –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: $isOverdue")
        
        println("\n" + "=".repeat(60))
        println("‚úÖ –¢–ï–°–¢ –ü–ï–†–ï–•–û–î–ê –ß–ï–†–ï–ó –ë–£–§–ï–† –ó–ê–í–ï–†–®–ï–ù")
        println("=".repeat(60))
    }

    @Test
    fun testInteractiveRealTime() {
        System.out.println("\n" + "=".repeat(60))
        System.out.println("üéÆ INTERACTIVE REAL-TIME TEST")
        System.out.println("=".repeat(60))
        
        // 1. Create medicine that will become overdue soon
        val currentTime = LocalTime.now()
        val medicineTime = currentTime.plusMinutes(1) // In 1 minute
        
        val medicine = createTestMedicine(
            name = "Interactive Medicine",
            time = medicineTime,
            frequency = DosageFrequency.DAILY
        )
        
        dataManager.addMedicine(medicine)
        
        System.out.println("üìù CREATED MEDICINE:")
        System.out.println("   Name: ${medicine.name}")
        System.out.println("   Time: ${medicine.time}")
        System.out.println("   Current: $currentTime")
        System.out.println("   Buffer: 15 minutes")
        
        // 2. Check initial status
        System.out.println("\nüîç INITIAL STATUS:")
        var status = MedicineStatusHelper.getMedicineStatus(medicine)
        var isOverdue = MedicineStatusHelper.isOverdue(medicine)
        System.out.println("   Status: $status")
        System.out.println("   Overdue: $isOverdue")
        
        // 3. Wait until medicine becomes overdue
        System.out.println("\n‚è≥ WAITING FOR OVERDUE...")
        System.out.println("   Waiting 2 minutes for medicine to become overdue...")
        System.out.flush()
        
        try {
            // Wait 2 minutes (120 seconds)
            for (i in 1..120) {
                if (i % 10 == 0) { // Every 10 seconds show progress
                    val elapsedMinutes = i / 60
                    val elapsedSeconds = i % 60
                    System.out.println("   ‚è∞ Elapsed: ${elapsedMinutes}m ${elapsedSeconds}s")
                    
                    // Check status every 10 seconds
                    status = MedicineStatusHelper.getMedicineStatus(medicine)
                    isOverdue = MedicineStatusHelper.isOverdue(medicine)
                    System.out.println("   üìä Status: $status, Overdue: $isOverdue")
                    System.out.flush()
                    
                    if (isOverdue) {
                        System.out.println("   üéâ MEDICINE BECAME OVERDUE!")
                        System.out.flush()
                        break
                    }
                }
                Thread.sleep(1000) // Wait 1 second
            }
        } catch (e: InterruptedException) {
            System.err.println("   ‚ùå Waiting interrupted")
            System.err.flush()
        }
        
        // 4. Final check
        System.out.println("\n‚úÖ FINAL CHECK:")
        status = MedicineStatusHelper.getMedicineStatus(medicine)
        isOverdue = MedicineStatusHelper.isOverdue(medicine)
        System.out.println("   Status: $status")
        System.out.println("   Overdue: $isOverdue")
        
        if (isOverdue) {
            System.out.println("   üéâ MEDICINE BECAME OVERDUE!")
        } else {
            System.out.println("   ‚ö†Ô∏è MEDICINE NOT OVERDUE YET")
        }
        
        // 5. Simulate background process
        System.out.println("\nüîÑ BACKGROUND PROCESS SIMULATION:")
        simulateOverdueCheck()
        
        System.out.println("\n" + "=".repeat(60))
        System.out.println("‚úÖ INTERACTIVE TEST COMPLETED")
        System.out.println("=".repeat(60))
        System.out.flush()
    }

    @Test
    fun testQuickInteractiveDemo() {
        System.out.println("\n" + "=".repeat(60))
        System.out.println("‚ö° QUICK INTERACTIVE DEMO")
        System.out.println("=".repeat(60))
        
        // 1. Create medicine that is already overdue
        val currentTime = LocalTime.now()
        val medicineTime = currentTime.minusMinutes(30) // 30 minutes ago
        
        val medicine = createTestMedicine(
            name = "Overdue Medicine",
            time = medicineTime,
            frequency = DosageFrequency.DAILY
        )
        
        dataManager.addMedicine(medicine)
        
        System.out.println("üìù CREATED OVERDUE MEDICINE:")
        System.out.println("   Name: ${medicine.name}")
        System.out.println("   Time: ${medicine.time}")
        System.out.println("   Current: $currentTime")
        System.out.println("   Difference: 30 minutes (already overdue)")
        System.out.flush()
        
        // 2. Check status
        System.out.println("\nüîç STATUS CHECK:")
        var status = MedicineStatusHelper.getMedicineStatus(medicine)
        var isOverdue = MedicineStatusHelper.isOverdue(medicine)
        System.out.println("   Status: $status")
        System.out.println("   Overdue: $isOverdue")
        System.out.flush()
        
        // 3. Quick simulation (30 seconds)
        System.out.println("\n‚è≥ QUICK SIMULATION (30 seconds)...")
        System.out.flush()
        
        try {
            for (i in 1..30) {
                if (i % 5 == 0) { // Every 5 seconds
                    System.out.println("   ‚è∞ Second: $i")
                    System.out.println("   üìä Status: ${MedicineStatusHelper.getMedicineStatus(medicine)}")
                    System.out.println("   üìä Overdue: ${MedicineStatusHelper.isOverdue(medicine)}")
                    System.out.flush()
                }
                Thread.sleep(1000)
            }
        } catch (e: InterruptedException) {
            System.err.println("   ‚ùå Simulation interrupted")
            System.err.flush()
        }
        
        // 4. Final result
        System.out.println("\n‚úÖ RESULT:")
        System.out.println("   Medicine: ${medicine.name}")
        System.out.println("   Status: ${MedicineStatusHelper.getMedicineStatus(medicine)}")
        System.out.println("   Overdue: ${MedicineStatusHelper.isOverdue(medicine)}")
        System.out.println("   Medicine time: ${medicine.time}")
        System.out.println("   Current time: ${LocalTime.now()}")
        System.out.flush()
        
        System.out.println("\n" + "=".repeat(60))
        System.out.println("‚úÖ QUICK DEMO COMPLETED")
        System.out.println("=".repeat(60))
        System.out.flush()
    }

    private fun clearTestData() {
        try {
            val medicinesFile = context.getFileStreamPath("medicines.json")
            if (medicinesFile.exists()) {
                medicinesFile.delete()
                println("üóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
            }
        } catch (e: Exception) {
            println("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: ${e.message}")
        }
    }

    private fun simulateOverdueCheck() {
        println("üîÑ –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤...")
        
        val allMedicines = dataManager.getActiveMedicines()
        val today = LocalDate.now()
        
        var foundOverdue = false
        var overdueCount = 0
        
        for (medicine in allMedicines) {
            if (medicine.remainingQuantity > 0) {
                val status = MedicineStatusHelper.getMedicineStatus(medicine)
                
                if (status == MedicineStatus.OVERDUE) {
                    foundOverdue = true
                    overdueCount++
                    println("   üìã –ù–ê–ô–î–ï–ù–û –ü–†–û–°–†–û–ß–ï–ù–ù–û–ï: ${medicine.name}")
                }
            }
        }
        
        println("   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: –Ω–∞–π–¥–µ–Ω–æ $overdueCount –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤")
        
        if (foundOverdue) {
            println("   üîî –î–ï–ô–°–¢–í–ò–ï: –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤–∞—Ö")
            println("   üîä –î–ï–ô–°–¢–í–ò–ï: –û—Ç–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            println("   üì± –î–ï–ô–°–¢–í–ò–ï: –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ª–æ–≥–∞—Ö")
        } else {
            println("   ‚úÖ –î–ï–ô–°–¢–í–ò–ï: –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤ –Ω–µ—Ç")
            println("   üîä –î–ï–ô–°–¢–í–ò–ï: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            println("   üîï –î–ï–ô–°–¢–í–ò–ï: –û—Ç–º–µ–Ω–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤–∞—Ö")
        }
    }

    private fun createTestMedicine(
        name: String,
        time: LocalTime,
        frequency: DosageFrequency,
        takenToday: Boolean = false,
        startDate: Long = System.currentTimeMillis() - 86400000
    ): Medicine {
        return Medicine(
            id = Random().nextLong(),
            name = name,
            time = time,
            frequency = frequency,
            isActive = true,
            remainingQuantity = 10,
            dosage = "1 —Ç–∞–±–ª–µ—Ç–∫–∞",
            quantity = 30,
            takenToday = takenToday,
            shouldTakeToday = true,
            isOverdue = false,
            startDate = startDate,
            takenAt = if (takenToday) System.currentTimeMillis() else 0,
            customDays = emptyList()
        )
    }
} 