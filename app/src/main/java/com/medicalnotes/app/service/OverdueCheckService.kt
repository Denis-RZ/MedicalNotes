package com.medicalnotes.app.service

import android.app.*
import android.content.Context
import android.content.Intent
import android.media.AudioManager
import android.os.Build
import android.os.Handler
import android.os.IBinder
import android.os.Looper
import android.os.VibrationEffect
import android.os.Vibrator
import androidx.core.app.NotificationCompat
import com.medicalnotes.app.MainActivity
import com.medicalnotes.app.R
import com.medicalnotes.app.models.Medicine
import com.medicalnotes.app.utils.DataManager
import com.medicalnotes.app.utils.MedicineStatus
import com.medicalnotes.app.utils.MedicineStatusHelper
import com.medicalnotes.app.utils.NotificationManager
import java.time.LocalDate
import java.time.LocalTime
import java.util.*

class OverdueCheckService : Service() {
    
    companion object {
        const val CHANNEL_ID = "overdue_check_service"
        const val NOTIFICATION_ID = 2000
        private const val CHECK_INTERVAL = 10000L // 10 —Å–µ–∫—É–Ω–¥
        
        fun startService(context: Context) {
            val intent = Intent(context, OverdueCheckService::class.java)
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                context.startForegroundService(intent)
            } else {
                context.startService(intent)
            }
        }
        
        fun stopService(context: Context) {
            val intent = Intent(context, OverdueCheckService::class.java)
            context.stopService(intent)
        }
    }
    
    private lateinit var dataManager: DataManager
    private lateinit var notificationManager: NotificationManager
    private lateinit var audioManager: AudioManager
    private lateinit var vibrator: Vibrator
    private lateinit var handler: Handler
    private lateinit var checkRunnable: Runnable
    
    private var hasOverdueMedicines = false
    private var originalNotificationVolume = 0
    private var originalVibrationEnabled = true
    
    override fun onCreate() {
        super.onCreate()
        android.util.Log.d("OverdueCheckService", "–°–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤ —Å–æ–∑–¥–∞–Ω")
        
        dataManager = DataManager(this)
        notificationManager = NotificationManager(this)
        audioManager = getSystemService(Context.AUDIO_SERVICE) as AudioManager
        vibrator = getSystemService(Context.VIBRATOR_SERVICE) as Vibrator
        handler = Handler(Looper.getMainLooper())
        
        createNotificationChannel()
        startForeground()
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        originalNotificationVolume = audioManager.getStreamVolume(AudioManager.STREAM_NOTIFICATION)
        originalVibrationEnabled = vibrator.hasVibrator()
        
        android.util.Log.d("OverdueCheckService", "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: $originalNotificationVolume")
        android.util.Log.d("OverdueCheckService", "–í–∏–±—Ä–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞: $originalVibrationEnabled")
    }
    
    override fun onBind(intent: Intent?): IBinder? {
        return null
    }
    
    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        android.util.Log.d("OverdueCheckService", "–°–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤ –∑–∞–ø—É—â–µ–Ω")
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        startPeriodicCheck()
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º START_STICKY –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        return START_STICKY
    }
    
    override fun onDestroy() {
        super.onDestroy()
        android.util.Log.d("OverdueCheckService", "–°–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        stopPeriodicCheck()
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        restoreOriginalSettings()
    }
    
    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            try {
                val channel = android.app.NotificationChannel(
                    CHANNEL_ID,
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤",
                    android.app.NotificationManager.IMPORTANCE_LOW
                ).apply {
                    description = "–§–æ–Ω–æ–≤–∞—è —Å–ª—É–∂–±–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤"
                    setShowBadge(false)
                }
                
                val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as android.app.NotificationManager
                notificationManager.createNotificationChannel(channel)
                android.util.Log.d("OverdueCheckService", "–ö–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω")
                
            } catch (e: Exception) {
                android.util.Log.e("OverdueCheckService", "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", e)
            }
        }
    }
    
    private fun startForeground() {
        try {
            val notificationIntent = Intent(this, MainActivity::class.java)
            val pendingIntent = PendingIntent.getActivity(
                this,
                0,
                notificationIntent,
                PendingIntent.FLAG_IMMUTABLE
            )
            
            val notification = NotificationCompat.Builder(this, CHANNEL_ID)
                .setContentTitle("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤")
                .setContentText("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤ –∞–∫—Ç–∏–≤–µ–Ω")
                .setSmallIcon(R.drawable.ic_medicine)
                .setContentIntent(pendingIntent)
                .setPriority(NotificationCompat.PRIORITY_LOW)
                .setCategory(NotificationCompat.CATEGORY_SERVICE)
                .build()
            
            startForeground(NOTIFICATION_ID, notification)
            android.util.Log.d("OverdueCheckService", "Foreground —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω")
            
        } catch (e: Exception) {
            android.util.Log.e("OverdueCheckService", "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ foreground —Å–µ—Ä–≤–∏—Å–∞", e)
        }
    }
    
    private fun startPeriodicCheck() {
        checkRunnable = object : Runnable {
            override fun run() {
                checkOverdueMedicines()
                handler.postDelayed(this, CHECK_INTERVAL)
            }
        }
        
        handler.post(checkRunnable)
        android.util.Log.d("OverdueCheckService", "–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ ${CHECK_INTERVAL/1000} —Å–µ–∫—É–Ω–¥)")
    }
    
    private fun stopPeriodicCheck() {
        handler.removeCallbacks(checkRunnable)
        android.util.Log.d("OverdueCheckService", "–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    }
    
    private fun checkOverdueMedicines() {
        try {
            android.util.Log.d("OverdueCheckService", "=== –ü–†–û–í–ï–†–ö–ê –ü–†–û–°–†–û–ß–ï–ù–ù–´–• –õ–ï–ö–ê–†–°–¢–í ===")
            
            val allMedicines = dataManager.getActiveMedicines()
            val today = LocalDate.now()
            val currentTime = LocalTime.now()
            
            var foundOverdue = false
            var overdueCount = 0
            
            for (medicine in allMedicines) {
                if (medicine.isActive && medicine.remainingQuantity > 0) {
                    val status = MedicineStatusHelper.getMedicineStatus(medicine)
                    
                    if (status == MedicineStatus.OVERDUE) {
                        foundOverdue = true
                        overdueCount++
                        
                        android.util.Log.d("OverdueCheckService", "–ù–ê–ô–î–ï–ù–û –ü–†–û–°–†–û–ß–ï–ù–ù–û–ï –õ–ï–ö–ê–†–°–¢–í–û: ${medicine.name}")
                        android.util.Log.d("OverdueCheckService", "  - –í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞: ${medicine.time}")
                        android.util.Log.d("OverdueCheckService", "  - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: $currentTime")
                        android.util.Log.d("OverdueCheckService", "  - –û—Å—Ç–∞—Ç–æ–∫: ${medicine.remainingQuantity}")
                    }
                }
            }
            
            android.util.Log.d("OverdueCheckService", "–í—Å–µ–≥–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤: $overdueCount")
            
            // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if (foundOverdue != hasOverdueMedicines) {
                hasOverdueMedicines = foundOverdue
                
                if (foundOverdue) {
                    android.util.Log.d("OverdueCheckService", "üö® –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–°–†–û–ß–ï–ù–ù–´–ï –õ–ï–ö–ê–†–°–¢–í–ê - –û–¢–ö–õ–Æ–ß–ê–ï–ú –ó–í–£–ö –ò –í–ò–ë–†–ê–¶–ò–Æ")
                    disableSoundAndVibration()
                } else {
                    android.util.Log.d("OverdueCheckService", "‚úÖ –ü–†–û–°–†–û–ß–ï–ù–ù–´–• –õ–ï–ö–ê–†–°–¢–í –ù–ï–¢ - –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ó–í–£–ö –ò –í–ò–ë–†–ê–¶–ò–Æ")
                    restoreOriginalSettings()
                }
            }
            
        } catch (e: Exception) {
            android.util.Log.e("OverdueCheckService", "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤", e)
        }
    }
    
    private fun disableSoundAndVibration() {
        try {
            android.util.Log.d("OverdueCheckService", "=== –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï –ó–í–£–ö–ê –ò –í–ò–ë–†–ê–¶–ò–ò ===")
            
            // –û—Ç–∫–ª—é—á–∞–µ–º –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            audioManager.setStreamVolume(AudioManager.STREAM_NOTIFICATION, 0, 0)
            android.util.Log.d("OverdueCheckService", "‚úì –ó–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω")
            
            // –û—Ç–∫–ª—é—á–∞–µ–º –∑–≤—É–∫ –º–µ–¥–∏–∞
            audioManager.setStreamVolume(AudioManager.STREAM_MUSIC, 0, 0)
            android.util.Log.d("OverdueCheckService", "‚úì –ó–≤—É–∫ –º–µ–¥–∏–∞ –æ—Ç–∫–ª—é—á–µ–Ω")
            
            // –û—Ç–∫–ª—é—á–∞–µ–º –∑–≤—É–∫ —Å–∏—Å—Ç–µ–º—ã
            audioManager.setStreamVolume(AudioManager.STREAM_SYSTEM, 0, 0)
            android.util.Log.d("OverdueCheckService", "‚úì –ó–≤—É–∫ —Å–∏—Å—Ç–µ–º—ã –æ—Ç–∫–ª—é—á–µ–Ω")
            
            // –û—Ç–∫–ª—é—á–∞–µ–º –∑–≤—É–∫ –∑–≤–æ–Ω–∫–∞
            audioManager.setStreamVolume(AudioManager.STREAM_RING, 0, 0)
            android.util.Log.d("OverdueCheckService", "‚úì –ó–≤—É–∫ –∑–≤–æ–Ω–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω")
            
            // ‚úÖ –£–õ–£–ß–®–ï–ù–û: –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∏–±—Ä–∞—Ü–∏–∏
            if (vibrator.hasVibrator()) {
                vibrator.cancel()
                android.util.Log.d("OverdueCheckService", "‚úì –í–∏–±—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (–ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞)")
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
                android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({
                    try {
                        vibrator.cancel()
                        android.util.Log.d("OverdueCheckService", "‚úì –í–∏–±—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (–≤—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞)")
                    } catch (e: Exception) {
                        android.util.Log.e("OverdueCheckService", "–û—à–∏–±–∫–∞ –≤—Ç–æ—Ä–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–∏–±—Ä–∞—Ü–∏–∏", e)
                    }
                }, 100)
                
                android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({
                    try {
                        vibrator.cancel()
                        android.util.Log.d("OverdueCheckService", "‚úì –í–∏–±—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (—Ç—Ä–µ—Ç—å—è –ø–æ–ø—ã—Ç–∫–∞)")
                    } catch (e: Exception) {
                        android.util.Log.e("OverdueCheckService", "–û—à–∏–±–∫–∞ —Ç—Ä–µ—Ç—å–µ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–∏–±—Ä–∞—Ü–∏–∏", e)
                    }
                }, 500)
                
                android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({
                    try {
                        vibrator.cancel()
                        android.util.Log.d("OverdueCheckService", "‚úì –í–∏–±—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (—á–µ—Ç–≤–µ—Ä—Ç–∞—è –ø–æ–ø—ã—Ç–∫–∞)")
                    } catch (e: Exception) {
                        android.util.Log.e("OverdueCheckService", "–û—à–∏–±–∫–∞ —á–µ—Ç–≤–µ—Ä—Ç–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–∏–±—Ä–∞—Ü–∏–∏", e)
                    }
                }, 1000)
            }
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notificationManager.cancelAllNotifications()
            android.util.Log.d("OverdueCheckService", "‚úì –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã")
            
            // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ AudioManager
            try {
                val originalVolume = audioManager.getStreamVolume(AudioManager.STREAM_NOTIFICATION)
                
                // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∑–≤—É–∫
                audioManager.setStreamVolume(AudioManager.STREAM_NOTIFICATION, 0, 0)
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({
                    try {
                        audioManager.setStreamVolume(AudioManager.STREAM_NOTIFICATION, originalVolume, 0)
                        android.util.Log.d("OverdueCheckService", "‚úì –ì—Ä–æ–º–∫–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: $originalVolume")
                    } catch (e: Exception) {
                        android.util.Log.e("OverdueCheckService", "–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏", e)
                    }
                }, 2000)
                
                android.util.Log.d("OverdueCheckService", "‚úì –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ AudioManager –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            } catch (e: Exception) {
                android.util.Log.e("OverdueCheckService", "–û—à–∏–±–∫–∞ AudioManager", e)
            }
            
            android.util.Log.d("OverdueCheckService", "üö® –ó–í–£–ö –ò –í–ò–ë–†–ê–¶–ò–Ø –ü–û–õ–ù–û–°–¢–¨–Æ –û–¢–ö–õ–Æ–ß–ï–ù–´")
            
        } catch (e: Exception) {
            android.util.Log.e("OverdueCheckService", "–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–∞ –∏ –≤–∏–±—Ä–∞—Ü–∏–∏", e)
        }
    }
    
    private fun restoreOriginalSettings() {
        try {
            android.util.Log.d("OverdueCheckService", "=== –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–• –ù–ê–°–¢–†–û–ï–ö ===")
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            audioManager.setStreamVolume(AudioManager.STREAM_NOTIFICATION, originalNotificationVolume, 0)
            android.util.Log.d("OverdueCheckService", "‚úì –ó–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $originalNotificationVolume")
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–≤—É–∫ –º–µ–¥–∏–∞ (50% –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞)
            val maxMediaVolume = audioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC)
            audioManager.setStreamVolume(AudioManager.STREAM_MUSIC, maxMediaVolume / 2, 0)
            android.util.Log.d("OverdueCheckService", "‚úì –ó–≤—É–∫ –º–µ–¥–∏–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${maxMediaVolume / 2}")
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–≤—É–∫ —Å–∏—Å—Ç–µ–º—ã (50% –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞)
            val maxSystemVolume = audioManager.getStreamMaxVolume(AudioManager.STREAM_SYSTEM)
            audioManager.setStreamVolume(AudioManager.STREAM_SYSTEM, maxSystemVolume / 2, 0)
            android.util.Log.d("OverdueCheckService", "‚úì –ó–≤—É–∫ —Å–∏—Å—Ç–µ–º—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${maxSystemVolume / 2}")
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–≤—É–∫ –∑–≤–æ–Ω–∫–∞ (50% –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞)
            val maxRingVolume = audioManager.getStreamMaxVolume(AudioManager.STREAM_RING)
            audioManager.setStreamVolume(AudioManager.STREAM_RING, maxRingVolume / 2, 0)
            android.util.Log.d("OverdueCheckService", "‚úì –ó–≤—É–∫ –∑–≤–æ–Ω–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${maxRingVolume / 2}")
            
            android.util.Log.d("OverdueCheckService", "‚úÖ –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–´")
            
        } catch (e: Exception) {
            android.util.Log.e("OverdueCheckService", "–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫", e)
        }
    }

    private fun startVibration() {
        try {
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –≤–º–µ—Å—Ç–æ deprecated VIBRATOR_SERVICE
            val vibrator = if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.S) {
                val vibratorManager = getSystemService(Context.VIBRATOR_MANAGER_SERVICE) as android.os.VibratorManager
                vibratorManager.defaultVibrator
            } else {
                @Suppress("DEPRECATION")
                getSystemService(Context.VIBRATOR_SERVICE) as android.os.Vibrator
            }
            
            if (vibrator.hasVibrator()) {
                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {
                    val effect = android.os.VibrationEffect.createOneShot(1000, android.os.VibrationEffect.DEFAULT_AMPLITUDE)
                    vibrator.vibrate(effect)
                } else {
                    @Suppress("DEPRECATION")
                    vibrator.vibrate(1000)
                }
            }
        } catch (e: Exception) {
            android.util.Log.e("OverdueCheckService", "Error starting vibration", e)
        }
    }
} 