package com.medicalnotes.app.adapters

import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.recyclerview.widget.DiffUtil
import androidx.recyclerview.widget.ListAdapter
import androidx.recyclerview.widget.RecyclerView
import com.medicalnotes.app.databinding.ItemMedicineElderlyBinding
import com.medicalnotes.app.models.Medicine
import java.time.format.DateTimeFormatter

class ElderlyMedicineAdapter(
    private val onMedicineClick: (Medicine) -> Unit,
    private val onSkipClick: (Medicine) -> Unit
) : ListAdapter<Medicine, ElderlyMedicineAdapter.ElderlyMedicineViewHolder>(MedicineDiffCallback()) {

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ElderlyMedicineViewHolder {
        val binding = ItemMedicineElderlyBinding.inflate(
            LayoutInflater.from(parent.context),
            parent,
            false
        )
        return ElderlyMedicineViewHolder(binding)
    }

    override fun onBindViewHolder(holder: ElderlyMedicineViewHolder, position: Int) {
        holder.bind(getItem(position))
    }

    inner class ElderlyMedicineViewHolder(
        private val binding: ItemMedicineElderlyBinding
    ) : RecyclerView.ViewHolder(binding.root) {

        fun bind(medicine: Medicine) {
            // –ù–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
            binding.textMedicineName.text = medicine.name

            // –í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞
            val timeText = if (medicine.multipleDoses && medicine.doseTimes.isNotEmpty()) {
                val times = medicine.doseTimes.map { it.format(DateTimeFormatter.ofPattern("HH:mm")) }
                "‚è∞ ${times.joinToString(", ")}"
            } else {
                "‚è∞ ${medicine.time.format(DateTimeFormatter.ofPattern("HH:mm"))}"
            }
            binding.textMedicineTime.text = timeText

            // –î–æ–∑–∏—Ä–æ–≤–∫–∞ —Å —Å—Ö–µ–º–æ–π –ø—Ä–∏–µ–º–∞
            val dosageDescription = com.medicalnotes.app.utils.DosageCalculator.getDosageDescription(medicine)
            val groupInfo = if (medicine.groupName.isNotEmpty()) {
                " (${medicine.groupName}, ‚Ññ${medicine.groupOrder})"
            } else {
                ""
            }
            val fullDosageText = if (medicine.dosage.isNotEmpty()) {
                "$dosageDescription - ${medicine.dosage}$groupInfo"
            } else {
                dosageDescription + groupInfo
            }
            binding.textMedicineDosage.text = fullDosageText

            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–µ—Ç–æ–∫
            binding.textMedicineQuantity.text = "üì¶ –û—Å—Ç–∞–ª–æ—Å—å: ${medicine.remainingQuantity} ${medicine.medicineType.lowercase()}"

            // –ó–∞–º–µ—Ç–∫–∏ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å)
            if (medicine.notes.isNotEmpty()) {
                binding.textMedicineNotes.text = "üí° ${medicine.notes}"
                binding.textMedicineNotes.visibility = android.view.View.VISIBLE
            } else {
                binding.textMedicineNotes.visibility = android.view.View.GONE
            }

            // –°—Ç–∞—Ç—É—Å –ø—Ä–æ–ø—É—Å–∫–∞
            if (medicine.isMissed) {
                binding.textMissedStatus.visibility = android.view.View.VISIBLE
            } else {
                binding.textMissedStatus.visibility = android.view.View.GONE
            }

            // –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
            binding.buttonTakeMedicine.setOnClickListener {
                onMedicineClick(medicine)
            }

            // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ)
            if (!medicine.takenToday) {
                binding.buttonSkipMedicine.visibility = android.view.View.VISIBLE
                binding.buttonSkipMedicine.setOnClickListener {
                    onSkipClick(medicine)
                }
            } else {
                binding.buttonSkipMedicine.visibility = android.view.View.GONE
            }

            // –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            if (medicine.takenToday) {
                binding.buttonTakeMedicine.text = "‚úÖ –ü–†–ò–ù–Ø–¢–û"
                binding.buttonTakeMedicine.isEnabled = false
            } else {
                binding.buttonTakeMedicine.text = "‚úÖ –ü–†–ò–ù–Ø–¢–¨ –õ–ï–ö–ê–†–°–¢–í–û"
                binding.buttonTakeMedicine.isEnabled = true
            }
        }
    }

    private class MedicineDiffCallback : DiffUtil.ItemCallback<Medicine>() {
        override fun areItemsTheSame(oldItem: Medicine, newItem: Medicine): Boolean {
            return oldItem.id == newItem.id
        }

        override fun areContentsTheSame(oldItem: Medicine, newItem: Medicine): Boolean {
            return oldItem == newItem
        }
    }
} 