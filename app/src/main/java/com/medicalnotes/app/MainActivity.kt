package com.medicalnotes.app

import android.content.Context
import android.os.Bundle
import android.view.View
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.GravityCompat
import androidx.lifecycle.ViewModelProvider
import androidx.recyclerview.widget.LinearLayoutManager
import com.medicalnotes.app.adapters.MainMedicineAdapter
import com.medicalnotes.app.databinding.ActivityMainBinding
import com.medicalnotes.app.models.Medicine
import com.medicalnotes.app.repository.UserPreferencesRepository
import com.medicalnotes.app.utils.MedicineGroupingUtil
import com.medicalnotes.app.utils.MedicineStatus
import com.medicalnotes.app.utils.VersionUtils
import com.medicalnotes.app.viewmodels.MainViewModel
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import androidx.lifecycle.lifecycleScope
import java.io.File
import java.time.LocalDate
import java.time.LocalDateTime
import com.medicalnotes.app.utils.DosageCalculator
import com.medicalnotes.app.service.OverdueCheckService
import com.medicalnotes.app.utils.UnifiedNotificationManager

class MainActivity : BaseActivity() {

    private lateinit var binding: ActivityMainBinding
    private lateinit var viewModel: MainViewModel
    private lateinit var todayMedicineAdapter: MainMedicineAdapter
    private lateinit var userPreferencesRepository: UserPreferencesRepository
    private var overdueCheckTimer: android.os.Handler? = null
    
    //  –î–û–ë–ê–í–õ–ï–ù–û: –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤
    private val logs = mutableListOf<String>()
    
    //  –î–û–ë–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –¥–∞—Ç—ã
    private var selectedTestDate: LocalDate = LocalDate.now()
    
    //  –î–û–ë–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç EditMedicineActivity
    private val editMedicineLauncher = registerForActivityResult(
        androidx.activity.result.contract.ActivityResultContracts.StartActivityForResult()
    ) { result ->
        if (result.resultCode == RESULT_OK) {
            val medicineUpdated = result.data?.getBooleanExtra("medicine_updated", false) ?: false
            val medicineId = result.data?.getLongExtra("medicine_id", -1L) ?: -1L
            
            if (medicineUpdated && medicineId != -1L) {
                com.medicalnotes.app.utils.LogCollector.d("MainActivity", "–ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç EditMedicineActivity –¥–ª—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ ID: $medicineId")
                
                // –ê–ì–†–ï–°–°–ò–í–ù–û –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
                val notificationManager = com.medicalnotes.app.utils.NotificationManager(this@MainActivity)
                notificationManager.forceCancelAllNotificationsForMedicine(medicineId)
                
                //  –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                com.medicalnotes.app.utils.LogCollector.d("MainActivity", "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                viewModel.loadMedicinesForDate(LocalDate.now())
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
                checkOverdueMedicines()
                
                com.medicalnotes.app.utils.LogCollector.d("MainActivity", "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ EditMedicineActivity –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            }
        }
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ intent extras –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    private fun handleNotificationIntent() {
        try {
            val takeMedicine = intent.getBooleanExtra("take_medicine", false)
            val showOverdueMedicines = intent.getBooleanExtra("show_overdue_medicines", false)
            val alarmNotification = intent.getBooleanExtra("alarm_notification", false)
            
            if (takeMedicine) {
                val overdueMedicineIds = intent.getParcelableArrayListExtra("overdue_medicines", Long::class.java)
                if (!overdueMedicineIds.isNullOrEmpty()) {
                    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–≤—É–∫–∏ –∏ –≤–∏–±—Ä–∞—Ü–∏—é
                    OverdueCheckService.forceStopSoundAndVibration(this@MainActivity)
                    
                    // –ü–æ–º–µ—á–∞–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∫–∞–∫ –ø—Ä–∏–Ω—è—Ç—ã–µ
                    markOverdueMedicinesAsTaken(overdueMedicineIds)
                    
                    android.widget.Toast.makeText(this, "–õ–µ–∫–∞—Ä—Å—Ç–≤–∞ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–∏–Ω—è—Ç—ã–µ", android.widget.Toast.LENGTH_SHORT).show()
                }
            }
            
            if (showOverdueMedicines) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤
                android.widget.Toast.makeText(this, "–ü–æ–∫–∞–∑–∞–Ω—ã –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞", android.widget.Toast.LENGTH_SHORT).show()
            }
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç AlarmManager
            if (alarmNotification) {
                android.util.Log.d("MainActivity", "–ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç AlarmManager")
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
                checkOverdueMedicines()
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                android.widget.Toast.makeText(this, "üö® –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞!", android.widget.Toast.LENGTH_LONG).show()
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                OverdueCheckService.startService(this@MainActivity)
            }
        } catch (e: Exception) {
            com.medicalnotes.app.utils.LogCollector.e("MainActivity", "Error handling notification intent", e)
        }
    }
    
    // –ü–æ–º–µ—á–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∫–∞–∫ –ø—Ä–∏–Ω—è—Ç—ã–µ
    private fun markOverdueMedicinesAsTaken(medicineIds: ArrayList<Long>) {
        try {
            lifecycleScope.launch(Dispatchers.IO) {
                val dataManager = com.medicalnotes.app.utils.DataManager(this@MainActivity)
                val allMedicines = dataManager.loadMedicines()
                
                val updatedMedicines = allMedicines.map { medicine ->
                    if (medicineIds.contains(medicine.id)) {
                        medicine.copy(takenToday = true)
                    } else {
                        medicine
                    }
                }
                
                dataManager.saveMedicines(updatedMedicines)
                
                // –û–±–Ω–æ–≤–ª—è–µ–º UI –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                lifecycleScope.launch(Dispatchers.Main) {
                    loadTodayMedicines()
                    checkOverdueMedicines()
                }
            }
        } catch (e: Exception) {
            com.medicalnotes.app.utils.LogCollector.e("MainActivity", "Error marking medicines as taken", e)
        }
    }

    //  –î–û–ë–ê–í–õ–ï–ù–û: –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ CrashReporter
    private fun testCrashReporter() {
        try {
            android.widget.Toast.makeText(this, "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CrashReporter...", android.widget.Toast.LENGTH_SHORT).show()
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –æ—à–∏–±–∫—É
            val testException = RuntimeException("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ CrashReporter")
            testException.printStackTrace()
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å —Ç–µ—Å—Ç–æ–≤–æ–π –æ—à–∏–±–∫–æ–π
            com.medicalnotes.app.utils.CrashReporter.showSimpleErrorDialog(
                this, 
                getString(R.string.test_crash_reporter), 
                testException
            )
            
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CrashReporter", e)
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è binding –ø–µ—Ä–µ–¥ setContentView
        try {
            binding = ActivityMainBinding.inflate(layoutInflater)
            setContentView(binding.root)
            android.util.Log.d("MainActivity", "Binding —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ binding", e)
            
            // –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–µ
            showErrorDialog("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ binding", "–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n${e.message}\n\n–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:\n${e.stackTraceToString()}")
            
            // Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π setContentView
            setContentView(R.layout.activity_main)
            android.widget.Toast.makeText(this, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", android.widget.Toast.LENGTH_LONG).show()
            finish()
            return
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ü–ï–†–ï–î –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        try {
            initializeComponents()
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤", e)
            showErrorDialog("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤", "–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n${e.message}\n\n–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:\n${e.stackTraceToString()}")
            finish()
            return
        }
        
        // –î–û–ë–ê–í–õ–ï–ù–û: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ UI —Å–æ—Å—Ç–æ—è–Ω–∏—è
        try {
            diagnoseUIState()
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ UI", e)
            showErrorDialog("–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ UI", "–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n${e.message}")
        }
        
        // –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UI
        try {
            checkAndRequestPermissions()
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π", e)
            showErrorDialog("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π", "–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n${e.message}")
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∏–Ω—Ç–µ–Ω—Ç–æ–≤
        try {
            handleNotificationIntent()
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ç–µ–Ω—Ç–æ–≤", e)
            showErrorDialog("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ç–µ–Ω—Ç–æ–≤", "–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n${e.message}")
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        try {
            fixIncorrectTakenTodayStatus()
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤", e)
        }
    }

    private fun initializeComponents() {
        try {
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ binding
            if (!::binding.isInitialized) {
                android.util.Log.e("MainActivity", "Binding –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ initializeComponents")
                android.widget.Toast.makeText(this, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", android.widget.Toast.LENGTH_LONG).show()
                finish()
                return
            }
            
            android.util.Log.d("MainActivity", "Binding –ø—Ä–æ–≤–µ—Ä–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é")
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ViewModel –∏ Repository —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            try {
                viewModel = ViewModelProvider(this)[MainViewModel::class.java]
                userPreferencesRepository = UserPreferencesRepository(this)
                com.medicalnotes.app.utils.LogCollector.i("MainActivity", "ViewModel and Repository initialized")
            } catch (e: Exception) {
                com.medicalnotes.app.utils.LogCollector.e("MainActivity", "Error initializing ViewModel/Repository", e)
                showErrorDialog("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ViewModel/Repository", "–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n${e.message}\n\n–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:\n${e.stackTraceToString()}")
                finish()
                return
            }

            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UnifiedNotificationManager
            try {
                UnifiedNotificationManager.createNotificationChannels(this)
                com.medicalnotes.app.utils.LogCollector.i("MainActivity", "UnifiedNotificationManager initialized")
            } catch (e: Exception) {
                com.medicalnotes.app.utils.LogCollector.e("MainActivity", "Error initializing UnifiedNotificationManager", e)
                showErrorDialog("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", "–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n${e.message}")
            }

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            try {
                setupViews()
                setupNavigationDrawer()
                setupButtons()
                observeData()
                com.medicalnotes.app.utils.LogCollector.i("MainActivity", "UI setup completed")
            } catch (e: Exception) {
                com.medicalnotes.app.utils.LogCollector.e("MainActivity", "Error in UI setup", e)
                showErrorDialog("–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ UI", "–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n${e.message}\n\n–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:\n${e.stackTraceToString()}")
                finish()
                return
            }

            // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            try {
                android.util.Log.d("MainActivity", "üöÄ === –ù–ê–ß–ê–õ–û –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–• ===")
                android.util.Log.d("MainActivity", "viewModel –¥–æ—Å—Ç—É–ø–µ–Ω: ${viewModel != null}")
                android.util.Log.d("MainActivity", "viewModel.todayMedicines –¥–æ—Å—Ç—É–ø–µ–Ω: ${viewModel.todayMedicines != null}")
                
                android.util.Log.d("MainActivity", "–í—ã–∑—ã–≤–∞–µ–º viewModel.loadAllMedicines()")
                viewModel.loadAllMedicines()
                android.util.Log.d("MainActivity", "‚úÖ viewModel.loadAllMedicines() –∑–∞–≤–µ—Ä—à–µ–Ω")
                
                android.util.Log.d("MainActivity", "–í—ã–∑—ã–≤–∞–µ–º loadTodayMedicines()")
                viewModel.loadMedicinesForDate(LocalDate.now())
                android.util.Log.d("MainActivity", "‚úÖ viewModel.loadMedicinesForDate() –∑–∞–≤–µ—Ä—à–µ–Ω")
                
                com.medicalnotes.app.utils.LogCollector.i("MainActivity", "Data loading completed")
                android.util.Log.d("MainActivity", "=== –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ó–ê–í–ï–†–®–ï–ù–ê ===")
            } catch (e: Exception) {
                android.util.Log.e("MainActivity", "‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö", e)
                com.medicalnotes.app.utils.LogCollector.e("MainActivity", "Error loading data", e)
                showErrorDialog("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö", "–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n${e.message}")
            }
            
            //  –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è ANR
            try {
                // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å UI
                lifecycleScope.launch(Dispatchers.IO) {
                    try {
                        //  –î–û–ë–ê–í–õ–ï–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤
                        checkOverdueMedicines()
                        
                        //  –î–û–ë–ê–í–õ–ï–ù–û: –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤ —Ñ–æ–Ω–µ
                        startNotificationService()
                        
                        //  –î–û–ë–ê–í–õ–ï–ù–û: –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤
                        startOverdueCheckService()
                        
                        //  –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
                        checkAndRestoreNotifications()
                        
                        //  –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π —Ä–∞–±–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                        checkNotificationPermissions()
                        
                        //  –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ–∫–æ–Ω –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                        lifecycleScope.launch(Dispatchers.Main) {
                            checkOverlayPermissions()
                        }
                        
                        com.medicalnotes.app.utils.LogCollector.i("MainActivity", "Services started successfully in background")
                    } catch (e: Exception) {
                        com.medicalnotes.app.utils.LogCollector.e("MainActivity", "Error starting services in background", e)
                    }
                }
                
                //  –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ, –Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ–Ω–µ)
                startPeriodicOverdueCheck()
                
                com.medicalnotes.app.utils.LogCollector.i("MainActivity", "Services startup initiated")
            } catch (e: Exception) {
                com.medicalnotes.app.utils.LogCollector.e("MainActivity", "Error initiating services", e)
                android.widget.Toast.makeText(this, getString(R.string.error_starting_services), android.widget.Toast.LENGTH_LONG).show()
            }
            
        } catch (e: Exception) {
            com.medicalnotes.app.utils.LogCollector.e("MainActivity", "Critical error in onCreate", e)
            showErrorDialog("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏", "–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n${e.message}\n\n–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:\n${e.stackTraceToString()}")
            finish()
        }
    }

    private fun setupViews() {
        try {
            android.util.Log.d("MainActivity", "setupViews: –ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ UI")
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ toolbar —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            try {
                android.util.Log.d("MainActivity", "setupViews: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ toolbar")
                setSupportActionBar(binding.toolbar)
                binding.toolbar.setTitle(getString(R.string.app_name))
                binding.toolbar.subtitle = VersionUtils.getShortVersionInfo(this)
                
                // –î–û–ë–ê–í–õ–ï–ù–û: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ActionBarDrawerToggle –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å navigation drawer
                val toggle = androidx.appcompat.app.ActionBarDrawerToggle(
                    this, 
                    binding.drawerLayout, 
                    binding.toolbar, 
                    R.string.navigation_drawer_open, 
                    R.string.navigation_drawer_close
                )
                binding.drawerLayout.addDrawerListener(toggle)
                toggle.syncState()
                
                // –î–û–ë–ê–í–õ–ï–ù–û: –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                com.medicalnotes.app.utils.LogCollector.d("MainActivity", "setupViews: Setting toolbar title to: ${getString(R.string.app_name)}")
                com.medicalnotes.app.utils.LogCollector.d("MainActivity", "setupViews: Current toolbar title is: ${binding.toolbar.title}")
                
                // –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ toolbar
                binding.toolbar.invalidate()
                
                android.util.Log.d("MainActivity", "setupViews: Toolbar –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            } catch (e: Exception) {
                android.util.Log.e("MainActivity", "setupViews: –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ toolbar", e)
                showErrorDialog("–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ toolbar", "–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n${e.message}\n\n–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:\n${e.stackTraceToString()}")
                throw e
            }
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ RecyclerView —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            try {
                android.util.Log.d("MainActivity", "setupViews: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ RecyclerView")
                binding.recyclerViewTodayMedicines.layoutManager = androidx.recyclerview.widget.LinearLayoutManager(this)
                todayMedicineAdapter = MainMedicineAdapter(
                    onMedicineClick = { medicine ->
                        try {
                            val intent = android.content.Intent(this, EditMedicineActivity::class.java)
                            intent.putExtra("medicine_id", medicine.id)
                            startActivity(intent)
                        } catch (e: Exception) {
                            android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞", e)
                            showErrorDialog("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n${e.message}")
                        }
                    },
                    onTakeMedicineClick = { medicine ->
                        try {
                            android.util.Log.d("MainActivity", "=== –ù–ê–ñ–ê–¢–ò–ï –ö–ù–û–ü–ö–ò '–ü–†–ò–ù–Ø–¢–¨ –õ–ï–ö–ê–†–°–¢–í–û' ===")
                            android.util.Log.d("MainActivity", "–õ–µ–∫–∞—Ä—Å—Ç–≤–æ: ${medicine.name}")
                            android.util.Log.d("MainActivity", "ID: ${medicine.id}")
                            
                            // 1. –û—Ç–º–µ—á–∞–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –∫–∞–∫ –ø—Ä–∏–Ω—è—Ç–æ–µ
                            android.util.Log.d("MainActivity", "1. –û—Ç–º–µ—á–∞–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –∫–∞–∫ –ø—Ä–∏–Ω—è—Ç–æ–µ...")
                            val updatedMedicine = com.medicalnotes.app.utils.MedicineStatusHelper.markAsTaken(medicine)
                            viewModel.updateMedicine(updatedMedicine)
                            android.util.Log.d("MainActivity", "‚úì –õ–µ–∫–∞—Ä—Å—Ç–≤–æ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–∏–Ω—è—Ç–æ–µ")
                            
                            // 2. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–≤—É–∫–∏ –∏ –≤–∏–±—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ OverdueCheckService
                            android.util.Log.d("MainActivity", "2. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–≤—É–∫–∏ –∏ –≤–∏–±—Ä–∞—Ü–∏—é...")
                            com.medicalnotes.app.service.OverdueCheckService.forceStopSoundAndVibration(this)
                            android.util.Log.d("MainActivity", "‚úì –ó–≤—É–∫–∏ –∏ –≤–∏–±—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                            
                            // 3. –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ UnifiedNotificationManager
                            android.util.Log.d("MainActivity", "3. –û—Ç–º–µ–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
                            com.medicalnotes.app.utils.UnifiedNotificationManager.cancelAllNotifications(this)
                            android.util.Log.d("MainActivity", "‚úì –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã")
                            
                            // 4. –û—Ç–º–µ–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
                            com.medicalnotes.app.utils.UnifiedNotificationManager.cancelMedicineNotifications(this, medicine.id)
                            android.util.Log.d("MainActivity", "‚úì –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω—ã")
                            
                            // 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                            android.widget.Toast.makeText(
                                this, 
                                "–õ–µ–∫–∞—Ä—Å—Ç–≤–æ \"${medicine.name}\" –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–∏–Ω—è—Ç–æ–µ", 
                                android.widget.Toast.LENGTH_SHORT
                            ).show()
                            android.util.Log.d("MainActivity", "‚úì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–∫–∞–∑–∞–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
                            
                            // 6. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤
                            android.util.Log.d("MainActivity", "4. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤...")
                            viewModel.loadMedicinesForDate(LocalDate.now())
                            android.util.Log.d("MainActivity", "‚úì –°–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω")
                            
                            // 7. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –∏—Å—á–µ–∑–ª–æ –∏–∑ —Å–ø–∏—Å–∫–∞
                            viewModel.todayMedicines.observe(this) { medicines ->
                                val medicineStillInList = medicines.any { it.id == medicine.id }
                                if (medicineStillInList) {
                                    android.util.Log.w("MainActivity", "‚ö†Ô∏è –õ–µ–∫–∞—Ä—Å—Ç–≤–æ –≤—Å–µ –µ—â–µ –≤ —Å–ø–∏—Å–∫–µ, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º...")
                                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI
                                    todayMedicineAdapter?.notifyDataSetChanged()
                                } else {
                                    android.util.Log.d("MainActivity", "‚úì –õ–µ–∫–∞—Ä—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –∏—Å—á–µ–∑–ª–æ –∏–∑ —Å–ø–∏—Å–∫–∞")
                                }
                            }
                            
                            android.util.Log.d("MainActivity", "=== –û–ë–†–ê–ë–û–¢–ö–ê –ù–ê–ñ–ê–¢–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê ===")
                            
                        } catch (e: Exception) {
                            android.util.Log.e("MainActivity", "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∫–∞–∫ –ø—Ä–∏–Ω—è—Ç–æ–≥–æ", e)
                            showErrorDialog("–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞", "–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n${e.message}")
                        }
                    },
                    onAddBackTodayClick = { medicine ->
                        try {
                            android.util.Log.d("MainActivity", "=== –ù–ê–ñ–ê–¢–ò–ï –ö–ù–û–ü–ö–ò '–î–û–ë–ê–í–ò–¢–¨ –û–ë–†–ê–¢–ù–û –ù–ê –°–ï–ì–û–î–ù–Ø' ===")
                            android.util.Log.d("MainActivity", "–õ–µ–∫–∞—Ä—Å—Ç–≤–æ: ${medicine.name}")
                            android.util.Log.d("MainActivity", "ID: ${medicine.id}")
                            
                            // 1. –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ø—Ä–∏–Ω—è—Ç–æ —Å–µ–≥–æ–¥–Ω—è"
                            android.util.Log.d("MainActivity", "1. –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å '–ø—Ä–∏–Ω—è—Ç–æ —Å–µ–≥–æ–¥–Ω—è'...")
                            val updatedMedicine = medicine.copy(
                                takenToday = false,
                                lastTakenTime = 0L
                            )
                            viewModel.updateMedicine(updatedMedicine)
                            android.util.Log.d("MainActivity", "‚úì –°—Ç–∞—Ç—É—Å —Å–±—Ä–æ—à–µ–Ω")
                            
                            // 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                            android.widget.Toast.makeText(
                                this, 
                                "–õ–µ–∫–∞—Ä—Å—Ç–≤–æ \"${medicine.name}\" –¥–æ–±–∞–≤–ª–µ–Ω–æ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", 
                                android.widget.Toast.LENGTH_SHORT
                            ).show()
                            android.util.Log.d("MainActivity", "‚úì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–∫–∞–∑–∞–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
                            
                            // 3. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤
                            android.util.Log.d("MainActivity", "3. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤...")
                            viewModel.loadMedicinesForDate(LocalDate.now())
                            android.util.Log.d("MainActivity", "‚úì –°–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω")
                            
                            android.util.Log.d("MainActivity", "=== –û–ë–†–ê–ë–û–¢–ö–ê –ù–ê–ñ–ê–¢–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê ===")
                            
                        } catch (e: Exception) {
                            android.util.Log.e("MainActivity", "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", e)
                            showErrorDialog("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞", "–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n${e.message}")
                        }
                    }
                )
                binding.recyclerViewTodayMedicines.adapter = todayMedicineAdapter
                android.util.Log.d("MainActivity", "setupViews: RecyclerView –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            } catch (e: Exception) {
                android.util.Log.e("MainActivity", "setupViews: –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ RecyclerView", e)
                showErrorDialog("–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ RecyclerView", "–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n${e.message}")
                throw e
            }
            
            // –î–û–ë–ê–í–õ–ï–ù–û: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try {
                android.util.Log.d("MainActivity", "setupViews: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è")
                binding.buttonSelectDate.setOnClickListener {
                    showDatePickerDialog()
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
                updateSelectedDateDisplay()
                
                android.util.Log.d("MainActivity", "setupViews: –ö–Ω–æ–ø–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            } catch (e: Exception) {
                android.util.Log.e("MainActivity", "setupViews: –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è", e)
                showErrorDialog("–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è", "–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n${e.message}")
                throw e
            }
            
            android.util.Log.d("MainActivity", "setupViews: –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã UI –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "setupViews: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ UI", e)
            showErrorDialog("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ UI", "–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n${e.message}\n\n–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:\n${e.stackTraceToString()}")
            throw e
        }
    }

    private fun setupNavigationDrawer() {
        try {
            com.medicalnotes.app.utils.LogCollector.d("MainActivity", "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Navigation Drawer")
            
            // NavigationView –≤—Å–µ–≥–¥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ layout, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ NavigationView
            binding.navigationView.setNavigationItemSelectedListener { menuItem ->
                com.medicalnotes.app.utils.LogCollector.d("MainActivity", "–í—ã–±—Ä–∞–Ω –ø—É–Ω–∫—Ç –º–µ–Ω—é: ${menuItem.title}")
                when (menuItem.itemId) {
                    com.medicalnotes.app.R.id.nav_manage_medicines -> {
                        val intent = android.content.Intent(this, MedicineManagerActivity::class.java)
                        startActivity(intent)
                        binding.drawerLayout.closeDrawers()
                        true
                    }
                    com.medicalnotes.app.R.id.nav_manage_groups -> {
                        val intent = android.content.Intent(this, GroupManagementActivity::class.java)
                        startActivity(intent)
                        binding.drawerLayout.closeDrawers()
                        true
                    }
                    com.medicalnotes.app.R.id.nav_settings -> {
                        val intent = android.content.Intent(this, SettingsActivity::class.java)
                        startActivity(intent)
                        binding.drawerLayout.closeDrawers()
                        true
                    }
                    com.medicalnotes.app.R.id.nav_elderly_mode -> {
                        toggleElderlyMode()
                        binding.drawerLayout.closeDrawers()
                        true
                    }
                    com.medicalnotes.app.R.id.nav_logs -> {
                        toggleLogsVisibility()
                        binding.drawerLayout.closeDrawers()
                        true
                    }
                    com.medicalnotes.app.R.id.nav_export_data -> {
                        exportData()
                        binding.drawerLayout.closeDrawers()
                        true
                    }
                    com.medicalnotes.app.R.id.nav_test_groups -> {
                        testGroups()
                        binding.drawerLayout.closeDrawers()
                        true
                    }
                    else -> {
                        com.medicalnotes.app.utils.LogCollector.w("MainActivity", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é: ${menuItem.itemId}")
                        false
                    }
                }
            }
            
            com.medicalnotes.app.utils.LogCollector.d("MainActivity", "Navigation Drawer –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è drawer –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –≤–Ω–µ –µ–≥–æ –æ–±–ª–∞—Å—Ç–∏
            binding.drawerLayout.addDrawerListener(object : androidx.drawerlayout.widget.DrawerLayout.DrawerListener {
                override fun onDrawerSlide(drawerView: android.view.View, slideOffset: Float) {}
                override fun onDrawerOpened(drawerView: android.view.View) {
                    com.medicalnotes.app.utils.LogCollector.d("MainActivity", "Drawer –æ—Ç–∫—Ä—ã—Ç")
                }
                override fun onDrawerClosed(drawerView: android.view.View) {
                    com.medicalnotes.app.utils.LogCollector.d("MainActivity", "Drawer –∑–∞–∫—Ä—ã—Ç")
                }
                override fun onDrawerStateChanged(newState: Int) {
                    com.medicalnotes.app.utils.LogCollector.d("MainActivity", "–°–æ—Å—Ç–æ—è–Ω–∏–µ drawer –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: $newState")
                }
            })
        } catch (e: Exception) {
            com.medicalnotes.app.utils.LogCollector.e("MainActivity", "Error setting up navigation drawer", e)
        }
    }

    private fun setupButtons() {
        try {
            android.util.Log.d("MainActivity", "setupButtons: –ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ–∫")
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ FAB –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
            try {
                binding.fabAddMedicine.setOnClickListener {
                    try {
                        android.util.Log.d("MainActivity", "FAB –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –Ω–∞–∂–∞—Ç–∞")
                        val intent = android.content.Intent(this, AddMedicineActivity::class.java)
                        startActivity(intent)
                    } catch (e: Exception) {
                        android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ FAB –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", e)
                        showErrorDialog("–û—à–∏–±–∫–∞ FAB –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", "–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n${e.message}\n\n–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:\n${e.stackTraceToString()}")
                    }
                }
                android.util.Log.d("MainActivity", "setupButtons: FAB –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            } catch (e: Exception) {
                android.util.Log.e("MainActivity", "setupButtons: –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ FAB –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", e)
                showErrorDialog("–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ FAB –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", "–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n${e.message}")
            }
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
            try {
                binding.buttonClearLogs.setOnClickListener {
                    try {
                        android.util.Log.d("MainActivity", "–ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤ –Ω–∞–∂–∞—Ç–∞")
                        clearLogs()
                        android.widget.Toast.makeText(this, "–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã", android.widget.Toast.LENGTH_SHORT).show()
                    } catch (e: Exception) {
                        android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤", e)
                        showErrorDialog("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤", "–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n${e.message}")
                    }
                }
                android.util.Log.d("MainActivity", "setupButtons: –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            } catch (e: Exception) {
                android.util.Log.e("MainActivity", "setupButtons: –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤", e)
                showErrorDialog("–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤", "–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n${e.message}")
            }
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∞
            try {
                binding.buttonCopyLog.setOnClickListener {
                    try {
                        android.util.Log.d("MainActivity", "–ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∞ –Ω–∞–∂–∞—Ç–∞")
                        copyLogToClipboard()
                    } catch (e: Exception) {
                        android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∞", e)
                        showErrorDialog("–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∞", "–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n${e.message}")
                    }
                }
                android.util.Log.d("MainActivity", "setupButtons: –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            } catch (e: Exception) {
                android.util.Log.e("MainActivity", "setupButtons: –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∞", e)
                showErrorDialog("–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∞", "–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n${e.message}")
            }
            
            android.util.Log.d("MainActivity", "setupButtons: –í—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "setupButtons: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ–∫", e)
            showErrorDialog("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ–∫", "–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n${e.message}\n\n–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:\n${e.stackTraceToString()}")
        }
    }

    override fun onCreateOptionsMenu(menu: android.view.Menu): Boolean {
        // –ú–µ–Ω—é –Ω–µ –Ω—É–∂–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ toolbar
        return true
    }

    override fun onOptionsItemSelected(item: android.view.MenuItem): Boolean {
        return when (item.itemId) {
            R.id.action_check_permissions -> {
                // –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏
                checkAndRequestPermissions()
                true
            }
            R.id.action_settings -> {
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                val intent = android.content.Intent(this, SettingsActivity::class.java)
                startActivity(intent)
                true
            }
            else -> super.onOptionsItemSelected(item)
        }
    }

    private fun observeData() {
        try {
            android.util.Log.d("MainActivity", "üîç === –ù–ê–ß–ê–õ–û –ù–ê–°–¢–†–û–ô–ö–ò –ù–ê–ë–õ–Æ–î–ê–¢–ï–õ–ï–ô ===")
            android.util.Log.d("MainActivity", "viewModel –¥–æ—Å—Ç—É–ø–µ–Ω: ${viewModel != null}")
            android.util.Log.d("MainActivity", "viewModel.todayMedicines –¥–æ—Å—Ç—É–ø–µ–Ω: ${viewModel.todayMedicines != null}")
            
            // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ —Å–ø–∏—Å–∫–µ –ª–µ–∫–∞—Ä—Å—Ç–≤
            viewModel.todayMedicines.observe(this) { medicines ->
                try {
                    android.util.Log.d("MainActivity", "üìã === –ü–û–õ–£–ß–ï–ù–´ –î–ê–ù–ù–´–ï –í –ù–ê–ë–õ–Æ–î–ê–¢–ï–õ–ï ===")
                    android.util.Log.d("MainActivity", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ–∫–∞—Ä—Å—Ç–≤: ${medicines.size}")
                    android.util.Log.d("MainActivity", "üìã MainActivity: –ü–æ–ª—É—á–µ–Ω–æ ${medicines.size} –ª–µ–∫–∞—Ä—Å—Ç–≤ –≤ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ")
                    addLog("üìã –ü–æ–ª—É—á–µ–Ω–æ ${medicines.size} –ª–µ–∫–∞—Ä—Å—Ç–≤ –≤ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ")
                    
                    if (medicines.isEmpty()) {
                        android.util.Log.d("MainActivity", "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
                        binding.progressBarTodayMedicines.visibility = android.view.View.GONE
                        binding.recyclerViewTodayMedicines.visibility = android.view.View.GONE
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        showEmptyState()
                    } else {
                        android.util.Log.d("MainActivity", "–°–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–∞")
                        binding.progressBarTodayMedicines.visibility = android.view.View.GONE
                        binding.recyclerViewTodayMedicines.visibility = android.view.View.VISIBLE
                        // –°–∫—Ä—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        showContentState()
                        
                        todayMedicineAdapter.submitList(medicines)
                        android.util.Log.d("MainActivity", "‚úÖ –°–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –∞–¥–∞–ø—Ç–µ—Ä–µ")
                    }
                    
                    android.util.Log.d("MainActivity", "observeData: UI –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                } catch (e: Exception) {
                    android.util.Log.e("MainActivity", "‚ùå observeData: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI", e)
                    showErrorDialog("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI", "–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n${e.message}")
                }
            }
            
            android.util.Log.d("MainActivity", "‚úÖ –ù–∞–±–ª—é–¥–∞—Ç–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            android.util.Log.d("MainActivity", "=== –ù–ê–°–¢–†–û–ô–ö–ê –ù–ê–ë–õ–Æ–î–ê–¢–ï–õ–ï–ô –ó–ê–í–ï–†–®–ï–ù–ê ===")
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "‚ùå observeData: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π", e)
            showErrorDialog("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π", "–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n${e.message}\n\n–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:\n${e.stackTraceToString()}")
            throw e
        }
    }

    override fun onResume() {
        super.onResume()
        
        // –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É–∂–±—É –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        try {
            android.util.Log.d("MainActivity", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª—É–∂–±—ã –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
            com.medicalnotes.app.utils.ServiceStatusChecker.checkAndRestoreService(this@MainActivity)
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª—É–∂–±—ã", e)
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤
        try {
            viewModel.loadAllMedicines()
            viewModel.loadMedicinesForDate(LocalDate.now())
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", e)
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
        checkOverdueMedicines()
    }
    


    private fun takeMedicine(medicine: Medicine) {
        com.medicalnotes.app.utils.LogCollector.d("MainActivity", "=== –ü–†–ò–ï–ú –õ–ï–ö–ê–†–°–¢–í–ê ===")
        com.medicalnotes.app.utils.LogCollector.d("MainActivity", "–õ–µ–∫–∞—Ä—Å—Ç–≤–æ: ${medicine.name} (ID: ${medicine.id})")
        
        //  –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
        addLog("=== –ù–ê–ñ–ê–¢–ò–ï –ö–ù–û–ü–ö–ò '–ü–†–ò–ù–Ø–õ –õ–ï–ö–ê–†–°–¢–í–ê' ===")
        addLog("–õ–µ–∫–∞—Ä—Å—Ç–≤–æ: ${medicine.name} (ID: ${medicine.id})")
        addLog("–í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞: ${medicine.time}")
        addLog("–ü—Ä–∏–Ω—è—Ç–æ —Å–µ–≥–æ–¥–Ω—è: ${medicine.takenToday}")
        addLog("–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${LocalDateTime.now()}")
        addLog("–°—Ç–∞—Ç—É—Å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞: ${com.medicalnotes.app.utils.MedicineStatusHelper.getMedicineStatus(medicine)}")
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–≤—É–∫–æ–≤, –≤–∏–±—Ä–∞—Ü–∏–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        addLog(" –ù–ê–ß–ò–ù–ê–ï–ú –ü–û–õ–ù–£–Æ –û–°–¢–ê–ù–û–í–ö–£ –ó–í–£–ö–ê, –í–ò–ë–†–ê–¶–ò–ò –ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô")
        try {
            com.medicalnotes.app.utils.LogCollector.d(" –ö–ù–û–ü–ö–ê_–ù–ê–ñ–ê–¢–ê", "–ö–Ω–æ–ø–∫–∞ '–ø—Ä–∏–Ω—è–ª –ª–µ–∫–∞—Ä—Å—Ç–≤–æ' –Ω–∞–∂–∞—Ç–∞ –¥–ª—è: ${medicine.name} (ID: ${medicine.id})")
            addLog(" –ö–ù–û–ü–ö–ê_–ù–ê–ñ–ê–¢–ê: –ö–Ω–æ–ø–∫–∞ '–ø—Ä–∏–Ω—è–ª –ª–µ–∫–∞—Ä—Å—Ç–≤–æ' –Ω–∞–∂–∞—Ç–∞ –¥–ª—è: ${medicine.name}")
            
            // 1. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —á–µ—Ä–µ–∑ OverdueCheckService
            com.medicalnotes.app.utils.LogCollector.d(" –ö–ù–û–ü–ö–ê_–î–ï–ô–°–¢–í–ò–ï", "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–≤—É–∫–∏ –∏ –≤–∏–±—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ OverdueCheckService")
            addLog(" 1. –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú —á–µ—Ä–µ–∑ OverdueCheckService")
            OverdueCheckService.forceStopSoundAndVibration(this@MainActivity)
            
            // 2. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —á–µ—Ä–µ–∑ UnifiedNotificationManager
            addLog(" 2. –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú —á–µ—Ä–µ–∑ UnifiedNotificationManager")
            UnifiedNotificationManager.cancelAllNotifications(this@MainActivity)
            
            // 3. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–±—Ä–∞—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–π —Å–µ—Ä–≤–∏—Å
            addLog(" 3. –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –≤–∏–±—Ä–∞—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é")
            val vibrator = if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.S) {
                getSystemService(android.os.VibratorManager::class.java)?.defaultVibrator
            } else {
                @Suppress("DEPRECATION")
                getSystemService(Context.VIBRATOR_SERVICE) as? android.os.Vibrator
            }
            vibrator?.cancel()
            
            // 4. –û—Ç–º–µ–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–π NotificationManager
            addLog(" 4. –û–¢–ú–ï–ù–Ø–ï–ú —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–π NotificationManager")
            val systemNotificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as? android.app.NotificationManager
            systemNotificationManager?.cancelAll()
            
            // 5. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ NotificationManager (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            addLog(" 5. –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—ã–π NotificationManager")
            val notificationManager = com.medicalnotes.app.utils.NotificationManager(this@MainActivity)
            notificationManager.stopVibration()
            notificationManager.cancelOverdueNotification(medicine.id)
            notificationManager.cancelMedicineNotification(medicine.id)
            notificationManager.forceStopAllNotifications()
            
            // 6. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            addLog(" 6. –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É")
            stopPeriodicOverdueCheck()
            
            // 7. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–≤—É–∫ —á–µ—Ä–µ–∑ –∞—É–¥–∏–æ –º–µ–Ω–µ–¥–∂–µ—Ä
            addLog(" 7. –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –∑–≤—É–∫ —á–µ—Ä–µ–∑ AudioManager")
            val audioManager = getSystemService(Context.AUDIO_SERVICE) as? android.media.AudioManager
            audioManager?.let { am ->
                // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ 2 —Å–µ–∫—É–Ω–¥—ã
                val currentVolume = am.getStreamVolume(android.media.AudioManager.STREAM_NOTIFICATION)
                am.setStreamVolume(android.media.AudioManager.STREAM_NOTIFICATION, 0, 0)
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({
                    am.setStreamVolume(android.media.AudioManager.STREAM_NOTIFICATION, currentVolume, 0)
                }, 2000)
            }
            
            com.medicalnotes.app.utils.LogCollector.d(" –ö–ù–û–ü–ö–ê_–ó–ê–í–ï–†–®–ï–ù–ê", "–í–°–ï –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –¥–ª—è: ${medicine.name}")
            addLog(" ‚úÖ –í–°–ï –î–ï–ô–°–¢–í–ò–Ø –ü–û –û–°–¢–ê–ù–û–í–ö–ï –ó–ê–í–ï–†–®–ï–ù–´ –¥–ª—è: ${medicine.name}")
        } catch (e: Exception) {
            com.medicalnotes.app.utils.LogCollector.e(" –ö–ù–û–ü–ö–ê_–û–®–ò–ë–ö–ê", "–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è: ${medicine.name}", e)
            addLog(" ‚ùå –û–®–ò–ë–ö–ê –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è: ${medicine.name} - ${e.message}")
        }
        
        lifecycleScope.launch(Dispatchers.IO) {
            try {
                //  –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–µ—Ç–æ–∫ –Ω–∞ 1
                val newRemainingQuantity = (medicine.remainingQuantity - 1).coerceAtLeast(0)
                
                com.medicalnotes.app.utils.LogCollector.d("MainActivity", "=== –£–ú–ï–ù–¨–®–ï–ù–ò–ï –ö–û–õ–ò–ß–ï–°–¢–í–ê ===")
                com.medicalnotes.app.utils.LogCollector.d("MainActivity", "–õ–µ–∫–∞—Ä—Å—Ç–≤–æ: ${medicine.name}")
                com.medicalnotes.app.utils.LogCollector.d("MainActivity", "–°—Ç–∞—Ä–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${medicine.remainingQuantity}")
                com.medicalnotes.app.utils.LogCollector.d("MainActivity", "–ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: $newRemainingQuantity")
                addLog("=== –£–ú–ï–ù–¨–®–ï–ù–ò–ï –ö–û–õ–ò–ß–ï–°–¢–í–ê ===")
                addLog("–õ–µ–∫–∞—Ä—Å—Ç–≤–æ: ${medicine.name}")
                addLog("–°—Ç–∞—Ä–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${medicine.remainingQuantity}")
                addLog("–ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: $newRemainingQuantity")
                
                val updatedMedicine = medicine.copy(
                    takenToday = true,
                    isMissed = false,
                    lastTakenTime = System.currentTimeMillis(),
                    remainingQuantity = newRemainingQuantity //  –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                )
                
                com.medicalnotes.app.utils.LogCollector.d("MainActivity", "–û–±–Ω–æ–≤–ª—è–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–æ: takenToday=true, isMissed=false")
                addLog("–û–ë–ù–û–í–õ–Ø–ï–ú –ª–µ–∫–∞—Ä—Å—Ç–≤–æ: takenToday=true, isMissed=false")
                viewModel.updateMedicine(updatedMedicine)
                
                //  –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏—Ö—Å—è —Ç–∞–±–ª–µ—Ç–∫–∞—Ö
                if (newRemainingQuantity <= 5 && newRemainingQuantity > 0) {
                    com.medicalnotes.app.utils.LogCollector.d("MainActivity", getString(com.medicalnotes.app.R.string.warning_low_supply, medicine.name))
                    addLog(getString(com.medicalnotes.app.R.string.warning_low_supply, medicine.name) + " (–æ—Å—Ç–∞–ª–æ—Å—å: $newRemainingQuantity)")
                    
                    lifecycleScope.launch(Dispatchers.Main) {
                        android.widget.Toast.makeText(
                            this@MainActivity,
                            " –ó–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è ${medicine.medicineType.lowercase()} ${medicine.name} (–æ—Å—Ç–∞–ª–æ—Å—å: $newRemainingQuantity)",
                            android.widget.Toast.LENGTH_LONG
                        ).show()
                    }
                } else if (newRemainingQuantity == 0) {
                    com.medicalnotes.app.utils.LogCollector.d("MainActivity", getString(com.medicalnotes.app.R.string.critical_no_supply, medicine.name))
                    addLog(getString(com.medicalnotes.app.R.string.critical_no_supply, medicine.name))
                    
                    lifecycleScope.launch(Dispatchers.Main) {
                        android.widget.Toast.makeText(
                            this@MainActivity,
                            " ${medicine.medicineType.lowercase().replaceFirstChar { it.uppercase() }} ${medicine.name} –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –ù—É–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø–∞—Å!",
                            android.widget.Toast.LENGTH_LONG
                        ).show()
                    }
                }
                
                // –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º, –µ—Å–ª–∏ –Ω–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–π
                com.medicalnotes.app.utils.LogCollector.d("MainActivity", getString(com.medicalnotes.app.R.string.medicine_successfully_updated))
                addLog(getString(com.medicalnotes.app.R.string.medicine_successfully_updated))
                
                lifecycleScope.launch(Dispatchers.Main) {
                    //  –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                    addLog("–ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
                    
                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º UI –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
                    todayMedicineAdapter.submitList(emptyList())
                    addLog("UI –æ—á–∏—â–µ–Ω –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º")
                    
                    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                    kotlinx.coroutines.delay(100)
                    
                    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
                    viewModel.loadAllMedicines()
                    
                    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                    loadTodayMedicines()
                    
                    addLog("–°–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω")
                    
                    com.medicalnotes.app.utils.LogCollector.d("MainActivity", getString(com.medicalnotes.app.R.string.medicine_list_updated))
                    addLog(getString(com.medicalnotes.app.R.string.medicine_list_updated))
                    
                    //  –î–û–ë–ê–í–õ–ï–ù–û: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    addLog(getString(com.medicalnotes.app.R.string.update_completed))
                    addLog(getString(com.medicalnotes.app.R.string.medicine_info, medicine.name, medicine.id))
                    addLog(getString(com.medicalnotes.app.R.string.status_taken_today))
                    addLog(getString(com.medicalnotes.app.R.string.update_time, LocalDateTime.now().toString()))
                    
                    //  –î–û–ë–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
                    com.medicalnotes.app.utils.LogCollector.d(" –ö–ù–û–ü–ö–ê_–ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ê–Ø", getString(com.medicalnotes.app.R.string.restarting_periodic_check))
                    addLog(getString(com.medicalnotes.app.R.string.restarting_periodic_check))
                    android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({
                        startPeriodicOverdueCheck()
                        com.medicalnotes.app.utils.LogCollector.d(" –ö–ù–û–ü–ö–ê_–ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ê–Ø", getString(com.medicalnotes.app.R.string.periodic_check_restarted))
                        addLog(getString(com.medicalnotes.app.R.string.periodic_check_restarted))
                    }, 10000) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ 10 —Å–µ–∫—É–Ω–¥
                }
            } catch (e: Exception) {
                com.medicalnotes.app.utils.LogCollector.e("MainActivity", getString(com.medicalnotes.app.R.string.error_updating_medicine, e.message ?: ""), e)
                addLog(getString(com.medicalnotes.app.R.string.error_updating_medicine, e.message ?: ""))
                
                lifecycleScope.launch(Dispatchers.Main) {
                    //  –ò–ó–ú–ï–ù–ï–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Toast —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ, –Ω–æ –±–µ–∑ –∑–≤—É–∫–∞
                    android.widget.Toast.makeText(
                        this@MainActivity,
                        getString(com.medicalnotes.app.R.string.error_updating_medicine, e.message ?: ""),
                        android.widget.Toast.LENGTH_LONG
                    ).show()
                }
            }
        }
    }

    private fun editMedicine(medicine: Medicine) {
        val intent = android.content.Intent(this, EditMedicineActivity::class.java).apply {
            putExtra("medicine_id", medicine.id)
        }
        editMedicineLauncher.launch(intent)
    }

    private fun deleteMedicine(medicine: Medicine) {
        addLog("=== –ù–ê–ß–ê–õ–û –£–î–ê–õ–ï–ù–ò–Ø –õ–ï–ö–ê–†–°–¢–í–ê ===")
        addLog("–õ–µ–∫–∞—Ä—Å—Ç–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${medicine.name} (ID: ${medicine.id})")
        
        android.app.AlertDialog.Builder(this)
            .setTitle("–£–¥–∞–ª–µ–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞")
            .setMessage("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ '${medicine.name}'?")
            .setPositiveButton("–£–¥–∞–ª–∏—Ç—å") { _, _ ->
                addLog("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ")
                lifecycleScope.launch(Dispatchers.IO) {
                    try {
                        addLog("–í—ã–∑—ã–≤–∞–µ–º viewModel.deleteMedicine")
                        viewModel.deleteMedicine(medicine.id)
                        addLog("viewModel.deleteMedicine –∑–∞–≤–µ—Ä—à–µ–Ω")
                        
                        lifecycleScope.launch(Dispatchers.Main) {
                            addLog("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏")
                            android.widget.Toast.makeText(
                                this@MainActivity,
                                "–õ–µ–∫–∞—Ä—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–æ",
                                android.widget.Toast.LENGTH_SHORT
                            ).show()
                            
                            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
                            addLog("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤")
                            loadTodayMedicines()
                        }
                    } catch (e: Exception) {
                        addLog("–û–®–ò–ë–ö–ê –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: ${e.message}")
                        lifecycleScope.launch(Dispatchers.Main) {
                            android.widget.Toast.makeText(
                                this@MainActivity,
                                "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${e.message}",
                                android.widget.Toast.LENGTH_SHORT
                            ).show()
                        }
                    }
                }
            }
            .setNegativeButton("–û—Ç–º–µ–Ω–∞", null)
            .show()
    }

    fun addLog(message: String) {
        try {
            //  –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Activity –Ω–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞ –∏ binding —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (isDestroyed || isFinishing || !::binding.isInitialized) {
                return
            }
            
            val timestamp = LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("HH:mm:ss"))
            val logMessage = "[$timestamp] $message"
            
            //  –î–û–ë–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ª–æ–≥–æ–≤
            logs.add(logMessage)
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–ø–∏—Å–∫–∞ –ª–æ–≥–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–ø–∏—Å–µ–π)
            if (logs.size > 1000) {
                logs.removeAt(0)
            }
            
            //  –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            runOnUiThread {
                try {
                    if (!isDestroyed && !isFinishing && ::binding.isInitialized) {
                        binding.textViewLogs.append("$logMessage\n")
                        
                        //  –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å post
                        binding.textViewLogs.post {
                            try {
                                if (!isDestroyed && binding.textViewLogs.layout != null) {
                                    val layout = binding.textViewLogs.layout
                                    val lineCount = binding.textViewLogs.lineCount
                                    if (lineCount > 0) {
                                        val scrollAmount = layout.getLineTop(lineCount) - binding.textViewLogs.height
                                        if (scrollAmount > 0) {
                                            binding.textViewLogs.scrollTo(0, scrollAmount)
                                        }
                                    }
                                }
                            } catch (e: Exception) {
                                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ - –æ–Ω–∏ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã
                            }
                        }
                    }
                } catch (e: Exception) {
                    com.medicalnotes.app.utils.LogCollector.e("MainActivity", "Error updating logs UI", e)
                }
            }
        } catch (e: Exception) {
            com.medicalnotes.app.utils.LogCollector.e("MainActivity", "Error adding log", e)
        }
    }

    private fun clearLogs() {
        try {
            //  –î–û–ë–ê–í–õ–ï–ù–û: –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–æ–≥–æ–≤
            logs.clear()
            binding.textViewLogs.text = ""
            addLog("=== –õ–û–ì–ò –û–ß–ò–©–ï–ù–´ ===")
        } catch (e: Exception) {
            com.medicalnotes.app.utils.LogCollector.e("MainActivity", "Error clearing logs", e)
        }
    }

    private fun loadTodayMedicines() {
        addLog("=== –í–´–ó–û–í loadTodayMedicines() ===")
        addLog("üìã MainActivity: viewModel –¥–æ—Å—Ç—É–ø–µ–Ω: ${viewModel != null}")
        addLog("üìã MainActivity: viewModel.todayMedicines –¥–æ—Å—Ç—É–ø–µ–Ω: ${viewModel.todayMedicines != null}")
        showLoadingState()
        addLog("–í—ã–∑—ã–≤–∞–µ–º viewModel.loadMedicinesForDate(LocalDate.now())")
        android.util.Log.d("MainActivity", "üöÄ MainActivity: –í—ã–∑—ã–≤–∞–µ–º viewModel.loadMedicinesForDate(LocalDate.now())")
        try {
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
            viewModel.loadMedicinesForDate(LocalDate.now())
            addLog("viewModel.loadMedicinesForDate() –≤—ã–∑–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            android.util.Log.d("MainActivity", "‚úÖ MainActivity: viewModel.loadMedicinesForDate() –≤—ã–∑–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        } catch (e: Exception) {
            addLog("‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–∑–æ–≤–µ viewModel.loadMedicinesForDate(): ${e.message}")
            android.util.Log.e("MainActivity", "‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–∑–æ–≤–µ viewModel.loadMedicinesForDate()", e)
        }
    }

    private fun showLoadingState() {
        binding.progressBarTodayMedicines.visibility = View.VISIBLE
        binding.recyclerViewTodayMedicines.visibility = View.GONE
        binding.layoutEmptyTodayMedicines.visibility = View.GONE
        binding.layoutErrorTodayMedicines.visibility = View.GONE
    }

    private fun showEmptyState() {
        binding.progressBarTodayMedicines.visibility = View.GONE
        binding.recyclerViewTodayMedicines.visibility = View.GONE
        binding.layoutEmptyTodayMedicines.visibility = View.VISIBLE
        binding.layoutErrorTodayMedicines.visibility = View.GONE
    }

    private fun showErrorState(errorMessage: String = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞") {
        binding.progressBarTodayMedicines.visibility = View.GONE
        binding.recyclerViewTodayMedicines.visibility = View.GONE
        binding.layoutEmptyTodayMedicines.visibility = View.GONE
        binding.layoutErrorTodayMedicines.visibility = View.VISIBLE
        binding.textErrorMessage.text = errorMessage
    }

    private fun showContentState() {
        binding.progressBarTodayMedicines.visibility = View.GONE
        binding.recyclerViewTodayMedicines.visibility = View.VISIBLE
        binding.layoutEmptyTodayMedicines.visibility = View.GONE
        binding.layoutErrorTodayMedicines.visibility = View.GONE
    }

    private fun toggleElderlyMode() {
        try {
            // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –¥–ª—è –ø–æ–∂–∏–ª—ã—Ö
            android.widget.Toast.makeText(this, "–†–µ–∂–∏–º –¥–ª—è –ø–æ–∂–∏–ª—ã—Ö –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω", android.widget.Toast.LENGTH_SHORT).show()
            addLog("–†–µ–∂–∏–º –¥–ª—è –ø–æ–∂–∏–ª—ã—Ö –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω")
        } catch (e: Exception) {
            com.medicalnotes.app.utils.LogCollector.e("MainActivity", "Error toggling elderly mode", e)
        }
    }

    private fun toggleLogsVisibility() {
        try {
            if (binding.layoutLogs.visibility == View.VISIBLE) {
                binding.layoutLogs.visibility = View.GONE
            } else {
                binding.layoutLogs.visibility = View.VISIBLE
                addLog("=== –õ–û–ì–ò –í–ö–õ–Æ–ß–ï–ù–´ ===")
            }
        } catch (e: Exception) {
            com.medicalnotes.app.utils.LogCollector.e("MainActivity", "Error toggling logs visibility", e)
        }
    }

    private fun exportData() {
        lifecycleScope.launch(Dispatchers.IO) {
            try {
                val medicines = viewModel.allMedicines.value ?: emptyList()
                
                // –°–æ–∑–¥–∞–µ–º XML —ç–∫—Å–ø–æ—Ä—Ç
                val xmlData = buildString {
                    appendLine("<?xml version=\"1.0\" encoding=\"UTF-8\"?>")
                    appendLine("<medicines>")
                    medicines.forEach { medicine ->
                        appendLine("  <medicine>")
                        appendLine("    <id>${medicine.id}</id>")
                        appendLine("    <name>${medicine.name}</name>")
                        appendLine("    <dosage>${medicine.dosage}</dosage>")
                        appendLine("    <quantity>${medicine.quantity}</quantity>")
                        appendLine("    <remainingQuantity>${medicine.remainingQuantity}</remainingQuantity>")
                        appendLine("    <medicineType>${medicine.medicineType}</medicineType>")
                        appendLine("    <time>${medicine.time}</time>")
                        appendLine("    <frequency>${medicine.frequency}</frequency>")
                        appendLine("    <startDate>${medicine.startDate}</startDate>")
                        appendLine("    <isActive>${medicine.isActive}</isActive>")
                        appendLine("    <takenToday>${medicine.takenToday}</takenToday>")
                        appendLine("    <lastTakenTime>${medicine.lastTakenTime}</lastTakenTime>")
                        appendLine("    <isMissed>${medicine.isMissed}</isMissed>")
                        appendLine("    <missedCount>${medicine.missedCount}</missedCount>")
                        appendLine("    <groupId>${medicine.groupId ?: ""}</groupId>")
                        appendLine("    <groupName>${medicine.groupName}</groupName>")
                        appendLine("    <groupOrder>${medicine.groupOrder}</groupOrder>")
                        appendLine("    <groupStartDate>${medicine.groupStartDate}</groupStartDate>")
                        appendLine("    <groupFrequency>${medicine.groupFrequency}</groupFrequency>")
                        appendLine("    <multipleDoses>${medicine.multipleDoses}</multipleDoses>")
                        appendLine("    <doseTimes>${medicine.doseTimes.joinToString(",")}</doseTimes>")
                        appendLine("    <customDays>${medicine.customDays.joinToString(",")}</customDays>")
                        appendLine("    <updatedAt>${medicine.updatedAt}</updatedAt>")
                        appendLine("  </medicine>")
                    }
                    appendLine("</medicines>")
                }
                
                val fileName = "medical_notes_data_${LocalDate.now()}.xml"
                val file = File(getExternalFilesDir(null), fileName)
                file.writeText(xmlData)
                
                // –ö–æ–ø–∏—Ä—É–µ–º XML –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
                lifecycleScope.launch(Dispatchers.Main) {
                    try {
                        val clipboardManager = getSystemService(Context.CLIPBOARD_SERVICE) as android.content.ClipboardManager
                        val clip = android.content.ClipData.newPlainText("MedicalNotes XML Data", xmlData)
                        clipboardManager.setPrimaryClip(clip)
                        
                        android.widget.Toast.makeText(
                            this@MainActivity,
                            "XML –¥–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ $fileName",
                            android.widget.Toast.LENGTH_LONG
                        ).show()
                        addLog("XML —ç–∫—Å–ø–æ—Ä—Ç: $fileName (${xmlData.length} —Å–∏–º–≤–æ–ª–æ–≤)")
                        addLog("XML –¥–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
                    } catch (e: Exception) {
                        android.widget.Toast.makeText(
                            this@MainActivity,
                            "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ $fileName, –Ω–æ –æ—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ${e.message}",
                            android.widget.Toast.LENGTH_LONG
                        ).show()
                        addLog("–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è XML: ${e.message}")
                    }
                }
            } catch (e: Exception) {
                lifecycleScope.launch(Dispatchers.Main) {
                    android.widget.Toast.makeText(
                        this@MainActivity,
                        "–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${e.message}",
                        android.widget.Toast.LENGTH_SHORT
                    ).show()
                    addLog("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${e.message}")
                }
            }
        }
    }

    private fun testGroups() {
        addLog("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–†–£–ü–ü ===")
        val medicines = viewModel.allMedicines.value ?: emptyList()
        val groupedMedicines = medicines.filter { it.groupName.isNotEmpty() }
        
        addLog("–í—Å–µ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤: ${medicines.size}")
        addLog("–õ–µ–∫–∞—Ä—Å—Ç–≤ –≤ –≥—Ä—É–ø–ø–∞—Ö: ${groupedMedicines.size}")
        
        val groups = groupedMedicines.groupBy { it.groupName }
        groups.forEach { (groupName, groupMedicines) ->
            addLog("–ì—Ä—É–ø–ø–∞ '$groupName': ${groupMedicines.size} –ª–µ–∫–∞—Ä—Å—Ç–≤")
            groupMedicines.forEach { medicine ->
                addLog("  - ${medicine.name} (–ø–æ—Ä—è–¥–æ–∫: ${medicine.groupOrder})")
            }
        }
        
        android.widget.Toast.makeText(
            this,
            "–¢–µ—Å—Ç –≥—Ä—É–ø–ø –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.",
            android.widget.Toast.LENGTH_SHORT
        ).show()
    }
    
    // –î–û–ë–ê–í–õ–ï–ù–û: –≠–∫—Å–ø–æ—Ä—Ç JSON –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    private fun exportJsonData() {
        lifecycleScope.launch(Dispatchers.IO) {
            try {
                val medicines = viewModel.allMedicines.value ?: emptyList()
                
                // –°–æ–∑–¥–∞–µ–º JSON —ç–∫—Å–ø–æ—Ä—Ç
                val jsonData = buildString {
                    appendLine("[")
                    medicines.forEachIndexed { index, medicine ->
                        appendLine("  {")
                        appendLine("    \"id\": ${medicine.id},")
                        appendLine("    \"name\": \"${medicine.name}\",")
                        appendLine("    \"dosage\": \"${medicine.dosage}\",")
                        appendLine("    \"quantity\": ${medicine.quantity},")
                        appendLine("    \"remainingQuantity\": ${medicine.remainingQuantity},")
                        appendLine("    \"medicineType\": \"${medicine.medicineType}\",")
                        appendLine("    \"time\": \"${medicine.time}\",")
                        appendLine("    \"frequency\": \"${medicine.frequency}\",")
                        appendLine("    \"startDate\": ${medicine.startDate},")
                        appendLine("    \"isActive\": ${medicine.isActive},")
                        appendLine("    \"takenToday\": ${medicine.takenToday},")
                        appendLine("    \"lastTakenTime\": ${medicine.lastTakenTime},")
                        appendLine("    \"isMissed\": ${medicine.isMissed},")
                        appendLine("    \"missedCount\": ${medicine.missedCount},")
                        appendLine("    \"groupId\": ${medicine.groupId ?: "null"},")
                        appendLine("    \"groupName\": \"${medicine.groupName}\",")
                        appendLine("    \"groupOrder\": ${medicine.groupOrder},")
                        appendLine("    \"groupStartDate\": ${medicine.groupStartDate},")
                        appendLine("    \"groupFrequency\": \"${medicine.groupFrequency}\",")
                        appendLine("    \"multipleDoses\": ${medicine.multipleDoses},")
                        appendLine("    \"doseTimes\": [${medicine.doseTimes.joinToString(",") { "\"$it\"" }}],")
                        appendLine("    \"customDays\": [${medicine.customDays.joinToString(",")}],")
                        appendLine("    \"updatedAt\": ${medicine.updatedAt}")
                        if (index < medicines.size - 1) {
                            appendLine("  },")
                        } else {
                            appendLine("  }")
                        }
                    }
                    appendLine("]")
                }
                
                val fileName = "medical_notes_data_${LocalDate.now()}.json"
                val file = File(getExternalFilesDir(null), fileName)
                file.writeText(jsonData)
                
                // –ö–æ–ø–∏—Ä—É–µ–º JSON –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
                lifecycleScope.launch(Dispatchers.Main) {
                    try {
                        val clipboardManager = getSystemService(Context.CLIPBOARD_SERVICE) as android.content.ClipboardManager
                        val clip = android.content.ClipData.newPlainText("MedicalNotes JSON Data", jsonData)
                        clipboardManager.setPrimaryClip(clip)
                        
                        android.widget.Toast.makeText(
                            this@MainActivity,
                            "JSON –¥–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ $fileName",
                            android.widget.Toast.LENGTH_LONG
                        ).show()
                        addLog("JSON —ç–∫—Å–ø–æ—Ä—Ç: $fileName (${jsonData.length} —Å–∏–º–≤–æ–ª–æ–≤)")
                        addLog("JSON –¥–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
                    } catch (e: Exception) {
                        android.widget.Toast.makeText(
                            this@MainActivity,
                            "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ $fileName, –Ω–æ –æ—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ${e.message}",
                            android.widget.Toast.LENGTH_LONG
                        ).show()
                        addLog("–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è JSON: ${e.message}")
                    }
                }
            } catch (e: Exception) {
                lifecycleScope.launch(Dispatchers.Main) {
                    android.widget.Toast.makeText(
                        this@MainActivity,
                        "–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ JSON: ${e.message}",
                        android.widget.Toast.LENGTH_SHORT
                    ).show()
                    addLog("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ JSON: ${e.message}")
                }
            }
        }
    }
    
    //  –î–û–ë–ê–í–õ–ï–ù–û: –ú–µ—Ç–æ–¥ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    private fun copyLogToClipboard() {
        try {
            com.medicalnotes.app.utils.LogCollector.d("MainActivity", "=== –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –õ–û–ì–ê ===")
            
            val clipboardManager = getSystemService(Context.CLIPBOARD_SERVICE) as android.content.ClipboardManager
            val logText = logs.joinToString("\n")
            
            val clip = android.content.ClipData.newPlainText("MedicalNotes Log", logText)
            clipboardManager.setPrimaryClip(clip)
            
            com.medicalnotes.app.utils.LogCollector.d("MainActivity", "‚úì –õ–æ–≥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
            com.medicalnotes.app.utils.LogCollector.d("MainActivity", "–†–∞–∑–º–µ—Ä –ª–æ–≥–∞: ${logText.length} —Å–∏–º–≤–æ–ª–æ–≤")
            
            android.widget.Toast.makeText(
                this,
                "–õ–æ–≥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ (${logText.length} —Å–∏–º–≤–æ–ª–æ–≤)",
                android.widget.Toast.LENGTH_LONG
            ).show()
            
            addLog("=== –õ–û–ì –°–ö–û–ü–ò–†–û–í–ê–ù ===")
            addLog("–†–∞–∑–º–µ—Ä: ${logText.length} —Å–∏–º–≤–æ–ª–æ–≤")
            addLog("–í—Ä–µ–º—è: ${LocalDateTime.now()}")
            
        } catch (e: Exception) {
            com.medicalnotes.app.utils.LogCollector.e("MainActivity", "Error copying log to clipboard", e)
            android.widget.Toast.makeText(
                this,
                "–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∞: ${e.message}",
                android.widget.Toast.LENGTH_SHORT
            ).show()
        }
    }
    
    //  –î–û–ë–ê–í–õ–ï–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤
    private fun checkOverdueMedicines() {
        lifecycleScope.launch(Dispatchers.IO) {
            try {
                com.medicalnotes.app.utils.LogCollector.d("MainActivity", "=== –ü–†–û–í–ï–†–ö–ê –ü–†–û–°–†–û–ß–ï–ù–ù–´–• –õ–ï–ö–ê–†–°–¢–í ===")
                lifecycleScope.launch(Dispatchers.Main) { addLog("=== –ü–†–û–í–ï–†–ö–ê –ü–†–û–°–†–û–ß–ï–ù–ù–´–• –õ–ï–ö–ê–†–°–¢–í ===") }
                
                //  –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
                var medicines = viewModel.allMedicines.value ?: emptyList()
                if (medicines.isEmpty()) {
                    // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é
                    try {
                        val dataManager = com.medicalnotes.app.utils.DataManager(this@MainActivity)
                        medicines = dataManager.loadMedicines()
                        lifecycleScope.launch(Dispatchers.Main) { 
                            addLog("–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ DataManager: ${medicines.size} –ª–µ–∫–∞—Ä—Å—Ç–≤")
                        }
                    } catch (e: Exception) {
                        lifecycleScope.launch(Dispatchers.Main) { 
                            addLog(" –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${e.message}")
                        }
                        return@launch
                    }
                }
                
                lifecycleScope.launch(Dispatchers.Main) { addLog("–í—Å–µ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤ –≤ –±–∞–∑–µ: ${medicines.size}") }
                
                // –î–û–ë–ê–í–õ–ï–ù–û: –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞–∂–¥–æ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
                medicines.forEach { medicine ->
                    val status = com.medicalnotes.app.utils.MedicineStatusHelper.getMedicineStatus(medicine)
                    val shouldTake = com.medicalnotes.app.utils.MedicineStatusHelper.shouldTakeToday(medicine)
                    
                    lifecycleScope.launch(Dispatchers.Main) { 
                        addLog("–ü–†–û–í–ï–†–ö–ê: ${medicine.name} - –°—Ç–∞—Ç—É—Å: $status, –í—Ä–µ–º—è: ${medicine.time}, –ü—Ä–∏–Ω—è—Ç–æ —Å–µ–≥–æ–¥–Ω—è: ${medicine.takenToday}")
                        addLog("  - –î–æ–ª–∂–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è: $shouldTake")
                        addLog("  - –ß–∞—Å—Ç–æ—Ç–∞: ${medicine.frequency}")
                        addLog("  - –ê–∫—Ç–∏–≤–Ω–æ: ${medicine.isActive}")
                        addLog("  - –ì—Ä—É–ø–ø–∞: ${medicine.groupName} (ID: ${medicine.groupId}, –ü–æ—Ä—è–¥–æ–∫: ${medicine.groupOrder})")
                        addLog("  - –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ${medicine.startDate}")
                        addLog("  - –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–∏–µ–º: ${medicine.lastTakenTime}")
                    }
                    
                    if (status == com.medicalnotes.app.utils.DosageCalculator.MedicineStatus.OVERDUE) {
                        lifecycleScope.launch(Dispatchers.Main) { 
                            addLog(" –ù–ê–ô–î–ï–ù–û –ü–†–û–°–†–û–ß–ï–ù–ù–û–ï: ${medicine.name} (–ø—Ä–∏–Ω—è—Ç–æ —Å–µ–≥–æ–¥–Ω—è: ${medicine.takenToday})")
                        }
                    }
                }
                
                val overdueMedicines = medicines.filter { medicine ->
                    val status = com.medicalnotes.app.utils.MedicineStatusHelper.getMedicineStatus(medicine)
                    val isOverdue = status == com.medicalnotes.app.utils.DosageCalculator.MedicineStatus.OVERDUE
                    val notTakenToday = !medicine.takenToday
                    
                    lifecycleScope.launch(Dispatchers.Main) { 
                        addLog("üîç –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: ${medicine.name} - –°—Ç–∞—Ç—É—Å: $status, –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: $isOverdue, –ù–µ –ø—Ä–∏–Ω—è—Ç–æ —Å–µ–≥–æ–¥–Ω—è: $notTakenToday")
                    }
                    
                    isOverdue && notTakenToday
                }
                
                lifecycleScope.launch(Dispatchers.Main) { 
                    addLog("–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤ (–Ω–µ –ø—Ä–∏–Ω—è—Ç—ã—Ö —Å–µ–≥–æ–¥–Ω—è): ${overdueMedicines.size}")
                }
                
                if (overdueMedicines.isNotEmpty()) {
                    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - OverdueCheckService —É–∂–µ —Å–æ–∑–¥–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    addLog(" –ù–∞–π–¥–µ–Ω–æ ${overdueMedicines.size} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤ - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞—é—Ç—Å—è —Å–µ—Ä–≤–∏—Å–æ–º")
                    
                    lifecycleScope.launch(Dispatchers.Main) {
                        android.widget.Toast.makeText(
                            this@MainActivity,
                            "–ù–∞–π–¥–µ–Ω–æ ${overdueMedicines.size} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤!",
                            android.widget.Toast.LENGTH_SHORT
                        ).show()
                    }
                } else {
                    lifecycleScope.launch(Dispatchers.Main) { addLog("–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ") }
                }
                
                lifecycleScope.launch(Dispatchers.Main) { addLog("=== –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===") }
                
            } catch (e: Exception) {
                com.medicalnotes.app.utils.LogCollector.e("MainActivity", "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤", e)
                lifecycleScope.launch(Dispatchers.Main) { 
                    addLog(" –û–®–ò–ë–ö–ê –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤: ${e.message}")
                }
            }
        }
    }
    
    //  –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è ANR)
    private fun startPeriodicOverdueCheck() {
        try {
            overdueCheckTimer = android.os.Handler(android.os.Looper.getMainLooper())
            
            val checkRunnable = object : Runnable {
                override fun run() {
                    try {
                        com.medicalnotes.app.utils.LogCollector.d("MainActivity", "=== –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–†–û–°–†–û–ß–ï–ù–ù–´–• ===")
                        
                        //  –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ç—è–∂–µ–ª—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫
                        lifecycleScope.launch(Dispatchers.IO) {
                            checkOverdueMedicines()
                        }
                        
                        //  –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ 2 –º–∏–Ω—É—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è ANR
                        overdueCheckTimer?.postDelayed(this, 120000) // 2 –º–∏–Ω—É—Ç—ã –≤–º–µ—Å—Ç–æ 30 —Å–µ–∫—É–Ω–¥
                    } catch (e: Exception) {
                        com.medicalnotes.app.utils.LogCollector.e("MainActivity", "–û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏", e)
                    }
                }
            }
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
            overdueCheckTimer?.postDelayed(checkRunnable, 120000)
            com.medicalnotes.app.utils.LogCollector.d("MainActivity", "‚úì –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã)")
            
        } catch (e: Exception) {
            com.medicalnotes.app.utils.LogCollector.e("MainActivity", "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏", e)
        }
    }
    
    //  –î–û–ë–ê–í–õ–ï–ù–û: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    private fun stopPeriodicOverdueCheck() {
        try {
            overdueCheckTimer?.removeCallbacksAndMessages(null)
            overdueCheckTimer = null
            com.medicalnotes.app.utils.LogCollector.d("MainActivity", "‚úì –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        } catch (e: Exception) {
            com.medicalnotes.app.utils.LogCollector.e("MainActivity", "–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏", e)
        }
    }
    
    //  –î–û–ë–ê–í–õ–ï–ù–û: –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    private fun startNotificationService() {
        try {
            com.medicalnotes.app.utils.LogCollector.d("MainActivity", "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            com.medicalnotes.app.service.NotificationService.startService(this)
            com.medicalnotes.app.utils.LogCollector.d("MainActivity", "‚úì –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
        } catch (e: Exception) {
            com.medicalnotes.app.utils.LogCollector.e("MainActivity", "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", e)
        }
    }
    
    //  –î–û–ë–ê–í–õ–ï–ù–û: –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤
    private fun startOverdueCheckService() {
        try {
            com.medicalnotes.app.utils.LogCollector.d("MainActivity", "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤")
            addLog(" –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤")
            
            com.medicalnotes.app.service.OverdueCheckService.startService(this)
            
            com.medicalnotes.app.utils.LogCollector.d("MainActivity", "‚úì –°–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤ –∑–∞–ø—É—â–µ–Ω")
            addLog(" –°–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤ –∑–∞–ø—É—â–µ–Ω")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—â–µ–Ω
            android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({
                try {
                    val isServiceRunning = isServiceRunning(com.medicalnotes.app.service.OverdueCheckService::class.java)
                    com.medicalnotes.app.utils.LogCollector.d("MainActivity", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: $isServiceRunning")
                    addLog("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: $isServiceRunning")
                } catch (e: Exception) {
                    com.medicalnotes.app.utils.LogCollector.e("MainActivity", "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–∏—Å–∞", e)
                }
            }, 2000)
            
        } catch (e: Exception) {
            com.medicalnotes.app.utils.LogCollector.e("MainActivity", "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤", e)
            addLog(" –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: ${e.message}")
        }
    }
    
    //  –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–∏—Å
    private fun isServiceRunning(serviceClass: Class<*>): Boolean {
        return try {
            //  –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –±–µ–∑ deprecated –º–µ—Ç–æ–¥–æ–≤
            val packageManager = packageManager
            val intent = android.content.Intent(this, serviceClass)
            val resolveInfo = packageManager.queryIntentServices(intent, 0)
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–µ—Ä–≤–∏—Å –≤ —Å–ø–∏—Å–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
            if (resolveInfo.isNotEmpty()) {
                // –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
                val serviceName = serviceClass.name
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ ActivityManager —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {
                    val activityManager = getSystemService(Context.ACTIVITY_SERVICE) as android.app.ActivityManager
                    @Suppress("DEPRECATION")
                    val runningServices = activityManager.getRunningServices(100)
                    runningServices.any { it.service.className == serviceName }
                } else {
                    // –î–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω
                    true
                }
            } else {
                false
            }
        } catch (e: Exception) {
            com.medicalnotes.app.utils.LogCollector.e("MainActivity", "Error checking service status", e)
            false
        }
    }
    
    //  –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    private fun checkAndRestoreNotifications() {
        try {
            com.medicalnotes.app.utils.LogCollector.d("MainActivity", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            val restorationManager = com.medicalnotes.app.utils.NotificationRestorationManager(this)
            restorationManager.checkAndRestoreNotifications()
            com.medicalnotes.app.utils.LogCollector.d("MainActivity", "‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        } catch (e: Exception) {
            com.medicalnotes.app.utils.LogCollector.e("MainActivity", "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", e)
        }
    }
    
    //  –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    private fun checkNotificationPermissions() {
        try {
            com.medicalnotes.app.utils.LogCollector.d("MainActivity", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            val batteryHelper = com.medicalnotes.app.utils.BatteryOptimizationHelper(this)
            batteryHelper.checkAndRequestNotificationPermissions()
            com.medicalnotes.app.utils.LogCollector.d("MainActivity", "‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        } catch (e: Exception) {
            com.medicalnotes.app.utils.LogCollector.e("MainActivity", "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", e)
        }
    }
    
    //  –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ–∫–æ–Ω –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    private fun checkOverlayPermissions() {
        try {
            com.medicalnotes.app.utils.LogCollector.d("MainActivity", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ–∫–æ–Ω –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
            
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.M) {
                if (!android.provider.Settings.canDrawOverlays(this)) {
                    com.medicalnotes.app.utils.LogCollector.d("MainActivity", "–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –ø–æ–∫–∞–∑ –æ–∫–æ–Ω –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
                    addLog(" –ù—É–∂–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø–æ–∫–∞–∑ –æ–∫–æ–Ω –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º
                    android.app.AlertDialog.Builder(this)
                        .setTitle("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ")
                        .setMessage("–î–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω—É–∂–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.")
                        .setPositiveButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏") { _, _ ->
                            try {
                                val intent = android.content.Intent(android.provider.Settings.ACTION_MANAGE_OVERLAY_PERMISSION).apply {
                                    data = android.net.Uri.parse("package:$packageName")
                                    flags = android.content.Intent.FLAG_ACTIVITY_NEW_TASK
                                }
                                startActivity(intent)
                                addLog(" –û—Ç–∫—Ä—ã—Ç–æ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")
                            } catch (e: Exception) {
                                com.medicalnotes.app.utils.LogCollector.e("MainActivity", "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π", e)
                                addLog(" –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${e.message}")
                            }
                        }
                        .setNegativeButton("–ü–æ–∑–∂–µ") { _, _ ->
                            addLog(" –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –æ—Ç–ª–æ–∂–µ–Ω–∞")
                        }
                        .setCancelable(false)
                        .show()
                } else {
                    com.medicalnotes.app.utils.LogCollector.d("MainActivity", "‚úì –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø–æ–∫–∞–∑ –æ–∫–æ–Ω –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –µ—Å—Ç—å")
                    addLog(" –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø–æ–∫–∞–∑ –æ–∫–æ–Ω –µ—Å—Ç—å")
                }
            } else {
                com.medicalnotes.app.utils.LogCollector.d("MainActivity", "Android –≤–µ—Ä—Å–∏—è –Ω–∏–∂–µ 6.0, —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
                addLog(" Android –≤–µ—Ä—Å–∏—è –Ω–∏–∂–µ 6.0, —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            }
            
        } catch (e: Exception) {
            com.medicalnotes.app.utils.LogCollector.e("MainActivity", "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ–∫–æ–Ω", e)
            addLog(" –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: ${e.message}")
        }
    }
    
    //  –î–û–ë–ê–í–õ–ï–ù–û: –ú–µ—Ç–æ–¥ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    private fun performDiagnostic() {
        try {
            addLog("üîç –ó–ê–ü–£–°–ö –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò...")
            
            lifecycleScope.launch(Dispatchers.IO) {
                try {
                    val diagnostic = com.medicalnotes.app.utils.DiagnosticUtils.performFullDiagnostic(this@MainActivity)
                    
                    lifecycleScope.launch(Dispatchers.Main) {
                        addLog("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
                        addLog(" –†–µ–∑—É–ª—å—Ç–∞—Ç:")
                        addLog(diagnostic)
                        
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
                        val saveResult = com.medicalnotes.app.utils.DiagnosticUtils.saveDiagnosticReport(this@MainActivity, diagnostic)
                        addLog("üíæ $saveResult")
                        
                        android.widget.Toast.makeText(this@MainActivity, "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", android.widget.Toast.LENGTH_LONG).show()
                    }
                } catch (e: Exception) {
                    lifecycleScope.launch(Dispatchers.Main) {
                        addLog(" –û–®–ò–ë–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò: ${e.message}")
                        android.widget.Toast.makeText(this@MainActivity, "–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ${e.message}", android.widget.Toast.LENGTH_LONG).show()
                    }
                }
            }
        } catch (e: Exception) {
            com.medicalnotes.app.utils.LogCollector.e("MainActivity", "Error in performDiagnostic", e)
            addLog(" –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò: ${e.message}")
        }
    }
    
    //  –î–û–ë–ê–í–õ–ï–ù–û: –ú–µ—Ç–æ–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
    private fun fixIssues() {
        try {
            addLog(" –ó–ê–ü–£–°–ö –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–û–ë–õ–ï–ú...")
            
            lifecycleScope.launch(Dispatchers.IO) {
                try {
                    val fixResult = com.medicalnotes.app.utils.DiagnosticUtils.fixCommonIssues(this@MainActivity)
                    
                    lifecycleScope.launch(Dispatchers.Main) {
                        addLog(" –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
                        addLog(" –†–µ–∑—É–ª—å—Ç–∞—Ç:")
                        addLog(fixResult)
                        
                        android.widget.Toast.makeText(this@MainActivity, "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", android.widget.Toast.LENGTH_LONG).show()
                        
                        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                        try {
                            viewModel.loadAllMedicines()
                            loadTodayMedicines()
                            addLog("üîÑ –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
                        } catch (e: Exception) {
                            addLog(" –û–®–ò–ë–ö–ê –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ò: ${e.message}")
                        }
                    }
                } catch (e: Exception) {
                    lifecycleScope.launch(Dispatchers.Main) {
                        addLog(" –û–®–ò–ë–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: ${e.message}")
                        android.widget.Toast.makeText(this@MainActivity, "–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${e.message}", android.widget.Toast.LENGTH_LONG).show()
                    }
                }
            }
        } catch (e: Exception) {
            com.medicalnotes.app.utils.LogCollector.e("MainActivity", "Error in fixIssues", e)
            addLog(" –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: ${e.message}")
        }
    }
    
    override fun updateUIAfterLanguageChange() {
        super.updateUIAfterLanguageChange()
        
        try {
            com.medicalnotes.app.utils.LogCollector.d("MainActivity", "Updating UI after language change")
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Activity
            title = getString(R.string.app_name)
            supportActionBar?.title = getString(R.string.app_name)
            
            // –í–ê–ñ–ù–û: –Ø–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ toolbar
            binding.toolbar.setTitle(getString(R.string.app_name))
            
            // –î–û–ë–ê–í–õ–ï–ù–û: –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            com.medicalnotes.app.utils.LogCollector.d("MainActivity", "updateUIAfterLanguageChange: Setting toolbar title to: ${getString(R.string.app_name)}")
            com.medicalnotes.app.utils.LogCollector.d("MainActivity", "updateUIAfterLanguageChange: Current toolbar title is: ${binding.toolbar.title}")
            
            // –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ toolbar
            binding.toolbar.invalidate()
            
            // –î–û–ë–ê–í–õ–ï–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è view
            binding.toolbar.post {
                binding.toolbar.setTitle(getString(R.string.app_name))
                com.medicalnotes.app.utils.LogCollector.d("MainActivity", "updateUIAfterLanguageChange: Post-set toolbar title to: ${getString(R.string.app_name)}")
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≤–µ—Ä—Å–∏–µ–π
            binding.toolbar.subtitle = VersionUtils.getShortVersionInfo(this)
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ Navigation Drawer
            updateNavigationDrawerText()
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥–∞–ø—Ç–µ—Ä—ã
            todayMedicineAdapter.updateLanguage()
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫
            updateButtonTexts()
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
            invalidateOptionsMenu()
            
            com.medicalnotes.app.utils.LogCollector.d("MainActivity", "UI updated successfully after language change")
            
        } catch (e: Exception) {
            com.medicalnotes.app.utils.LogCollector.e("MainActivity", "Error updating UI after language change", e)
        }
    }
    
    private fun updateNavigationDrawerText() {
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ Navigation Drawer (–µ—Å–ª–∏ –µ—Å—Ç—å header)
            // ID nav_header_title –∏ nav_header_subtitle –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ —Ä–µ—Å—É—Ä—Å–∞—Ö
            // try {
            //     binding.navigationView.getHeaderView(0)?.findViewById<android.widget.TextView>(R.id.nav_header_title)?.text = getString(R.string.app_name)
            //     binding.navigationView.getHeaderView(0)?.findViewById<android.widget.TextView>(R.id.nav_header_subtitle)?.text = getString(R.string.app_description)
            // } catch (e: Exception) {
            //     com.medicalnotes.app.utils.LogCollector.w("MainActivity", "Navigation header not found")
            // }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
                val navMenu = binding.navigationView.menu
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é
                navMenu.findItem(R.id.nav_manage_medicines)?.let { item ->
                    item.title = getString(R.string.medicines)
                }
                navMenu.findItem(R.id.nav_manage_groups)?.let { item ->
                    item.title = getString(R.string.groups)
                }
                navMenu.findItem(R.id.nav_settings)?.let { item ->
                    item.title = getString(R.string.settings)
                }
                navMenu.findItem(R.id.nav_elderly_mode)?.let { item ->
                    item.title = getString(R.string.elderly_mode)
                }
                navMenu.findItem(R.id.nav_logs)?.let { item ->
                    item.title = getString(R.string.system_logs)
                }
                navMenu.findItem(R.id.nav_export_data)?.let { item ->
                    item.title = getString(R.string.export_data)
                }
                navMenu.findItem(R.id.nav_test_groups)?.let { item ->
                    item.title = getString(R.string.test_groups)
                }
            } catch (e: Exception) {
                com.medicalnotes.app.utils.LogCollector.w("MainActivity", "Navigation menu items not found")
            }
            
        } catch (e: Exception) {
            com.medicalnotes.app.utils.LogCollector.e("MainActivity", "Error updating navigation drawer text", e)
        }
    }
    
    private fun updateButtonTexts() {
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            // FAB –æ–±—ã—á–Ω–æ –Ω–µ –∏–º–µ–µ—Ç —Ç–µ–∫—Å—Ç–∞, –Ω–æ –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å contentDescription
            binding.fabAddMedicine.contentDescription = getString(R.string.add_medicine)
            
        } catch (e: Exception) {
            com.medicalnotes.app.utils.LogCollector.e("MainActivity", "Error updating button texts", e)
        }
    }
    
    override fun onDestroy() {
        super.onDestroy()
        android.util.Log.d("MainActivity", "MainActivity —É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç—Å—è")
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–±—É –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        try {
            android.util.Log.d("MainActivity", "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
            OverdueCheckService.startService(this@MainActivity)
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({
                try {
                    android.util.Log.d("MainActivity", "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª—É–∂–±—ã —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã")
                    OverdueCheckService.startService(this@MainActivity)
                } catch (e: Exception) {
                    android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–ª—É–∂–±—ã", e)
                }
            }, 2000)
            
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–ª—É–∂–±—ã –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏", e)
        }
    }

    /**
     * –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
     */
    private fun checkAndRequestPermissions() {
        android.util.Log.d("MainActivity", "üîê –ù–ê–ß–ê–õ–û –ü–†–û–í–ï–†–ö–ò –†–ê–ó–†–ï–®–ï–ù–ò–ô –í MainActivity")
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ activity –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞
            if (isFinishing || isDestroyed) {
                android.util.Log.w("MainActivity", "‚ö†Ô∏è Activity –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")
                return
            }
            
            android.util.Log.d("MainActivity", "üìû –í—ã–∑—ã–≤–∞–µ–º PermissionManager.requestMissingPermissions")
            com.medicalnotes.app.utils.PermissionManager.requestMissingPermissions(this) { status ->
                android.util.Log.d("MainActivity", "üì• –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç PermissionManager")
                android.util.Log.d("MainActivity", "  –í—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ: ${status.isAllGranted()}")
                android.util.Log.d("MainActivity", "  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ: ${status.missingPermissions}")
                android.util.Log.d("MainActivity", "  System Alert: ${status.systemAlertWindowGranted}")
                android.util.Log.d("MainActivity", "  –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${status.notificationsEnabled}")
                android.util.Log.d("MainActivity", "  –ë–∞—Ç–∞—Ä–µ—è: ${status.batteryOptimizationIgnored}")
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ activity –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º UI
                if (!isFinishing && !isDestroyed) {
                    runOnUiThread {
                        try {
                            if (status.isAllGranted()) {
                                android.util.Log.d("MainActivity", "‚úÖ –í—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö")
                                showPermissionStatusMessage("–í—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", true)
                            } else {
                                android.util.Log.w("MainActivity", "‚ö†Ô∏è –ù–µ –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
                                showPermissionStatusMessage("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.", false)
                                
                                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                                showPermissionCheckButton()
                            }
                        } catch (e: Exception) {
                            android.util.Log.e("MainActivity", "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π", e)
                        }
                    }
                } else {
                    android.util.Log.w("MainActivity", "‚ö†Ô∏è Activity –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI")
                }
            }
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π", e)
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
     */
    private fun showPermissionStatusMessage(message: String, isSuccess: Boolean) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ binding –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if (!::binding.isInitialized) {
                android.util.Log.w("MainActivity", "Binding –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è")
                return
            }
            
            val snackbar = com.google.android.material.snackbar.Snackbar.make(
                binding.root,
                message,
                com.google.android.material.snackbar.Snackbar.LENGTH_LONG
            )
            
            if (isSuccess) {
                snackbar.setBackgroundTint(resources.getColor(com.google.android.material.R.color.design_default_color_primary, null))
            } else {
                snackbar.setBackgroundTint(resources.getColor(com.google.android.material.R.color.design_default_color_error, null))
                snackbar.setAction("–ù–∞—Å—Ç—Ä–æ–π–∫–∏") {
                    com.medicalnotes.app.utils.PermissionManager.openAppSettings(this@MainActivity)
                }
            }
            
            snackbar.show()
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è—Ö", e)
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
     */
    private fun showPermissionCheckButton() {
        try {
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –≤ toolbar –∏–ª–∏ floating action button
            android.util.Log.d("MainActivity", "–ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π", e)
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
     */
    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray
    ) {
        android.util.Log.d("MainActivity", "üìã onRequestPermissionsResult –≤—ã–∑–≤–∞–Ω")
        android.util.Log.d("MainActivity", "  RequestCode: $requestCode")
        android.util.Log.d("MainActivity", "  Permissions: ${permissions.joinToString(", ")}")
        android.util.Log.d("MainActivity", "  GrantResults: ${grantResults.joinToString(", ")}")
        
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        
        com.medicalnotes.app.utils.PermissionManager.onRequestPermissionsResult(
            requestCode,
            permissions,
            grantResults
        ) { status ->
            android.util.Log.d("MainActivity", "üì• –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")
            android.util.Log.d("MainActivity", "  –í—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ: ${status.isAllGranted()}")
            android.util.Log.d("MainActivity", "  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ: ${status.missingPermissions}")
            
            runOnUiThread {
                if (status.isAllGranted()) {
                    showPermissionStatusMessage("–í—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã!", true)
                } else {
                    showPermissionStatusMessage("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã", false)
                }
            }
        }
    }

    /**
     * –î–û–ë–ê–í–õ–ï–ù–û: –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è UI
     */
    private fun diagnoseUIState() {
        try {
            android.util.Log.d("MainActivity", "=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê UI ===")
            android.util.Log.d("MainActivity", "Binding –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: ${::binding.isInitialized}")
            
            if (::binding.isInitialized) {
                android.util.Log.d("MainActivity", "Toolbar —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${binding.toolbar != null}")
                android.util.Log.d("MainActivity", "RecyclerView —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${binding.recyclerViewTodayMedicines != null}")
                android.util.Log.d("MainActivity", "ProgressBar —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${binding.progressBarTodayMedicines != null}")
                
                try {
                    android.util.Log.d("MainActivity", "Toolbar title: ${binding.toolbar.title}")
                    android.util.Log.d("MainActivity", "Toolbar subtitle: ${binding.toolbar.subtitle}")
                } catch (e: Exception) {
                    android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤ toolbar", e)
                }
            }
            
            android.util.Log.d("MainActivity", "Activity finishing: $isFinishing")
            android.util.Log.d("MainActivity", "Activity destroyed: $isDestroyed")
            android.util.Log.d("MainActivity", "=== –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===")
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ UI", e)
        }
    }

    /**
     * –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–µ
     */
    private fun showErrorDialog(title: String, message: String) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ activity –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞
            if (isFinishing || isDestroyed) {
                android.util.Log.w("MainActivity", "Activity –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∫–∞–∑ –¥–∏–∞–ª–æ–≥–∞ –æ—à–∏–±–∫–∏")
                return
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            runOnUiThread {
                try {
                    androidx.appcompat.app.AlertDialog.Builder(this)
                        .setTitle(title)
                        .setMessage(message)
                        .setPositiveButton("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å") { _, _ ->
                            try {
                                // –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
                                val clipboard = getSystemService(Context.CLIPBOARD_SERVICE) as android.content.ClipboardManager
                                val clip = android.content.ClipData.newPlainText("–û—à–∏–±–∫–∞", message)
                                clipboard.setPrimaryClip(clip)
                                android.widget.Toast.makeText(this@MainActivity, "–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞", android.widget.Toast.LENGTH_SHORT).show()
                            } catch (e: Exception) {
                                android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä", e)
                            }
                        }
                        .setNegativeButton("–ó–∞–∫—Ä—ã—Ç—å") { dialog, _ ->
                            try {
                                dialog.dismiss()
                            } catch (e: Exception) {
                                android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞", e)
                            }
                        }
                        .setCancelable(false)
                        .show()
                } catch (e: Exception) {
                    android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞", e)
                    // Fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Toast
                    android.widget.Toast.makeText(this@MainActivity, "$title: ${e.message}", android.widget.Toast.LENGTH_LONG).show()
                }
            }
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞", e)
        }
    }
    
    /**
     * –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    private fun showDatePickerDialog() {
        try {
            val currentYear = selectedTestDate.year
            val currentMonth = selectedTestDate.monthValue - 1 // Calendar –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 0-based –º–µ—Å—è—Ü—ã
            val currentDay = selectedTestDate.dayOfMonth
            
            val datePickerDialog = android.app.DatePickerDialog(
                this,
                { _, year, month, dayOfMonth ->
                    try {
                        val newDate = LocalDate.of(year, month + 1, dayOfMonth)
                        selectedTestDate = newDate
                        updateSelectedDateDisplay()
                        
                        addLog("=== –ò–ó–ú–ï–ù–ï–ù–ò–ï –¢–ï–°–¢–û–í–û–ô –î–ê–¢–´ ===")
                        addLog("–ù–æ–≤–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –¥–∞—Ç–∞: $newDate")
                        
                        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑ ViewModel
                        viewModel.loadMedicinesForDate(newDate)
                        
                        android.widget.Toast.makeText(
                            this,
                            "–¢–µ—Å—Ç–æ–≤–∞—è –¥–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${formatDate(newDate)}",
                            android.widget.Toast.LENGTH_SHORT
                        ).show()
                    } catch (e: Exception) {
                        android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã", e)
                        showErrorDialog("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã", "–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n${e.message}")
                    }
                },
                currentYear,
                currentMonth,
                currentDay
            )
            
            datePickerDialog.show()
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã", e)
            showErrorDialog("–û—à–∏–±–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è", "–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n${e.message}")
        }
    }
    
    /**
     * –î–û–ë–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
     */
    private fun updateSelectedDateDisplay() {
        try {
            val displayText = when {
                selectedTestDate == LocalDate.now() -> "–°–µ–≥–æ–¥–Ω—è"
                selectedTestDate == LocalDate.now().minusDays(1) -> "–í—á–µ—Ä–∞"
                selectedTestDate == LocalDate.now().plusDays(1) -> "–ó–∞–≤—Ç—Ä–∞"
                else -> formatDate(selectedTestDate)
            }
            
            binding.textSelectedDate.text = displayText
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç—ã", e)
        }
    }
    
    /**
     * –î–û–ë–ê–í–õ–ï–ù–û: –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private fun formatDate(date: LocalDate): String {
        return try {
            val formatter = java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy")
            date.format(formatter)
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã", e)
            date.toString()
        }
    }
    
    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ takenToday
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç takenToday –µ—Å–ª–∏ lastTakenTime –Ω–µ —Å–µ–≥–æ–¥–Ω—è
     */
    private fun fixIncorrectTakenTodayStatus() {
        lifecycleScope.launch(Dispatchers.IO) {
            try {
                android.util.Log.d("MainActivity", "=== –ù–ê–ß–ò–ù–ê–ï–ú –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–û–í TAKEN_TODAY ===")
                
                val dataManager = com.medicalnotes.app.utils.DataManager(this@MainActivity)
                val allMedicines = dataManager.loadMedicines()
                val today = LocalDate.now()
                
                android.util.Log.d("MainActivity", "–í—Å–µ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${allMedicines.size}")
                android.util.Log.d("MainActivity", "–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞: $today")
                
                var fixedCount = 0
                val medicinesToUpdate = mutableListOf<Medicine>()
                
                allMedicines.forEach { medicine ->
                    android.util.Log.d("MainActivity", "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–æ: ${medicine.name}")
                    android.util.Log.d("MainActivity", "  - takenToday: ${medicine.takenToday}")
                    android.util.Log.d("MainActivity", "  - lastTakenTime: ${medicine.lastTakenTime}")
                    
                    if (medicine.takenToday && medicine.lastTakenTime > 0) {
                        val lastTakenDate = java.time.Instant.ofEpochMilli(medicine.lastTakenTime)
                            .atZone(java.time.ZoneId.systemDefault())
                            .toLocalDate()
                        
                        android.util.Log.d("MainActivity", "  - lastTakenDate: $lastTakenDate")
                        
                        if (lastTakenDate != today) {
                            android.util.Log.d("MainActivity", "  - –ù–ê–ô–î–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê: lastTakenDate != today")
                            android.util.Log.d("MainActivity", "  - –°–±—Ä–∞—Å—ã–≤–∞–µ–º takenToday –¥–ª—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞: ${medicine.name}")
                            
                            val updatedMedicine = medicine.copy(
                                takenToday = false,
                                updatedAt = System.currentTimeMillis()
                            )
                            medicinesToUpdate.add(updatedMedicine)
                            fixedCount++
                        } else {
                            android.util.Log.d("MainActivity", "  - –°—Ç–∞—Ç—É—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
                        }
                    } else if (medicine.takenToday && medicine.lastTakenTime <= 0) {
                        // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è: takenToday = true, –Ω–æ lastTakenTime –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                        android.util.Log.d("MainActivity", "  - –ù–ê–ô–î–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê: takenToday=true –Ω–æ lastTakenTime<=0")
                        
                        val updatedMedicine = medicine.copy(
                            takenToday = false,
                            updatedAt = System.currentTimeMillis()
                        )
                        medicinesToUpdate.add(updatedMedicine)
                        fixedCount++
                    }
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                if (medicinesToUpdate.isNotEmpty()) {
                    android.util.Log.d("MainActivity", "–°–æ—Ö—Ä–∞–Ω—è–µ–º ${medicinesToUpdate.size} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤")
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ
                    medicinesToUpdate.forEach { medicine ->
                        dataManager.updateMedicine(medicine)
                    }
                    
                    android.util.Log.d("MainActivity", "‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û –°–¢–ê–¢–£–°–û–í: $fixedCount")
                    
                    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –Ω–∞ UI
                    lifecycleScope.launch(Dispatchers.Main) {
                        try {
                            android.widget.Toast.makeText(
                                this@MainActivity,
                                "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ $fixedCount –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤",
                                android.widget.Toast.LENGTH_SHORT
                            ).show()
                            
                            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                            viewModel.loadMedicinesForDate(today)
                        } catch (e: Exception) {
                            android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤", e)
                        }
                    }
                } else {
                    android.util.Log.d("MainActivity", "‚úÖ –í—Å–µ —Å—Ç–∞—Ç—É—Å—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è")
                }
                
                android.util.Log.d("MainActivity", "=== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–û–í TAKEN_TODAY –ó–ê–í–ï–†–®–ï–ù–û ===")
                
            } catch (e: Exception) {
                android.util.Log.e("MainActivity", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ takenToday", e)
                
                lifecycleScope.launch(Dispatchers.Main) {
                    android.widget.Toast.makeText(
                        this@MainActivity,
                        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤: ${e.message}",
                        android.widget.Toast.LENGTH_LONG
                    ).show()
                }
            }
        }
    }

}  