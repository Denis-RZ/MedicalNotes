package com.medicalnotes.app

import android.content.Context
import android.os.Bundle
import android.view.View
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.ViewModelProvider
import androidx.recyclerview.widget.LinearLayoutManager
import com.medicalnotes.app.adapters.MainMedicineAdapter
import com.medicalnotes.app.databinding.ActivityMainBinding
import com.medicalnotes.app.models.Medicine
import com.medicalnotes.app.repository.UserPreferencesRepository
import com.medicalnotes.app.utils.MedicineGroupingUtil
import com.medicalnotes.app.utils.MedicineStatus
import com.medicalnotes.app.viewmodels.MainViewModel
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import java.io.File
import java.time.LocalDate
import java.time.LocalDateTime

class MainActivity : AppCompatActivity() {

    private lateinit var binding: ActivityMainBinding
    private lateinit var viewModel: MainViewModel
    private lateinit var todayMedicineAdapter: MainMedicineAdapter
    private lateinit var userPreferencesRepository: UserPreferencesRepository

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        try {
            binding = ActivityMainBinding.inflate(layoutInflater)
            setContentView(binding.root)

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ViewModel –∏ Repository
            viewModel = ViewModelProvider(this)[MainViewModel::class.java]
            userPreferencesRepository = UserPreferencesRepository(this)

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
            setupViews()
            setupButtons()
            observeData()

            // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            viewModel.loadAllMedicines()
            loadTodayMedicines()
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "Error in onCreate", e)
            android.widget.Toast.makeText(this, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${e.message}", android.widget.Toast.LENGTH_LONG).show()
        }
    }

    private fun setupViews() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ RecyclerView
        todayMedicineAdapter = MainMedicineAdapter(
            onMedicineClick = { medicine -> takeMedicine(medicine) }
        )

        binding.recyclerViewTodayMedicines.apply {
            layoutManager = LinearLayoutManager(this@MainActivity)
            adapter = todayMedicineAdapter
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–≤—Ç–æ—Ä–∞
        binding.buttonRetry.setOnClickListener {
            loadTodayMedicines()
        }
    }

    private fun setupButtons() {
        // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
        binding.fabAddMedicine.setOnClickListener {
            val intent = android.content.Intent(this, AddMedicineActivity::class.java)
            startActivity(intent)
        }

        // –ö–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞–º–∏
        binding.buttonManageMedicines.setOnClickListener {
            val intent = android.content.Intent(this, MedicineManagerActivity::class.java)
            startActivity(intent)
        }

        // –ö–Ω–æ–ø–∫–∏ –≤ BottomAppBar
        binding.buttonManageMedicinesBottom.setOnClickListener {
            val intent = android.content.Intent(this, MedicineManagerActivity::class.java)
            startActivity(intent)
        }

        binding.buttonManageGroupsBottom.setOnClickListener {
            val intent = android.content.Intent(this, GroupManagementActivity::class.java)
            startActivity(intent)
        }

        binding.buttonSettingsBottom.setOnClickListener {
            val intent = android.content.Intent(this, SettingsActivity::class.java)
            startActivity(intent)
        }

        // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ª–æ–≥–æ–≤
        binding.buttonToggleLogs.setOnClickListener {
            toggleLogsVisibility()
        }

        // –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
        binding.buttonExportData.setOnClickListener {
            exportData()
        }

        // –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø
        binding.buttonTestGroups.setOnClickListener {
            testGroups()
        }

        // –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
        binding.buttonClearLogs.setOnClickListener {
            clearLogs()
        }
    }

    private fun observeData() {
        try {
            viewModel.todayMedicines.observe(this) { medicines ->
                if (medicines.isEmpty()) {
                    showEmptyState()
                    addLog("–ù–µ—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
                } else {
                    showContentState()
                    addLog("=== –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ü–ò–°–ö–ê –õ–ï–ö–ê–†–°–¢–í ===")
                    addLog("–ü–æ–ª—É—á–µ–Ω–æ –ª–µ–∫–∞—Ä—Å—Ç–≤: ${medicines.size}")
                    addLog("–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${LocalDateTime.now()}")
                    
                    var hasOverdueMedicines = false
                    
                    medicines.forEach { medicine ->
                        val status = com.medicalnotes.app.utils.DosageCalculator.getMedicineStatus(medicine)
                        addLog("–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è: ${medicine.name} - –°—Ç–∞—Ç—É—Å: $status")
                        addLog("  –í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞: ${medicine.time}")
                        addLog("  –ß–∞—Å—Ç–æ—Ç–∞: ${medicine.frequency}")
                        
                        if (status == MedicineStatus.OVERDUE) {
                            hasOverdueMedicines = true
                            addLog("‚ö†Ô∏è –ü–†–û–°–†–û–ß–ï–ù–û: ${medicine.name}")
                        } else if (status == MedicineStatus.UPCOMING) {
                            addLog("üìÖ –ü–†–ï–î–°–¢–û–ò–¢: ${medicine.name} - –≤—Ä–µ–º—è –µ—â–µ –Ω–µ –ø—Ä–∏—à–ª–æ")
                        } else if (status == MedicineStatus.TAKEN_TODAY) {
                            addLog("‚úÖ –ü–†–ò–ù–Ø–¢–û: ${medicine.name} - —É–∂–µ –ø—Ä–∏–Ω—è—Ç–æ —Å–µ–≥–æ–¥–Ω—è")
                        } else {
                            addLog("‚ùå –ù–ï –°–ï–ì–û–î–ù–Ø: ${medicine.name} - –Ω–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é")
                        }
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
                    val shouldShowGrouped = MedicineGroupingUtil.shouldShowGroupedCards(medicines, LocalDate.now())
                    addLog("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏: $shouldShowGrouped")
                    
                    if (shouldShowGrouped) {
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
                        val groupedItems = MedicineGroupingUtil.groupMedicinesByTime(medicines)
                        addLog("–°–æ–∑–¥–∞–Ω–æ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫: ${groupedItems.size}")
                        
                        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö –≤—Ä–µ–º–µ–Ω–∏
                        groupedItems.forEach { (time, timeMedicines) ->
                            if (timeMedicines.size > 1) {
                                addLog("–í—Ä–µ–º—è $time: ${timeMedicines.size} –ª–µ–∫–∞—Ä—Å—Ç–≤")
                            }
                        }
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ)
                        binding.recyclerViewTodayMedicines.adapter = todayMedicineAdapter
                        todayMedicineAdapter.submitList(medicines)
                        
                        addLog("–ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –æ–±—ã—á–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏")
                        addLog("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–¥–∞–ø—Ç–µ—Ä: MainMedicineAdapter")
                    } else {
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
                        binding.recyclerViewTodayMedicines.adapter = todayMedicineAdapter
                        todayMedicineAdapter.submitList(medicines)
                        
                        addLog("–ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –æ–±—ã—á–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏")
                        addLog("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–¥–∞–ø—Ç–µ—Ä: MainMedicineAdapter")
                    }
                }
            }
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "Error in observeData", e)
            android.widget.Toast.makeText(this, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", android.widget.Toast.LENGTH_SHORT).show()
        }
    }

    override fun onResume() {
        super.onResume()
        try {
            viewModel.loadAllMedicines()
            loadTodayMedicines()
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "Error in onResume", e)
            android.widget.Toast.makeText(this, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", android.widget.Toast.LENGTH_SHORT).show()
        }
    }

    private fun takeMedicine(medicine: Medicine) {
        CoroutineScope(Dispatchers.IO).launch {
            try {
                val updatedMedicine = medicine.copy(
                    takenToday = true,
                    isMissed = false
                )
                viewModel.updateMedicine(updatedMedicine)
                
                CoroutineScope(Dispatchers.Main).launch {
                    android.widget.Toast.makeText(
                        this@MainActivity,
                        "–õ–µ–∫–∞—Ä—Å—Ç–≤–æ ${medicine.name} –ø—Ä–∏–Ω—è—Ç–æ!",
                        android.widget.Toast.LENGTH_SHORT
                    ).show()
                }
            } catch (e: Exception) {
                CoroutineScope(Dispatchers.Main).launch {
                    android.widget.Toast.makeText(
                        this@MainActivity,
                        "–û—à–∏–±–∫–∞: ${e.message}",
                        android.widget.Toast.LENGTH_SHORT
                    ).show()
                }
            }
        }
    }

    private fun editMedicine(medicine: Medicine) {
        val intent = android.content.Intent(this, EditMedicineActivity::class.java).apply {
            putExtra("medicine_id", medicine.id)
        }
        startActivity(intent)
    }

    private fun deleteMedicine(medicine: Medicine) {
        android.app.AlertDialog.Builder(this)
            .setTitle("–£–¥–∞–ª–µ–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞")
            .setMessage("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ '${medicine.name}'?")
            .setPositiveButton("–£–¥–∞–ª–∏—Ç—å") { _, _ ->
                CoroutineScope(Dispatchers.IO).launch {
                    try {
                        viewModel.deleteMedicine(medicine.id)
                        CoroutineScope(Dispatchers.Main).launch {
                            android.widget.Toast.makeText(
                                this@MainActivity,
                                "–õ–µ–∫–∞—Ä—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–æ",
                                android.widget.Toast.LENGTH_SHORT
                            ).show()
                        }
                    } catch (e: Exception) {
                        CoroutineScope(Dispatchers.Main).launch {
                            android.widget.Toast.makeText(
                                this@MainActivity,
                                "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${e.message}",
                                android.widget.Toast.LENGTH_SHORT
                            ).show()
                        }
                    }
                }
            }
            .setNegativeButton("–û—Ç–º–µ–Ω–∞", null)
            .show()
    }

    private fun addLog(message: String) {
        val timestamp = LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("HH:mm:ss"))
        val logMessage = "[$timestamp] $message"
        
        binding.textViewLogs.append("$logMessage\n")
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –∫–æ–Ω—Ü—É
        val scrollAmount = binding.textViewLogs.layout.getLineTop(binding.textViewLogs.lineCount) - binding.textViewLogs.height
        if (scrollAmount > 0) {
            binding.textViewLogs.scrollTo(0, scrollAmount)
        }
    }

    private fun clearLogs() {
        binding.textViewLogs.text = ""
        addLog("=== –õ–û–ì–ò –û–ß–ò–©–ï–ù–´ ===")
    }

    private fun loadTodayMedicines() {
        showLoadingState()
        viewModel.loadTodayMedicines()
    }

    private fun showLoadingState() {
        binding.progressBarTodayMedicines.visibility = View.VISIBLE
        binding.recyclerViewTodayMedicines.visibility = View.GONE
        binding.layoutEmptyTodayMedicines.visibility = View.GONE
        binding.layoutErrorTodayMedicines.visibility = View.GONE
    }

    private fun showEmptyState() {
        binding.progressBarTodayMedicines.visibility = View.GONE
        binding.recyclerViewTodayMedicines.visibility = View.GONE
        binding.layoutEmptyTodayMedicines.visibility = View.VISIBLE
        binding.layoutErrorTodayMedicines.visibility = View.GONE
    }

    private fun showErrorState(errorMessage: String = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞") {
        binding.progressBarTodayMedicines.visibility = View.GONE
        binding.recyclerViewTodayMedicines.visibility = View.GONE
        binding.layoutEmptyTodayMedicines.visibility = View.GONE
        binding.layoutErrorTodayMedicines.visibility = View.VISIBLE
        binding.textErrorMessage.text = errorMessage
    }

    private fun showContentState() {
        binding.progressBarTodayMedicines.visibility = View.GONE
        binding.recyclerViewTodayMedicines.visibility = View.VISIBLE
        binding.layoutEmptyTodayMedicines.visibility = View.GONE
        binding.layoutErrorTodayMedicines.visibility = View.GONE
    }

    private fun toggleLogsVisibility() {
        if (binding.layoutLogs.visibility == View.VISIBLE) {
            binding.layoutLogs.visibility = View.GONE
        } else {
            binding.layoutLogs.visibility = View.VISIBLE
            addLog("=== –õ–û–ì–ò –í–ö–õ–Æ–ß–ï–ù–´ ===")
        }
    }

    private fun exportData() {
        CoroutineScope(Dispatchers.IO).launch {
            try {
                val medicines = viewModel.allMedicines.value ?: emptyList()
                val exportData = medicines.joinToString("\n") { medicine ->
                    "${medicine.name} - ${medicine.dosage} - ${medicine.time}"
                }
                
                val fileName = "medical_notes_export_${LocalDate.now()}.txt"
                val file = File(getExternalFilesDir(null), fileName)
                file.writeText(exportData)
                
                CoroutineScope(Dispatchers.Main).launch {
                    android.widget.Toast.makeText(
                        this@MainActivity,
                        "–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ $fileName",
                        android.widget.Toast.LENGTH_LONG
                    ).show()
                    addLog("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö: $fileName")
                }
            } catch (e: Exception) {
                CoroutineScope(Dispatchers.Main).launch {
                    android.widget.Toast.makeText(
                        this@MainActivity,
                        "–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${e.message}",
                        android.widget.Toast.LENGTH_SHORT
                    ).show()
                    addLog("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${e.message}")
                }
            }
        }
    }

    private fun testGroups() {
        addLog("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–†–£–ü–ü ===")
        val medicines = viewModel.allMedicines.value ?: emptyList()
        val groupedMedicines = medicines.filter { it.groupName.isNotEmpty() }
        
        addLog("–í—Å–µ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤: ${medicines.size}")
        addLog("–õ–µ–∫–∞—Ä—Å—Ç–≤ –≤ –≥—Ä—É–ø–ø–∞—Ö: ${groupedMedicines.size}")
        
        val groups = groupedMedicines.groupBy { it.groupName }
        groups.forEach { (groupName, groupMedicines) ->
            addLog("–ì—Ä—É–ø–ø–∞ '$groupName': ${groupMedicines.size} –ª–µ–∫–∞—Ä—Å—Ç–≤")
            groupMedicines.forEach { medicine ->
                addLog("  - ${medicine.name} (–ø–æ—Ä—è–¥–æ–∫: ${medicine.groupOrder})")
            }
        }
        
        android.widget.Toast.makeText(
            this,
            "–¢–µ—Å—Ç –≥—Ä—É–ø–ø –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.",
            android.widget.Toast.LENGTH_SHORT
        ).show()
    }
}  