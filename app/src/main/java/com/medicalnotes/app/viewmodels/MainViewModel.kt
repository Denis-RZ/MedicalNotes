package com.medicalnotes.app.viewmodels

import android.app.Application
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.viewModelScope
import com.medicalnotes.app.models.CustomButton
import com.medicalnotes.app.models.Medicine
import com.medicalnotes.app.repository.MedicineRepository
import com.medicalnotes.app.repository.CustomButtonRepository
import com.medicalnotes.app.utils.DosageCalculator
import com.medicalnotes.app.utils.GroupFixer
import kotlinx.coroutines.launch
import java.time.LocalDate

class MainViewModel(application: Application) : AndroidViewModel(application) {
    
    private val medicineRepository = MedicineRepository(application)
    private val customButtonRepository = CustomButtonRepository(application)
    
    private val _todayMedicines = MutableLiveData<List<Medicine>>()
    val todayMedicines: LiveData<List<Medicine>> = _todayMedicines
    
    private val _allMedicines = MutableLiveData<List<Medicine>>()
    val allMedicines: LiveData<List<Medicine>> = _allMedicines
    
    private val _customButtons = MutableLiveData<List<CustomButton>>()
    val customButtons: LiveData<List<CustomButton>> = _customButtons
    
    fun loadTodayMedicines() {
        android.util.Log.e("MainViewModel", "üöÄüöÄüöÄ –ù–ê–ß–ê–õ–û loadTodayMedicines() - –í–•–û–î –í –§–£–ù–ö–¶–ò–Æ üöÄüöÄüöÄ")
        android.util.Log.e("MainViewModel", "üìã MainViewModel: –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É...")
        viewModelScope.launch(kotlinx.coroutines.Dispatchers.IO) {
            try {
                android.util.Log.e("MainViewModel", "=== –ù–ê–ß–ê–õ–û loadTodayMedicines() –° –í–ê–õ–ò–î–ê–¶–ò–ï–ô –ì–†–£–ü–ü ===")
                // –î–û–ë–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º Log.e –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
                android.util.Log.e("MainViewModel", "üöÄüöÄüöÄ MainViewModel: –ù–ê–ß–ê–õ–û loadTodayMedicines() - –í–•–û–î –í –ö–û–†–û–£–¢–ò–ù–£ üöÄüöÄüöÄ")
            
            val allMedicines = medicineRepository.getAllMedicines()
            android.util.Log.d("MainViewModel", "=== –ó–ê–ì–†–£–ó–ö–ê –õ–ï–ö–ê–†–°–¢–í –ù–ê –°–ï–ì–û–î–ù–Ø ===")
            android.util.Log.d("MainViewModel", "–í—Å–µ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤ –≤ –±–∞–∑–µ: ${allMedicines.size}")
            
            val today = com.medicalnotes.app.utils.DateUtils.getCurrentDate()
            android.util.Log.d("MainViewModel", "–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞: $today")
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ì–†–£–ü–ü–û–í–´–• –ù–ï–°–û–ì–õ–ê–°–û–í–ê–ù–ù–û–°–¢–ï–ô
            android.util.Log.d("MainViewModel", "=== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ì–†–£–ü–ü–û–í–´–• –ù–ï–°–û–ì–õ–ê–°–û–í–ê–ù–ù–û–°–¢–ï–ô ===")
            val fixedMedicines = GroupFixer.fixGroupInconsistencies(allMedicines)
            android.util.Log.d("MainViewModel", "–õ–µ–∫–∞—Ä—Å—Ç–≤ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${fixedMedicines.size}")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            if (fixedMedicines != allMedicines) {
                android.util.Log.d("MainViewModel", "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
                fixedMedicines.forEach { medicine ->
                    medicineRepository.updateMedicine(medicine)
                }
                android.util.Log.d("MainViewModel", "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            }
            
            // –í–ê–õ–ò–î–ê–¶–ò–Ø –ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ì–†–£–ü–ü
            android.util.Log.d("MainViewModel", "=== –í–ê–õ–ò–î–ê–¶–ò–Ø –ì–†–£–ü–ü ===")
            val groupIds = fixedMedicines.mapNotNull { it.groupId }.distinct()
            android.util.Log.d("MainViewModel", "–ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø: ${groupIds.size}")
            
            groupIds.forEach { groupId ->
                android.util.Log.d("MainViewModel", "–ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—É $groupId")
                val groupMedicines = fixedMedicines.filter { it.groupId == groupId }
                android.util.Log.d("MainViewModel", "  - –õ–µ–∫–∞—Ä—Å—Ç–≤ –≤ –≥—Ä—É–ø–ø–µ: ${groupMedicines.size}")
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã
                val firstMedicine = groupMedicines.first()
                val isValid = firstMedicine.isGroupConsistent(groupMedicines)
                android.util.Log.d("MainViewModel", "  - –ì—Ä—É–ø–ø–∞ –≤–∞–ª–∏–¥–Ω–∞: $isValid")
                
                if (!isValid) {
                    android.util.Log.w("MainViewModel", "  - –ì—Ä—É–ø–ø–∞ $groupId –Ω–µ–≤–∞–ª–∏–¥–Ω–∞, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º...")
                    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ DataManager –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
                    // dataManager.fixGroupInconsistencies(groupId)
                }
            }
            
            fixedMedicines.forEach { medicine ->
                android.util.Log.d("MainViewModel", "–õ–µ–∫–∞—Ä—Å—Ç–≤–æ: ${medicine.name}")
                android.util.Log.d("MainViewModel", "  - –ê–∫—Ç–∏–≤–Ω–æ: ${medicine.isActive}")
                android.util.Log.d("MainViewModel", "  - –ß–∞—Å—Ç–æ—Ç–∞: ${medicine.frequency}")
                android.util.Log.d("MainViewModel", "  - –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ${medicine.startDate}")
                android.util.Log.d("MainViewModel", "  - –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–∏–µ–º: ${medicine.lastTakenTime}")
                android.util.Log.d("MainViewModel", "  - takenToday: ${medicine.takenToday}")
                android.util.Log.d("MainViewModel", "  - groupId: ${medicine.groupId}")
                android.util.Log.d("MainViewModel", "  - groupName: ${medicine.groupName}")
                android.util.Log.d("MainViewModel", "  - groupOrder: ${medicine.groupOrder}")
                android.util.Log.d("MainViewModel", "  - groupStartDate: ${medicine.groupStartDate}")
                android.util.Log.d("MainViewModel", "  - groupFrequency: ${medicine.groupFrequency}")
                android.util.Log.d("MainViewModel", "  - isValidGroup(): ${medicine.isValidGroup()}")
            }
            
            android.util.Log.d("MainViewModel", "=== –í–´–ó–û–í DosageCalculator.getActiveMedicinesForDate ===")
            android.util.Log.e("MainViewModel", "üìã MainViewModel: –í—ã–∑—ã–≤–∞–µ–º DosageCalculator.getActiveMedicinesForDate")
            val todayMedicines = DosageCalculator.getActiveMedicinesForDate(fixedMedicines, today)
            android.util.Log.d("MainViewModel", "–õ–µ–∫–∞—Ä—Å—Ç–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: ${todayMedicines.size}")
            android.util.Log.e("MainViewModel", "üìã MainViewModel: DosageCalculator –≤–µ—Ä–Ω—É–ª ${todayMedicines.size} –ª–µ–∫–∞—Ä—Å—Ç–≤")
            
            // –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
            todayMedicines.forEach { medicine ->
                android.util.Log.d("MainViewModel", "‚úÖ –í —Å–ø–∏—Å–∫–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: ${medicine.name}")
                android.util.Log.d("MainViewModel", "  - –í—Ä–µ–º—è: ${medicine.time}")
                android.util.Log.d("MainViewModel", "  - takenToday: ${medicine.takenToday}")
                android.util.Log.d("MainViewModel", "  - isOverdue: ${medicine.isOverdue}")
            }
            
            //  –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if (todayMedicines.isEmpty()) {
                android.util.Log.d("MainViewModel", " –°–ü–ò–°–û–ö –ü–£–°–¢–û–ô - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ:")
                fixedMedicines.forEach { medicine ->
                    android.util.Log.d("MainViewModel", "–ü—Ä–æ–≤–µ—Ä—è–µ–º: ${medicine.name}")
                    android.util.Log.d("MainViewModel", "  - isActive: ${medicine.isActive}")
                    android.util.Log.d("MainViewModel", "  - shouldTakeMedicine: ${DosageCalculator.shouldTakeMedicine(medicine, today, fixedMedicines)}")
                    android.util.Log.d("MainViewModel", "  - takenToday: ${medicine.takenToday}")
                    android.util.Log.d("MainViewModel", "  - lastTakenTime: ${medicine.lastTakenTime}")
                    android.util.Log.d("MainViewModel", "  - startDate: ${medicine.startDate}")
                    android.util.Log.d("MainViewModel", "  - frequency: ${medicine.frequency}")
                }
            }
            
            todayMedicines.forEach { medicine ->
                android.util.Log.d("MainViewModel", "–°–µ–≥–æ–¥–Ω—è: ${medicine.name}")
                android.util.Log.d("MainViewModel", "  - –í—Ä–µ–º—è: ${medicine.time}")
                android.util.Log.d("MainViewModel", "  - –ü—Ä–∏–Ω—è—Ç–æ —Å–µ–≥–æ–¥–Ω—è: ${medicine.takenToday}")
                android.util.Log.d("MainViewModel", "  - –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ${medicine.startDate}")
            }
            
            android.util.Log.d("MainViewModel", "=== –£–°–¢–ê–ù–û–í–ö–ê –ó–ù–ê–ß–ï–ù–ò–Ø –í LiveData ===")
            android.util.Log.d("MainViewModel", "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ: ${todayMedicines.size} –ª–µ–∫–∞—Ä—Å—Ç–≤")
            android.util.Log.e("MainViewModel", "üìã MainViewModel: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ LiveData ${todayMedicines.size} –ª–µ–∫–∞—Ä—Å—Ç–≤")
            _todayMedicines.postValue(todayMedicines)
            android.util.Log.d("MainViewModel", "=== –ó–ù–ê–ß–ï–ù–ò–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û ===")
            android.util.Log.e("MainViewModel", "üìã MainViewModel: LiveData –æ–±–Ω–æ–≤–ª–µ–Ω")
            android.util.Log.e("MainViewModel", "‚úÖ‚úÖ‚úÖ –ó–ê–í–ï–†–®–ï–ù–ò–ï loadTodayMedicines() - –§–£–ù–ö–¶–ò–Ø –ó–ê–ö–û–ù–ß–ï–ù–ê ‚úÖ‚úÖ‚úÖ")
            android.util.Log.e("MainViewModel", "‚úÖ‚úÖ‚úÖ MainViewModel: –ó–ê–í–ï–†–®–ï–ù–ò–ï loadTodayMedicines() - –§–£–ù–ö–¶–ò–Ø –ó–ê–ö–û–ù–ß–ï–ù–ê ‚úÖ‚úÖ‚úÖ")
            } catch (e: Exception) {
                android.util.Log.e("MainViewModel", "‚ùå –û–®–ò–ë–ö–ê –í loadTodayMedicines()", e)
            }
        }
    }
    
    fun loadAllMedicines() {
        viewModelScope.launch(kotlinx.coroutines.Dispatchers.IO) {
            val medicines = medicineRepository.getAllMedicines()
            _allMedicines.postValue(medicines)
        }
    }
    
    fun loadCustomButtons() {
        viewModelScope.launch(kotlinx.coroutines.Dispatchers.IO) {
            val buttons = customButtonRepository.getAllButtons()
            _customButtons.postValue(buttons.sortedBy { it.order })
        }
    }
    
    fun markMedicineAsTaken(medicineId: Long) {
        viewModelScope.launch {
            android.util.Log.d("MainViewModel", "=== –ù–ê–ß–ê–õ–û markMedicineAsTaken ===")
            android.util.Log.d("MainViewModel", "ID –ª–µ–∫–∞—Ä—Å—Ç–≤–∞: $medicineId")
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –∫—ç—à –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            _todayMedicines.postValue(emptyList())
            android.util.Log.d("MainViewModel", "–ö—ç—à –æ—á–∏—â–µ–Ω")
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            medicineRepository.markMedicineAsTaken(medicineId)
            android.util.Log.d("MainViewModel", "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ repository")
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            loadTodayMedicines()
            android.util.Log.d("MainViewModel", "–õ–µ–∫–∞—Ä—Å—Ç–≤–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        }
    }
    
    fun markMedicineAsSkipped(medicineId: Long) {
        viewModelScope.launch {
            medicineRepository.markMedicineAsSkipped(medicineId)
            loadTodayMedicines()
        }
    }
    
    fun markAllMedicinesAsTaken() {
        viewModelScope.launch {
            val todayMedicines = _todayMedicines.value ?: return@launch
            todayMedicines.forEach { medicine ->
                medicineRepository.markMedicineAsTaken(medicine.id)
            }
            loadTodayMedicines()
        }
    }
    
    fun insertDefaultButtons(buttons: List<CustomButton>) {
        viewModelScope.launch {
            customButtonRepository.insertButtons(buttons)
            loadCustomButtons()
        }
    }
    
    fun updateButton(button: CustomButton) {
        viewModelScope.launch {
            customButtonRepository.updateButton(button)
            loadCustomButtons()
        }
    }
    
    fun deleteButton(buttonId: Long) {
        viewModelScope.launch {
            customButtonRepository.deleteButton(buttonId)
            loadCustomButtons()
        }
    }
    
    fun deleteMedicine(medicineId: Long) {
        android.util.Log.d("MainViewModel", "=== –ù–ê–ß–ê–õ–û –£–î–ê–õ–ï–ù–ò–Ø –õ–ï–ö–ê–†–°–¢–í–ê ===")
        android.util.Log.d("MainViewModel", "ID –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: $medicineId")
        viewModelScope.launch {
            try {
                android.util.Log.d("MainViewModel", "–í—ã–∑—ã–≤–∞–µ–º medicineRepository.deleteMedicine")
                val success = medicineRepository.deleteMedicine(medicineId)
                android.util.Log.d("MainViewModel", "–†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ repository: $success")
                
                if (success) {
                    android.util.Log.d("MainViewModel", "–õ–µ–∫–∞—Ä—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Ñ–∞–π–ª–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏")
                    android.util.Log.d("MainViewModel", "–í—ã–∑—ã–≤–∞–µ–º loadTodayMedicines")
                    loadTodayMedicines()
                    android.util.Log.d("MainViewModel", "–í—ã–∑—ã–≤–∞–µ–º loadAllMedicines")
                    loadAllMedicines()
                    android.util.Log.d("MainViewModel", "–°–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                } else {
                    android.util.Log.e("MainViewModel", "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ —Å ID: $medicineId - repository –≤–µ—Ä–Ω—É–ª false")
                }
            } catch (e: Exception) {
                android.util.Log.e("MainViewModel", "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞", e)
            }
        }
    }
    
    fun updateMedicine(medicine: Medicine) {
        viewModelScope.launch {
            android.util.Log.d("MainViewModel", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞: ${medicine.name}")
            android.util.Log.d("MainViewModel", "–°—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω—è—Ç–∏—è: lastTakenTime=${medicine.lastTakenTime}, takenToday=${medicine.takenToday}")
            
            medicineRepository.updateMedicine(medicine)
            loadTodayMedicines()
            loadAllMedicines()
        }
    }
} 