package com.medicalnotes.app.viewmodels

import android.app.Application
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.viewModelScope
import com.medicalnotes.app.models.CustomButton
import com.medicalnotes.app.models.Medicine
import com.medicalnotes.app.repository.MedicineRepository
import com.medicalnotes.app.repository.CustomButtonRepository
import com.medicalnotes.app.utils.DosageCalculator
import com.medicalnotes.app.utils.GroupFixer
import com.medicalnotes.app.utils.StatusManager
import kotlinx.coroutines.launch
import java.time.LocalDate
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext

class MainViewModel(application: Application) : AndroidViewModel(application) {
    
    private val medicineRepository = MedicineRepository(application)
    private val customButtonRepository = CustomButtonRepository(application)
    
    private val _todayMedicines = MutableLiveData<List<Medicine>>()
    val todayMedicines: LiveData<List<Medicine>> = _todayMedicines
    
    private val _allMedicines = MutableLiveData<List<Medicine>>()
    val allMedicines: LiveData<List<Medicine>> = _allMedicines
    
    private val _customButtons = MutableLiveData<List<CustomButton>>()
    val customButtons: LiveData<List<CustomButton>> = _customButtons
    
    /**
     * –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ú–ï–¢–û–î: –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —Ç–∞–∫ –∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
     */
    fun loadMedicinesForDate(date: LocalDate) {
        viewModelScope.launch(Dispatchers.IO) {
            try {
                android.util.Log.d("MainViewModel", "üöÄ === –ù–ê–ß–ê–õ–û loadMedicinesForDate($date) ===")
                
                val allMedicines = medicineRepository.getAllMedicines()
                android.util.Log.d("MainViewModel", "–ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤—Å–µ—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤: ${allMedicines.size}")

                // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                android.util.Log.d("MainViewModel", "–ü—Ä–∏–º–µ–Ω—è–µ–º GroupFixer –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≥—Ä—É–ø–ø...")
                val fixedMedicines = GroupFixer.fixGroupInconsistencies(allMedicines)

                // –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –ø–æ–ª–µ–π ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                var groupChanges = false
                for (i in allMedicines.indices) {
                    val original = allMedicines[i]
                    val fixed = fixedMedicines[i]
                    if (original.groupId != fixed.groupId || original.groupStartDate != fixed.groupStartDate) {
                        groupChanges = true
                        break
                    }
                }

                val medicinesForCalculation: List<com.medicalnotes.app.models.Medicine> = if (groupChanges) {
                    android.util.Log.d("MainViewModel", "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                    fixedMedicines.forEach { medicineRepository.updateMedicine(it) }
                    val reloaded = medicineRepository.getAllMedicines()
                    android.util.Log.d("MainViewModel", "–ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –ª–µ–∫–∞—Ä—Å—Ç–≤ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${reloaded.size}")
                    reloaded
                } else {
                    android.util.Log.d("MainViewModel", "–ò–∑–º–µ–Ω–µ–Ω–∏–π –≥—Ä—É–ø–ø –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
                    allMedicines
                }

                // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã (–∫–∞–∫ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ)
                val activeMedicines = DosageCalculator.getActiveMedicinesForDateForCalendar(medicinesForCalculation, date)
                android.util.Log.d("MainViewModel", "–ê–∫—Ç–∏–≤–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤ –¥–ª—è $date: ${activeMedicines.size}")

                // –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                withContext(Dispatchers.Main) {
                    _todayMedicines.value = activeMedicines
                    android.util.Log.d("MainViewModel", "UI –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –¥–∞—Ç—ã $date: ${activeMedicines.size} –ª–µ–∫–∞—Ä—Å—Ç–≤")
                }

            } catch (e: Exception) {
                android.util.Log.e("MainViewModel", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–µ–∫–∞—Ä—Å—Ç–≤ –¥–ª—è –¥–∞—Ç—ã $date", e)
                withContext(Dispatchers.Main) {
                    _todayMedicines.value = emptyList()
                }
            }
        }
    }
    
    fun loadTodayMedicines() {
        viewModelScope.launch(Dispatchers.IO) {
            try {
                android.util.Log.d("MainViewModel", "üöÄ === –ù–ê–ß–ê–õ–û loadTodayMedicines() ===")
                android.util.Log.d("MainViewModel", "–¢–µ–∫—É—â–∏–π –ø–æ—Ç–æ–∫: ${Thread.currentThread().name}")
                
                val allMedicines = medicineRepository.getAllMedicines()
                android.util.Log.d("MainViewModel", "–ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤—Å–µ—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤: ${allMedicines.size}")

                // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                android.util.Log.d("MainViewModel", "–ü—Ä–∏–º–µ–Ω—è–µ–º GroupFixer...")
                val fixedMedicines = GroupFixer.fixGroupInconsistencies(allMedicines)
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                android.util.Log.d("MainViewModel", "=== –ü–†–û–í–ï–†–ö–ê –ò–ó–ú–ï–ù–ï–ù–ò–ô –ì–†–£–ü–ü ===")
                var groupChanges = false
                for (i in allMedicines.indices) {
                    val original = allMedicines[i]
                    val fixed = fixedMedicines[i]
                    if (original.groupId != fixed.groupId || original.groupStartDate != fixed.groupStartDate) {
                        android.util.Log.d("MainViewModel", "–ò–ó–ú–ï–ù–ï–ù–ò–ï –ì–†–£–ü–ü–´: ${original.name}")
                        android.util.Log.d("MainViewModel", "  - groupId: ${original.groupId} -> ${fixed.groupId}")
                        android.util.Log.d("MainViewModel", "  - groupStartDate: ${original.groupStartDate} -> ${fixed.groupStartDate}")
                        groupChanges = true
                    }
                }

                if (groupChanges) {
                    android.util.Log.d("MainViewModel", "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
                    fixedMedicines.forEach { medicine ->
                        medicineRepository.updateMedicine(medicine)
                    }
                    android.util.Log.d("MainViewModel", "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
                } else {
                    android.util.Log.d("MainViewModel", "–ò–∑–º–µ–Ω–µ–Ω–∏–π –≥—Ä—É–ø–ø –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
                }

                // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
                val updatedMedicines = medicineRepository.getAllMedicines()
                android.util.Log.d("MainViewModel", "–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: ${updatedMedicines.size}")

                // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è
                val today = LocalDate.now()
                android.util.Log.d("MainViewModel", "–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞: $today")
                
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–ª—è —ç–∫—Ä–∞–Ω–∞ ¬´–õ–µ–∫–∞—Ä—Å—Ç–≤–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è¬ª –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ,
                // –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å —Å–µ–≥–æ–¥–Ω—è –ò –µ—â—ë –Ω–µ –ø—Ä–∏–Ω—è—Ç—ã (takenToday = false)
                val medicinesForToday = DosageCalculator.getActiveMedicinesForDate(updatedMedicines, today)
                android.util.Log.d("MainViewModel", "–ê–∫—Ç–∏–≤–Ω—ã—Ö (–Ω–µ –ø—Ä–∏–Ω—è—Ç—ã—Ö) –ª–µ–∫–∞—Ä—Å—Ç–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: ${medicinesForToday.size}")
                android.util.Log.d("MainViewModel", "–õ–µ–∫–∞—Ä—Å—Ç–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è: ${medicinesForToday.size}")

                // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                medicinesForToday.forEach { medicine ->
                    android.util.Log.d("MainViewModel", "–õ–ï–ö–ê–†–°–¢–í–û –î–õ–Ø –°–ï–ì–û–î–ù–Ø: ${medicine.name}")
                    android.util.Log.d("MainViewModel", "  - groupId: ${medicine.groupId}")
                    android.util.Log.d("MainViewModel", "  - groupStartDate: ${medicine.groupStartDate}")
                    android.util.Log.d("MainViewModel", "  - groupOrder: ${medicine.groupOrder}")
                    android.util.Log.d("MainViewModel", "  - takenToday: ${medicine.takenToday}")
                    android.util.Log.d("MainViewModel", "  - isOverdue: ${DosageCalculator.isMedicineOverdue(medicine)}")
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                withContext(Dispatchers.Main) {
                    android.util.Log.d("MainViewModel", "=== –û–ë–ù–û–í–õ–ï–ù–ò–ï UI ===")
                    android.util.Log.d("MainViewModel", "–õ–µ–∫–∞—Ä—Å—Ç–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${medicinesForToday.size}")
                    android.util.Log.d("MainViewModel", "–ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ LiveData: ${_todayMedicines.value?.size ?: 0} –ª–µ–∫–∞—Ä—Å—Ç–≤")
                    
                    _todayMedicines.value = medicinesForToday
                    
                    android.util.Log.d("MainViewModel", "–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ LiveData: ${_todayMedicines.value?.size ?: 0} –ª–µ–∫–∞—Ä—Å—Ç–≤")
                    android.util.Log.d("MainViewModel", "UI –æ–±–Ω–æ–≤–ª–µ–Ω: ${medicinesForToday.size} –ª–µ–∫–∞—Ä—Å—Ç–≤")
                    
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                    medicinesForToday.forEach { medicine ->
                        android.util.Log.d("MainViewModel", "–û–¢–û–ë–†–ê–ñ–ê–ï–¢–°–Ø: ${medicine.name} (takenToday: ${medicine.takenToday})")
                    }
                }

            } catch (e: Exception) {
                android.util.Log.e("MainViewModel", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–µ–∫–∞—Ä—Å—Ç–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", e)
                withContext(Dispatchers.Main) {
                    _todayMedicines.value = emptyList()
                }
            }
        }
    }
    
    fun loadAllMedicines() {
        viewModelScope.launch(kotlinx.coroutines.Dispatchers.IO) {
            val medicines = medicineRepository.getAllMedicines()
            _allMedicines.postValue(medicines)
        }
    }
    
    fun loadCustomButtons() {
        viewModelScope.launch(kotlinx.coroutines.Dispatchers.IO) {
            val buttons = customButtonRepository.getAllButtons()
            _customButtons.postValue(buttons.sortedBy { it.order })
        }
    }
    
    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º StatusManager –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∫–∞–∫ –ø—Ä–∏–Ω—è—Ç–æ–≥–æ
     */
    fun markMedicineAsTaken(medicineId: Long) {
        viewModelScope.launch {
            android.util.Log.d("MainViewModel", "=== –ù–ê–ß–ê–õ–û markMedicineAsTaken ===")
            android.util.Log.d("MainViewModel", "ID –ª–µ–∫–∞—Ä—Å—Ç–≤–∞: $medicineId")
            
            // –ü–æ–ª—É—á–∞–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–æ
            val medicine = medicineRepository.getMedicineById(medicineId)
            if (medicine != null) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º StatusManager –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏
                val updatedMedicine = StatusManager.markAsTaken(medicine)
                medicineRepository.updateMedicine(updatedMedicine)
                android.util.Log.d("MainViewModel", "–õ–µ–∫–∞—Ä—Å—Ç–≤–æ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–∏–Ω—è—Ç–æ–µ —á–µ—Ä–µ–∑ StatusManager")
            }
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            loadMedicinesForDate(LocalDate.now())
            android.util.Log.d("MainViewModel", "–õ–µ–∫–∞—Ä—Å—Ç–≤–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        }
    }
    
    fun markMedicineAsSkipped(medicineId: Long) {
        viewModelScope.launch {
            medicineRepository.markMedicineAsSkipped(medicineId)
            loadMedicinesForDate(LocalDate.now())
        }
    }
    
    fun markAllMedicinesAsTaken() {
        viewModelScope.launch {
            val todayMedicines = _todayMedicines.value ?: return@launch
            todayMedicines.forEach { medicine ->
                medicineRepository.markMedicineAsTaken(medicine.id)
            }
            loadMedicinesForDate(LocalDate.now())
        }
    }
    
    fun insertDefaultButtons(buttons: List<CustomButton>) {
        viewModelScope.launch {
            customButtonRepository.insertButtons(buttons)
            loadCustomButtons()
        }
    }
    
    fun updateButton(button: CustomButton) {
        viewModelScope.launch {
            customButtonRepository.updateButton(button)
            loadCustomButtons()
        }
    }
    
    fun deleteButton(buttonId: Long) {
        viewModelScope.launch {
            customButtonRepository.deleteButton(buttonId)
            loadCustomButtons()
        }
    }
    
    fun deleteMedicine(medicineId: Long) {
        android.util.Log.d("MainViewModel", "=== –ù–ê–ß–ê–õ–û –£–î–ê–õ–ï–ù–ò–Ø –õ–ï–ö–ê–†–°–¢–í–ê ===")
        android.util.Log.d("MainViewModel", "ID –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: $medicineId")
        viewModelScope.launch {
            try {
                android.util.Log.d("MainViewModel", "–í—ã–∑—ã–≤–∞–µ–º medicineRepository.deleteMedicine")
                val success = medicineRepository.deleteMedicine(medicineId)
                android.util.Log.d("MainViewModel", "–†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ repository: $success")
                
                if (success) {
                    android.util.Log.d("MainViewModel", "–õ–µ–∫–∞—Ä—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Ñ–∞–π–ª–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏")
                    android.util.Log.d("MainViewModel", "–í—ã–∑—ã–≤–∞–µ–º loadMedicinesForDate")
                    loadMedicinesForDate(LocalDate.now())
                    android.util.Log.d("MainViewModel", "–í—ã–∑—ã–≤–∞–µ–º loadAllMedicines")
                    loadAllMedicines()
                    android.util.Log.d("MainViewModel", "–°–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                } else {
                    android.util.Log.e("MainViewModel", "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ —Å ID: $medicineId - repository –≤–µ—Ä–Ω—É–ª false")
                }
            } catch (e: Exception) {
                android.util.Log.e("MainViewModel", "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞", e)
            }
        }
    }
    
    fun updateMedicine(medicine: Medicine) {
        viewModelScope.launch {
            try {
                android.util.Log.d("MainViewModel", "=== –û–ë–ù–û–í–õ–ï–ù–ò–ï –õ–ï–ö–ê–†–°–¢–í–ê ===")
                android.util.Log.d("MainViewModel", "–õ–µ–∫–∞—Ä—Å—Ç–≤–æ: ${medicine.name}")
                android.util.Log.d("MainViewModel", "ID: ${medicine.id}")
                android.util.Log.d("MainViewModel", "takenToday: ${medicine.takenToday}")
                android.util.Log.d("MainViewModel", "lastTakenTime: ${medicine.lastTakenTime}")
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
                val success = medicineRepository.updateMedicine(medicine)
                android.util.Log.d("MainViewModel", "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏: $success")
                
                if (success) {
                    android.util.Log.d("MainViewModel", "‚úì –õ–µ–∫–∞—Ä—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏")
                    
                    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–∫–∏
                    android.util.Log.d("MainViewModel", "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...")
                    loadMedicinesForDate(LocalDate.now())
                    android.util.Log.d("MainViewModel", "‚úì –°–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω")
                    
                    android.util.Log.d("MainViewModel", "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤...")
                    loadAllMedicines()
                    android.util.Log.d("MainViewModel", "‚úì –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω")
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏—Å—á–µ–∑–ª–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                    val currentTodayMedicines = _todayMedicines.value ?: emptyList()
                    val medicineStillInList = currentTodayMedicines.any { it.id == medicine.id }
                    
                    if (medicineStillInList && medicine.takenToday) {
                        android.util.Log.w("MainViewModel", "‚ö†Ô∏è –õ–µ–∫–∞—Ä—Å—Ç–≤–æ –≤—Å–µ –µ—â–µ –≤ —Å–ø–∏—Å–∫–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, —Ö–æ—Ç—è takenToday = true")
                        android.util.Log.w("MainViewModel", "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫...")
                        loadMedicinesForDate(LocalDate.now())
                    } else {
                        android.util.Log.d("MainViewModel", "‚úì –õ–µ–∫–∞—Ä—Å—Ç–≤–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                    }
                } else {
                    android.util.Log.e("MainViewModel", "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏")
                }
                
                android.util.Log.d("MainViewModel", "=== –û–ë–ù–û–í–õ–ï–ù–ò–ï –õ–ï–ö–ê–†–°–¢–í–ê –ó–ê–í–ï–†–®–ï–ù–û ===")
                
            } catch (e: Exception) {
                android.util.Log.e("MainViewModel", "‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞", e)
            }
        }
    }
} 