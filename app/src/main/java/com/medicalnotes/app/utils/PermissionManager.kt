package com.medicalnotes.app.utils

import android.Manifest
import android.app.Activity
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.net.Uri
import android.os.Build
import android.provider.Settings
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import androidx.fragment.app.FragmentActivity

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è MedicalNotes
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
 */
object PermissionManager {
    
    // –ö–æ–¥—ã –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    private const val REQUEST_NOTIFICATION_PERMISSION = 1001
    private const val REQUEST_FOREGROUND_SERVICE_PERMISSION = 1002
    private const val REQUEST_SYSTEM_ALERT_WINDOW_PERMISSION = 1003
    private const val REQUEST_IGNORE_BATTERY_OPTIMIZATION = 1004
    
    // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    private val REQUIRED_PERMISSIONS = mutableListOf<String>().apply {
        add(Manifest.permission.VIBRATE)
        add(Manifest.permission.RECEIVE_BOOT_COMPLETED)
        add(Manifest.permission.SCHEDULE_EXACT_ALARM)
        add(Manifest.permission.USE_EXACT_ALARM)
        add(Manifest.permission.WAKE_LOCK)
        add(Manifest.permission.FOREGROUND_SERVICE)
        add(Manifest.permission.FOREGROUND_SERVICE_HEALTH)
        add(Manifest.permission.USE_FULL_SCREEN_INTENT)
        
        // –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è Android 13+
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            add(Manifest.permission.POST_NOTIFICATIONS)
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
     */
    fun checkAllPermissions(context: Context): PermissionStatus {
        android.util.Log.d("PermissionManager", "üîç –ù–ê–ß–ê–õ–û –ü–†–û–í–ï–†–ö–ò –†–ê–ó–†–ï–®–ï–ù–ò–ô")
        
        val status = PermissionStatus()
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        android.util.Log.d("PermissionManager", "üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º ${REQUIRED_PERMISSIONS.size} –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")
        for (permission in REQUIRED_PERMISSIONS) {
            val isGranted = ContextCompat.checkSelfPermission(context, permission) == PackageManager.PERMISSION_GRANTED
            status.permissions[permission] = isGranted
            
            android.util.Log.d("PermissionManager", "  ${if (isGranted) "‚úÖ" else "‚ùå"} $permission: ${if (isGranted) "–ü–†–ï–î–û–°–¢–ê–í–õ–ï–ù–û" else "–û–¢–°–£–¢–°–¢–í–£–ï–¢"}")
            
            if (!isGranted) {
                status.missingPermissions.add(permission)
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        android.util.Log.d("PermissionManager", "üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
        
        status.systemAlertWindowGranted = Settings.canDrawOverlays(context)
        android.util.Log.d("PermissionManager", "  ${if (status.systemAlertWindowGranted) "‚úÖ" else "‚ùå"} System Alert Window: ${if (status.systemAlertWindowGranted) "–†–ê–ó–†–ï–®–ï–ù–û" else "–ó–ê–ü–†–ï–©–ï–ù–û"}")
        
        status.notificationsEnabled = areNotificationsEnabled(context)
        android.util.Log.d("PermissionManager", "  ${if (status.notificationsEnabled) "‚úÖ" else "‚ùå"} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${if (status.notificationsEnabled) "–í–ö–õ–Æ–ß–ï–ù–´" else "–û–¢–ö–õ–Æ–ß–ï–ù–´"}")
        
        status.batteryOptimizationIgnored = isBatteryOptimizationIgnored(context)
        android.util.Log.d("PermissionManager", "  ${if (status.batteryOptimizationIgnored) "‚úÖ" else "‚ùå"} –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞—Ç–∞—Ä–µ–∏: ${if (status.batteryOptimizationIgnored) "–û–¢–ö–õ–Æ–ß–ï–ù–ê" else "–í–ö–õ–Æ–ß–ï–ù–ê"}")
        
        android.util.Log.d("PermissionManager", "üìä –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°:")
        android.util.Log.d("PermissionManager", "  –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: ${status.permissions.size - status.missingPermissions.size}/${status.permissions.size}")
        android.util.Log.d("PermissionManager", "  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ: ${status.missingPermissions}")
        android.util.Log.d("PermissionManager", "  –í—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ: ${status.isAllGranted()}")
        
        return status
    }
    
    /**
     * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
     */
    fun requestMissingPermissions(activity: FragmentActivity, onComplete: (PermissionStatus) -> Unit) {
        android.util.Log.d("PermissionManager", "üöÄ –ù–ê–ß–ê–õ–û –ó–ê–ü–†–û–°–ê –†–ê–ó–†–ï–®–ï–ù–ò–ô")
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ activity –≥–æ—Ç–æ–≤–∞
            if (activity.isFinishing || activity.isDestroyed) {
                android.util.Log.w("PermissionManager", "‚ö†Ô∏è Activity –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")
                onComplete(checkAllPermissions(activity))
                return
            }
            
            android.util.Log.d("PermissionManager", "üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")
            val status = checkAllPermissions(activity)
            
            if (status.isAllGranted()) {
                android.util.Log.d("PermissionManager", "‚úÖ –í—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —É–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã - –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º")
                onComplete(status)
                return
            }
            
            android.util.Log.d("PermissionManager", "üîß –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:")
            android.util.Log.d("PermissionManager", "  –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: ${status.missingPermissions}")
            android.util.Log.d("PermissionManager", "  System Alert Window: ${if (!status.systemAlertWindowGranted) "–ù–£–ñ–ù–û" else "–û–ö"}")
            android.util.Log.d("PermissionManager", "  –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${if (!status.notificationsEnabled) "–ù–£–ñ–ù–û" else "–û–ö"}")
            android.util.Log.d("PermissionManager", "  –ë–∞—Ç–∞—Ä–µ—è: ${if (!status.batteryOptimizationIgnored) "–ù–£–ñ–ù–û" else "–û–ö"}")
            
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            if (status.missingPermissions.isNotEmpty()) {
                android.util.Log.d("PermissionManager", "üì± –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ${status.missingPermissions.size} –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")
                ActivityCompat.requestPermissions(
                    activity,
                    status.missingPermissions.toTypedArray(),
                    REQUEST_NOTIFICATION_PERMISSION
                )
            } else {
                android.util.Log.d("PermissionManager", "üì± –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —É–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã")
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            activity.runOnUiThread {
                try {
                    android.util.Log.d("PermissionManager", "‚è∞ –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ–∫–∞–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π —á–µ—Ä–µ–∑ 500–º—Å")
                    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UI
                    android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({
                        if (!activity.isFinishing && !activity.isDestroyed) {
                            android.util.Log.d("PermissionManager", "üìñ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")
                            showSpecialPermissionsInstructions(activity, status)
                        } else {
                            android.util.Log.w("PermissionManager", "‚ö†Ô∏è Activity –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∫–∞–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")
                        }
                    }, 500)
                } catch (e: Exception) {
                    android.util.Log.e("PermissionManager", "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π", e)
                }
            }
            
            android.util.Log.d("PermissionManager", "‚úÖ –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω")
            onComplete(status)
        } catch (e: Exception) {
            android.util.Log.e("PermissionManager", "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π", e)
            onComplete(checkAllPermissions(activity))
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
     */
    private fun showSpecialPermissionsInstructions(activity: FragmentActivity, status: PermissionStatus) {
        val instructions = mutableListOf<String>()
        
        if (!status.systemAlertWindowGranted) {
            instructions.add("‚Ä¢ –†–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–∫–∞–∑ –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
        }
        
        if (!status.notificationsEnabled) {
            instructions.add("‚Ä¢ –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        }
        
        if (!status.batteryOptimizationIgnored) {
            instructions.add("‚Ä¢ –û—Ç–∫–ª—é—á–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –±–∞—Ç–∞—Ä–µ–∏ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        }
        
        if (instructions.isNotEmpty()) {
            showPermissionInstructionsDialog(activity, instructions)
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
     */
    private fun showPermissionInstructionsDialog(activity: FragmentActivity, instructions: List<String>) {
        try {
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è activity
            if (activity.isFinishing || activity.isDestroyed) {
                android.util.Log.w("PermissionManager", "Activity –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∫–∞–∑ –¥–∏–∞–ª–æ–≥–∞")
                return
            }
            
            val message = "–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n\n" + 
                         instructions.joinToString("\n") + 
                         "\n\n–ù–∞–∂–º–∏—Ç–µ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."
            
            androidx.appcompat.app.AlertDialog.Builder(activity)
                .setTitle("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")
                .setMessage(message)
                .setPositiveButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏") { _, _ ->
                    try {
                        openAppSettings(activity)
                    } catch (e: Exception) {
                        android.util.Log.e("PermissionManager", "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", e)
                    }
                }
                .setNegativeButton("–ü–æ–∑–∂–µ") { dialog, _ ->
                    try {
                        dialog.dismiss()
                    } catch (e: Exception) {
                        android.util.Log.e("PermissionManager", "–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞", e)
                    }
                }
                .setCancelable(false)
                .show()
        } catch (e: Exception) {
            android.util.Log.e("PermissionManager", "–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π", e)
        }
    }
    
    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    fun openAppSettings(context: Context) {
        try {
            val intent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS).apply {
                data = Uri.fromParts("package", context.packageName, null)
                addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
            }
            context.startActivity(intent)
            android.util.Log.d("PermissionManager", "–û—Ç–∫—Ä—ã—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        } catch (e: Exception) {
            android.util.Log.e("PermissionManager", "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", e)
        }
    }
    
    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    fun openNotificationSettings(context: Context) {
        try {
            val intent = Intent().apply {
                when {
                    Build.VERSION.SDK_INT >= Build.VERSION_CODES.O -> {
                        action = Settings.ACTION_APP_NOTIFICATION_SETTINGS
                        putExtra(Settings.EXTRA_APP_PACKAGE, context.packageName)
                    }
                    else -> {
                        action = "android.settings.APP_NOTIFICATION_SETTINGS"
                        putExtra("app_package", context.packageName)
                        putExtra("app_uid", context.applicationInfo.uid)
                    }
                }
                addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
            }
            context.startActivity(intent)
            android.util.Log.d("PermissionManager", "–û—Ç–∫—Ä—ã—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        } catch (e: Exception) {
            android.util.Log.e("PermissionManager", "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", e)
            // Fallback –∫ –æ–±—â–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            openAppSettings(context)
        }
    }
    
    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞—Ç–∞—Ä–µ–∏
     */
    fun openBatteryOptimizationSettings(context: Context) {
        try {
            val intent = Intent(Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS).apply {
                data = Uri.parse("package:${context.packageName}")
                addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
            }
            context.startActivity(intent)
            android.util.Log.d("PermissionManager", "–û—Ç–∫—Ä—ã—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞—Ç–∞—Ä–µ–∏")
        } catch (e: Exception) {
            android.util.Log.e("PermissionManager", "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–∞—Ç–∞—Ä–µ–∏", e)
            // Fallback –∫ –æ–±—â–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            openAppSettings(context)
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    private fun areNotificationsEnabled(context: Context): Boolean {
        return try {
            val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as android.app.NotificationManager
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
                notificationManager.areNotificationsEnabled()
            } else {
                true // –î–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π Android —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
            }
        } catch (e: Exception) {
            android.util.Log.e("PermissionManager", "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", e)
            true
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞—Ç–∞—Ä–µ–∏
     */
    private fun isBatteryOptimizationIgnored(context: Context): Boolean {
        return try {
            val powerManager = context.getSystemService(Context.POWER_SERVICE) as android.os.PowerManager
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                powerManager.isIgnoringBatteryOptimizations(context.packageName)
            } else {
                true // –î–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π Android —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
            }
        } catch (e: Exception) {
            android.util.Log.e("PermissionManager", "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞—Ç–∞—Ä–µ–∏", e)
            true
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
     */
    fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray,
        onComplete: (PermissionStatus) -> Unit
    ) {
        android.util.Log.d("PermissionManager", "üìã onRequestPermissionsResult –≤—ã–∑–≤–∞–Ω")
        android.util.Log.d("PermissionManager", "  RequestCode: $requestCode")
        android.util.Log.d("PermissionManager", "  Permissions: ${permissions.joinToString(", ")}")
        android.util.Log.d("PermissionManager", "  GrantResults: ${grantResults.joinToString(", ")}")
        
        when (requestCode) {
            REQUEST_NOTIFICATION_PERMISSION -> {
                android.util.Log.d("PermissionManager", "üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                val status = PermissionStatus()
                
                for (i in permissions.indices) {
                    val permission = permissions[i]
                    val granted = grantResults[i] == PackageManager.PERMISSION_GRANTED
                    status.permissions[permission] = granted
                    
                    android.util.Log.d("PermissionManager", "  ${if (granted) "‚úÖ" else "‚ùå"} $permission: ${if (granted) "–ü–†–ï–î–û–°–¢–ê–í–õ–ï–ù–û" else "–û–¢–ö–õ–û–ù–ï–ù–û"}")
                    
                    if (!granted) {
                        status.missingPermissions.add(permission)
                    }
                }
                
                android.util.Log.d("PermissionManager", "üìä –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞:")
                android.util.Log.d("PermissionManager", "  –í—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ: ${status.isAllGranted()}")
                android.util.Log.d("PermissionManager", "  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ: ${status.missingPermissions}")
                onComplete(status)
            }
            else -> {
                android.util.Log.w("PermissionManager", "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π requestCode: $requestCode")
                // –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ requestCode –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å—Ç–∞—Ç—É—Å
                onComplete(PermissionStatus())
            }
        }
    }
    
    /**
     * –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
     */
    data class PermissionStatus(
        val permissions: MutableMap<String, Boolean> = mutableMapOf(),
        val missingPermissions: MutableList<String> = mutableListOf(),
        var systemAlertWindowGranted: Boolean = false,
        var notificationsEnabled: Boolean = true,
        var batteryOptimizationIgnored: Boolean = true
    ) {
        fun isAllGranted(): Boolean {
            return missingPermissions.isEmpty() && 
                   systemAlertWindowGranted && 
                   notificationsEnabled && 
                   batteryOptimizationIgnored
        }
        
        fun getMissingPermissionsDescription(): String {
            val descriptions = mutableListOf<String>()
            
            if (missingPermissions.isNotEmpty()) {
                descriptions.add("–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: ${missingPermissions.joinToString(", ")}")
            }
            
            if (!systemAlertWindowGranted) {
                descriptions.add("–ü–æ–∫–∞–∑ –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
            }
            
            if (!notificationsEnabled) {
                descriptions.add("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            }
            
            if (!batteryOptimizationIgnored) {
                descriptions.add("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞—Ç–∞—Ä–µ–∏")
            }
            
            return descriptions.joinToString("\n")
        }
    }
} 