package com.medicalnotes.app.utils

import android.app.ActivityManager
import android.content.Context
import android.content.Intent
import android.os.Build
import com.medicalnotes.app.service.OverdueCheckService

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–ª—É–∂–±—ã –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º
 */
object ServiceStatusChecker {
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —Å–ª—É–∂–±–∞ OverdueCheckService
     */
    fun isOverdueCheckServiceRunning(context: Context): Boolean {
        try {
            val activityManager = context.getSystemService(Context.ACTIVITY_SERVICE) as ActivityManager
            val runningServices = activityManager.getRunningServices(Integer.MAX_VALUE)
            
            for (service in runningServices) {
                if (service.service.className == OverdueCheckService::class.java.name) {
                    android.util.Log.d("ServiceStatusChecker", "‚úÖ –°–ª—É–∂–±–∞ OverdueCheckService —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    android.util.Log.d("ServiceStatusChecker", "   - PID: ${service.pid}")
                    android.util.Log.d("ServiceStatusChecker", "   - UID: ${service.uid}")
                    android.util.Log.d("ServiceStatusChecker", "   - Process: ${service.process}")
                    android.util.Log.d("ServiceStatusChecker", "   - Foreground: ${service.foreground}")
                    return true
                }
            }
            
            android.util.Log.w("ServiceStatusChecker", "‚ùå –°–ª—É–∂–±–∞ OverdueCheckService –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return false
            
        } catch (e: Exception) {
            android.util.Log.e("ServiceStatusChecker", "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª—É–∂–±—ã", e)
            return false
        }
    }
    
    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–ª—É–∂–±—É —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
     */
    fun forceStartOverdueCheckService(context: Context) {
        try {
            android.util.Log.d("ServiceStatusChecker", "=== –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –ó–ê–ü–£–°–ö –°–õ–£–ñ–ë–´ ===")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            val wasRunning = isOverdueCheckServiceRunning(context)
            android.util.Log.d("ServiceStatusChecker", "–°–ª—É–∂–±–∞ —Ä–∞–±–æ—Ç–∞–ª–∞ –¥–æ –∑–∞–ø—É—Å–∫–∞: $wasRunning")
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–±—É
            OverdueCheckService.startService(context)
            android.util.Log.d("ServiceStatusChecker", "‚úÖ –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ —Å–ª—É–∂–±—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
            android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({
                val isRunning = isOverdueCheckServiceRunning(context)
                android.util.Log.d("ServiceStatusChecker", "–°–ª—É–∂–±–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞: $isRunning")
                
                if (!isRunning) {
                    android.util.Log.w("ServiceStatusChecker", "‚ö†Ô∏è  –°–ª—É–∂–±–∞ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...")
                    // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
                    OverdueCheckService.startService(context)
                }
            }, 1000)
            
        } catch (e: Exception) {
            android.util.Log.e("ServiceStatusChecker", "–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–ª—É–∂–±—ã", e)
        }
    }
    
    /**
     * –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–ª—É–∂–±—ã
     */
    fun diagnoseServiceStatus(context: Context) {
        android.util.Log.d("ServiceStatusChecker", "\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–õ–£–ñ–ë–´")
        android.util.Log.d("ServiceStatusChecker", "==================")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–ª—É–∂–±—ã
        val serviceIntent = Intent(context, OverdueCheckService::class.java)
        val resolveInfo = context.packageManager.resolveService(serviceIntent, 0)
        
        if (resolveInfo != null) {
            android.util.Log.d("ServiceStatusChecker", "‚úÖ –°–ª—É–∂–±–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ")
            android.util.Log.d("ServiceStatusChecker", "   - –ò–º—è: ${resolveInfo.serviceInfo.name}")
            android.util.Log.d("ServiceStatusChecker", "   - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: ${resolveInfo.serviceInfo.exported}")
            android.util.Log.d("ServiceStatusChecker", "   - –í–∫–ª—é—á–µ–Ω–∞: ${resolveInfo.serviceInfo.enabled}")
        } else {
            android.util.Log.e("ServiceStatusChecker", "‚ùå –°–ª—É–∂–±–∞ –ù–ï –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ!")
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        val hasForegroundPermission = context.checkSelfPermission(android.Manifest.permission.FOREGROUND_SERVICE) == android.content.pm.PackageManager.PERMISSION_GRANTED
        val hasForegroundHealthPermission = context.checkSelfPermission(android.Manifest.permission.FOREGROUND_SERVICE_HEALTH) == android.content.pm.PackageManager.PERMISSION_GRANTED
        
        android.util.Log.d("ServiceStatusChecker", "–†–∞–∑—Ä–µ—à–µ–Ω–∏—è:")
        android.util.Log.d("ServiceStatusChecker", "   - FOREGROUND_SERVICE: ${if (hasForegroundPermission) "‚úÖ" else "‚ùå"}")
        android.util.Log.d("ServiceStatusChecker", "   - FOREGROUND_SERVICE_HEALTH: ${if (hasForegroundHealthPermission) "‚úÖ" else "‚ùå"}")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É —Å–ª—É–∂–±—ã
        val isRunning = isOverdueCheckServiceRunning(context)
        android.util.Log.d("ServiceStatusChecker", "–°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã: ${if (isRunning) "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" else "‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"}")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ —Å–ª—É–∂–±—ã
        try {
            val activityManager = context.getSystemService(Context.ACTIVITY_SERVICE) as ActivityManager
            val runningServices = activityManager.getRunningServices(Integer.MAX_VALUE)
            
            android.util.Log.d("ServiceStatusChecker", "–í—Å–µ–≥–æ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å–ª—É–∂–±: ${runningServices.size}")
            runningServices.forEach { service ->
                android.util.Log.d("ServiceStatusChecker", "   - ${service.service.className}")
            }
        } catch (e: Exception) {
            android.util.Log.e("ServiceStatusChecker", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–ª—É–∂–±", e)
        }
        
        android.util.Log.d("ServiceStatusChecker", "=== –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===")
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ª—É–∂–±—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
     */
    fun checkAndRestoreService(context: Context) {
        android.util.Log.d("ServiceStatusChecker", "=== –ü–†–û–í–ï–†–ö–ê –ò –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –°–õ–£–ñ–ë–´ ===")
        
        val isRunning = isOverdueCheckServiceRunning(context)
        
        if (!isRunning) {
            android.util.Log.w("ServiceStatusChecker", "–°–ª—É–∂–±–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º...")
            forceStartOverdueCheckService(context)
        } else {
            android.util.Log.d("ServiceStatusChecker", "–°–ª—É–∂–±–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
        }
    }
} 