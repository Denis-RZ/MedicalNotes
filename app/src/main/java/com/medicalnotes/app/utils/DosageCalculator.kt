package com.medicalnotes.app.utils

import com.medicalnotes.app.models.DosageFrequency
import com.medicalnotes.app.models.Medicine
import java.time.LocalDate
import java.time.LocalTime
import java.time.temporal.ChronoUnit
import android.content.Context

object DosageCalculator {
    
    // –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
    private const val OVERDUE_BUFFER_MINUTES = 5L  // Reduced from 15 to 5 minutes for faster overdue detection
    private const val OVERDUE_BUFFER_SECONDS = OVERDUE_BUFFER_MINUTES * 60L
    private const val MAX_OVERDUE_HOURS = 24L  // Maximum hours to consider overdue (24 hours = full day)
    private const val OVERDUE_BUFFER_MILLIS = OVERDUE_BUFFER_SECONDS * 1000L
    
    // –°—Ç–∞—Ç—É—Å—ã –ª–µ–∫–∞—Ä—Å—Ç–≤
    enum class MedicineStatus {
        NOT_TODAY,      // –ù–µ —Å–µ–≥–æ–¥–Ω—è
        UPCOMING,       // –ü—Ä–µ–¥—Å—Ç–æ–∏—Ç —Å–µ–≥–æ–¥–Ω—è
        OVERDUE,        // –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ
        TAKEN_TODAY     // –ü—Ä–∏–Ω—è—Ç–æ —Å–µ–≥–æ–¥–Ω—è
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –≥—Ä—É–ø–ø
     */
    fun shouldTakeMedicine(medicine: Medicine, date: LocalDate, allMedicines: List<Medicine>? = null): Boolean {
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –≤ LocalDate
        val startDate = java.time.Instant.ofEpochMilli(medicine.startDate)
            .atZone(java.time.ZoneId.systemDefault())
            .toLocalDate()
        
        android.util.Log.d("DosageCalculator", "=== –ü–†–û–í–ï–†–ö–ê –õ–ï–ö–ê–†–°–¢–í–ê ===")
        android.util.Log.d("DosageCalculator", "–õ–µ–∫–∞—Ä—Å—Ç–≤–æ: ${medicine.name}")
        android.util.Log.d("DosageCalculator", "  - –î–∞—Ç–∞: $date")
        android.util.Log.d("DosageCalculator", "  - startDate: $startDate")
        android.util.Log.d("DosageCalculator", "  - groupId: ${medicine.groupId}")
        android.util.Log.d("DosageCalculator", "  - groupName: ${medicine.groupName}")
        android.util.Log.d("DosageCalculator", "  - groupOrder: ${medicine.groupOrder}")
        android.util.Log.d("DosageCalculator", "  - frequency: ${medicine.frequency}")
        
        // –ï—Å–ª–∏ –¥–∞—Ç–∞ —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–µ–º–∞
        if (date.isBefore(startDate)) {
            android.util.Log.d("DosageCalculator", "  - –î–∞—Ç–∞ —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–µ–º–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false")
            return false
        }
        
        // –ï—Å–ª–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –≤ –≥—Ä—É–ø–ø–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É –≥—Ä—É–ø–ø—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        if (medicine.groupId != null) {
            android.util.Log.d("DosageCalculator", "  - –õ–µ–∫–∞—Ä—Å—Ç–≤–æ –≤ –≥—Ä—É–ø–ø–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä—É–ø–ø–æ–≤—É—é –ª–æ–≥–∏–∫—É")
            return shouldTakeMedicineInGroup(medicine, date, allMedicines)
        }
        
        // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ª–µ–∫–∞—Ä—Å—Ç–≤ –Ω–µ –≤ –≥—Ä—É–ø–ø–µ
        android.util.Log.d("DosageCalculator", "  - –õ–µ–∫–∞—Ä—Å—Ç–≤–æ –ù–ï –≤ –≥—Ä—É–ø–ø–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –ª–æ–≥–∏–∫—É")
        val result = when (medicine.frequency) {
            DosageFrequency.DAILY -> {
                android.util.Log.d("DosageCalculator", "  - –ß–∞—Å—Ç–æ—Ç–∞ DAILY, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true")
                true
            }
            DosageFrequency.EVERY_OTHER_DAY -> {
                val daysSinceStart = ChronoUnit.DAYS.between(startDate, date)
                val shouldTake = daysSinceStart % 2L == 0L
                android.util.Log.d("DosageCalculator", "  - –ß–∞—Å—Ç–æ—Ç–∞ EVERY_OTHER_DAY, –¥–Ω–µ–π —Å –Ω–∞—á–∞–ª–∞: $daysSinceStart, –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å: $shouldTake")
                shouldTake
            }
            DosageFrequency.TWICE_A_WEEK -> {
                val daysSinceStart = ChronoUnit.DAYS.between(startDate, date)
                val shouldTake = daysSinceStart % 3L == 0L || daysSinceStart % 3L == 1L
                android.util.Log.d("DosageCalculator", "  - –ß–∞—Å—Ç–æ—Ç–∞ TWICE_A_WEEK, –¥–Ω–µ–π —Å –Ω–∞—á–∞–ª–∞: $daysSinceStart, –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å: $shouldTake")
                shouldTake
            }
            DosageFrequency.THREE_TIMES_A_WEEK -> {
                val daysSinceStart = ChronoUnit.DAYS.between(startDate, date)
                val shouldTake = daysSinceStart % 2L == 0L
                android.util.Log.d("DosageCalculator", "  - –ß–∞—Å—Ç–æ—Ç–∞ THREE_TIMES_A_WEEK, –¥–Ω–µ–π —Å –Ω–∞—á–∞–ª–∞: $daysSinceStart, –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å: $shouldTake")
                shouldTake
            }
            DosageFrequency.WEEKLY -> {
                val daysSinceStart = ChronoUnit.DAYS.between(startDate, date)
                val shouldTake = daysSinceStart % 7L == 0L
                android.util.Log.d("DosageCalculator", "  - –ß–∞—Å—Ç–æ—Ç–∞ WEEKLY, –¥–Ω–µ–π —Å –Ω–∞—á–∞–ª–∞: $daysSinceStart, –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å: $shouldTake")
                shouldTake
            }
            DosageFrequency.CUSTOM -> {
                val dayOfWeek = date.dayOfWeek.value
                val shouldTake = medicine.customDays.contains(dayOfWeek)
                android.util.Log.d("DosageCalculator", "  - –ß–∞—Å—Ç–æ—Ç–∞ CUSTOM, –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏: $dayOfWeek, –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å: $shouldTake")
                shouldTake
            }
        }
        android.util.Log.d("DosageCalculator", "  - –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: $result")
        return result
    }
    

    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–∞ –ø—Ä–∏–µ–º–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
     */
    fun getDoseTimesForDate(medicine: Medicine, date: LocalDate): List<LocalTime> {
        if (!shouldTakeMedicine(medicine, date, null)) {
            return emptyList()
        }
        
        return if (medicine.multipleDoses && medicine.doseTimes.isNotEmpty()) {
            medicine.doseTimes
        } else {
            listOf(medicine.time)
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã (–¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è - –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ takenToday)
     */
    fun getActiveMedicinesForDateForCalendar(medicines: List<Medicine>, date: LocalDate): List<Medicine> {
        android.util.Log.d("DosageCalculator", "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è: ${medicines.size} –ª–µ–∫–∞—Ä—Å—Ç–≤ –¥–ª—è –¥–∞—Ç—ã $date")
        
        android.util.Log.d("DosageCalculator", "=== –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ê–ö–¢–ò–í–ù–´–• –õ–ï–ö–ê–†–°–¢–í –î–õ–Ø –ö–ê–õ–ï–ù–î–ê–†–Ø ===")
        val activeMedicines = medicines.filter { medicine ->
            android.util.Log.d("DosageCalculator", "üîç –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ö–ê–õ–ï–ù–î–ê–†–¨: ${medicine.name}")
            android.util.Log.d("DosageCalculator", "  - groupId: ${medicine.groupId}")
            android.util.Log.d("DosageCalculator", "  - groupName: ${medicine.groupName}")
            android.util.Log.d("DosageCalculator", "  - groupOrder: ${medicine.groupOrder}")
            android.util.Log.d("DosageCalculator", "  - groupStartDate: ${medicine.groupStartDate}")
            android.util.Log.d("DosageCalculator", "  - groupFrequency: ${medicine.groupFrequency}")
            
            val isActive = medicine.isActive
            android.util.Log.d("DosageCalculator", "  - isActive: $isActive")
            
            android.util.Log.d("DosageCalculator", "  - –í–´–ó–´–í–ê–ï–ú shouldTakeMedicine()")
            val shouldTake = shouldTakeMedicine(medicine, date, medicines)
            android.util.Log.d("DosageCalculator", "  - shouldTake: $shouldTake")
            
            val isActiveAndShouldTake = isActive && shouldTake
            android.util.Log.d("DosageCalculator", "  - isActiveAndShouldTake: $isActiveAndShouldTake")
            
            isActiveAndShouldTake
        }
        
        android.util.Log.d("DosageCalculator", "–ê–∫—Ç–∏–≤–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è: ${activeMedicines.size}")
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ù–ï —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ takenToday
        // –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∏–¥–µ—Ç—å –≤—Å–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å—Å—è –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
        val medicinesForCalendar = activeMedicines
        
        android.util.Log.d("DosageCalculator", "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è: ${medicinesForCalendar.size} –ª–µ–∫–∞—Ä—Å—Ç–≤")
        
        // –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        activeMedicines.forEach { medicine ->
            android.util.Log.d("DosageCalculator", "üîç –ö–ê–õ–ï–ù–î–ê–†–¨: ${medicine.name}")
            android.util.Log.d("DosageCalculator", "  - takenToday: ${medicine.takenToday}")
            android.util.Log.d("DosageCalculator", "  - lastTakenTime: ${medicine.lastTakenTime}")
            android.util.Log.d("DosageCalculator", "  - –í —Å–ø–∏—Å–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: ${medicinesForCalendar.contains(medicine)}")
        }
        
        return medicinesForCalendar
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
     */
    fun getActiveMedicinesForDate(medicines: List<Medicine>, date: LocalDate): List<Medicine> {
        //  –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω–æ –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è ANR
        android.util.Log.d("DosageCalculator", "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤: ${medicines.size} –ª–µ–∫–∞—Ä—Å—Ç–≤ –¥–ª—è –¥–∞—Ç—ã $date")
        android.util.Log.e("DosageCalculator", "üìã DosageCalculator: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è ${medicines.size} –ª–µ–∫–∞—Ä—Å—Ç–≤ –¥–ª—è –¥–∞—Ç—ã $date")
        
        android.util.Log.d("DosageCalculator", "=== –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ê–ö–¢–ò–í–ù–´–• –õ–ï–ö–ê–†–°–¢–í –° –í–ê–õ–ò–î–ê–¶–ò–ï–ô –ì–†–£–ü–ü ===")
        val activeMedicines = medicines.filter { medicine ->
            android.util.Log.d("DosageCalculator", "üîç –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: ${medicine.name}")
            android.util.Log.d("DosageCalculator", "  - groupId: ${medicine.groupId}")
            android.util.Log.d("DosageCalculator", "  - groupName: ${medicine.groupName}")
            android.util.Log.d("DosageCalculator", "  - groupOrder: ${medicine.groupOrder}")
            android.util.Log.d("DosageCalculator", "  - groupStartDate: ${medicine.groupStartDate}")
            android.util.Log.d("DosageCalculator", "  - groupFrequency: ${medicine.groupFrequency}")
            
            val isActive = medicine.isActive
            android.util.Log.d("DosageCalculator", "  - isActive: $isActive")
            
            android.util.Log.d("DosageCalculator", "  - –í–´–ó–´–í–ê–ï–ú shouldTakeMedicine()")
            val shouldTake = shouldTakeMedicine(medicine, date, medicines)
            android.util.Log.d("DosageCalculator", "  - shouldTake: $shouldTake")
            
            val isActiveAndShouldTake = isActive && shouldTake
            android.util.Log.d("DosageCalculator", "  - isActiveAndShouldTake: $isActiveAndShouldTake")
            
            isActiveAndShouldTake
        }
        
        android.util.Log.d("DosageCalculator", "–ê–∫—Ç–∏–≤–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤: ${activeMedicines.size}")
        android.util.Log.e("DosageCalculator", "üìã DosageCalculator: –ê–∫—Ç–∏–≤–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤: ${activeMedicines.size}")
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–Ω—è—Ç—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –¥–æ–ª–∂–Ω—ã –∏—Å—á–µ–∑–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ "–Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
        val medicinesForToday = activeMedicines.filter { medicine ->
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º takenToday –≤–º–µ—Å—Ç–æ lastTakenTime –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            !medicine.takenToday
        }
        
        android.util.Log.d("DosageCalculator", "–†–µ–∑—É–ª—å—Ç–∞—Ç: ${medicinesForToday.size} –ª–µ–∫–∞—Ä—Å—Ç–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
        android.util.Log.e("DosageCalculator", "üìã DosageCalculator: –†–µ–∑—É–ª—å—Ç–∞—Ç: ${medicinesForToday.size} –ª–µ–∫–∞—Ä—Å—Ç–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
        
        //  –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        activeMedicines.forEach { medicine ->
            android.util.Log.d("DosageCalculator", "üîç –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: ${medicine.name}")
            android.util.Log.d("DosageCalculator", "  - takenToday: ${medicine.takenToday}")
            android.util.Log.d("DosageCalculator", "  - lastTakenTime: ${medicine.lastTakenTime}")
            android.util.Log.d("DosageCalculator", "  - –í —Å–ø–∏—Å–∫–µ '–Ω–∞ —Å–µ–≥–æ–¥–Ω—è': ${medicinesForToday.contains(medicine)}")
            android.util.Log.d("DosageCalculator", "  - –ü—Ä–∏—á–∏–Ω–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è: ${if (!medicinesForToday.contains(medicine)) "takenToday = true" else "–≤–∫–ª—é—á–µ–Ω–æ"}")
        }
        
        // –î–û–ë–ê–í–õ–ï–ù–û: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
        medicines.forEach { medicine ->
            if (!activeMedicines.contains(medicine)) {
                android.util.Log.e("DosageCalculator", "‚ùå‚ùå‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–û: ${medicine.name} ‚ùå‚ùå‚ùå")
                android.util.Log.e("DosageCalculator", "  - isActive: ${medicine.isActive}")
                android.util.Log.e("DosageCalculator", "  - shouldTakeMedicine: ${shouldTakeMedicine(medicine, date, medicines)}")
                android.util.Log.e("DosageCalculator", "  - takenToday: ${medicine.takenToday}")
                android.util.Log.e("DosageCalculator", "  - –ü—Ä–∏—á–∏–Ω–∞: ${if (!medicine.isActive) "–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ" else if (!shouldTakeMedicine(medicine, date, medicines)) "–Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è" else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}")
            }
        }
        
        return medicinesForToday
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
     */
    fun getMedicinesForTime(medicines: List<Medicine>, date: LocalDate, time: LocalTime): List<Medicine> {
        return getActiveMedicinesForDate(medicines, date).filter { medicine ->
            getDoseTimesForDate(medicine, date).any { doseTime ->
                doseTime.hour == time.hour && doseTime.minute == time.minute
            }
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –ø—Ä–∏–µ–º–∞ –¥–ª—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
     */
    fun getNextDosageDate(medicine: Medicine, fromDate: LocalDate = LocalDate.now()): LocalDate? {
        val startDate = LocalDate.ofEpochDay(medicine.startDate / (24 * 60 * 60 * 1000))
        
        if (fromDate.isBefore(startDate)) {
            return startDate
        }
        
        var currentDate = fromDate
        repeat(30) { // –ò—â–µ–º –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –º–µ—Å—è—Ü–∞
            if (shouldTakeMedicine(medicine, currentDate)) {
                return currentDate
            }
            currentDate = currentDate.plusDays(1)
        }
        
        return null
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ö–µ–º—ã –ø—Ä–∏–µ–º–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    fun getDosageDescription(medicine: Medicine): String {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ—Å—É—Ä—Å–∞–º
        val context = com.medicalnotes.app.MedicalNotesApplication.instance
        return getDosageDescription(medicine, context)
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ö–µ–º—ã –ø—Ä–∏–µ–º–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
     */
    fun getDosageDescription(medicine: Medicine, context: Context): String {
        val frequencyText = when (medicine.frequency) {
            DosageFrequency.DAILY -> context.getString(com.medicalnotes.app.R.string.frequency_daily)
            DosageFrequency.EVERY_OTHER_DAY -> context.getString(com.medicalnotes.app.R.string.frequency_every_other_day)
            DosageFrequency.TWICE_A_WEEK -> context.getString(com.medicalnotes.app.R.string.frequency_twice_a_week)
            DosageFrequency.THREE_TIMES_A_WEEK -> context.getString(com.medicalnotes.app.R.string.frequency_three_times_a_week)
            DosageFrequency.WEEKLY -> context.getString(com.medicalnotes.app.R.string.frequency_weekly)
            DosageFrequency.CUSTOM -> context.getString(com.medicalnotes.app.R.string.frequency_custom)
        }
        
        val timeText = if (medicine.multipleDoses && medicine.doseTimes.isNotEmpty()) {
            val times = medicine.doseTimes.map { it.format(java.time.format.DateTimeFormatter.ofPattern("HH:mm")) }
            "–≤ ${times.joinToString(", ")}"
        } else {
            "–≤ ${medicine.time.format(java.time.format.DateTimeFormatter.ofPattern("HH:mm"))}"
        }
        
        return "$frequencyText $timeText"
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ–ø—É—â–µ–Ω–æ –ª–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥)
     */
    fun isMedicineMissed(medicine: Medicine, date: LocalDate = LocalDate.now()): Boolean {
        return isMedicineOverdue(medicine, date)
    }
    
    /**
     * –ï–¥–∏–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ä–æ—á–∫–∏
     */
    fun isMedicineOverdue(medicine: Medicine, date: LocalDate = LocalDate.now()): Boolean {
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–Ω—è—Ç—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–º–∏
        if (medicine.takenToday) {
            android.util.Log.d("DosageCalculator", "–õ–µ–∫–∞—Ä—Å—Ç–≤–æ ${medicine.name} —É–∂–µ –ø—Ä–∏–Ω—è—Ç–æ —Å–µ–≥–æ–¥–Ω—è - –Ω–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ")
            return false
        }
        
        if (!shouldTakeMedicine(medicine, date)) {
            return false
        }
        
        val doseTimes = getDoseTimesForDate(medicine, date)
        val now = java.time.LocalDateTime.now()
        
        return doseTimes.any { doseTime ->
            val doseDateTime = date.atTime(doseTime)
            val timeDiff = java.time.Duration.between(doseDateTime, now)
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –±—É—Ñ–µ—Ä (5 –º–∏–Ω—É—Ç) –Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 24 —á–∞—Å–∞–º–∏
            val isOverdue = timeDiff.toMinutes() > OVERDUE_BUFFER_MINUTES && 
                           timeDiff.toHours() <= MAX_OVERDUE_HOURS && 
                           doseDateTime.isBefore(now)
            android.util.Log.d("DosageCalculator", "–í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞: ${doseTime}, –ø—Ä–æ—à–ª–æ ${timeDiff.toMinutes()} –º–∏–Ω—É—Ç, –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: $isOverdue")
            isOverdue
        }
    }
    
    /**
     * –ï–¥–∏–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
     */
    fun getMedicineStatus(medicine: Medicine, date: LocalDate = LocalDate.now()): MedicineStatus {
        android.util.Log.d("DosageCalculator", "=== –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê ===")
        android.util.Log.d("DosageCalculator", "–õ–µ–∫–∞—Ä—Å—Ç–≤–æ: ${medicine.name}")
        android.util.Log.d("DosageCalculator", "–î–∞—Ç–∞: $date")
        
        if (!shouldTakeMedicine(medicine, date)) {
            android.util.Log.d("DosageCalculator", "–°—Ç–∞—Ç—É—Å: NOT_TODAY (–Ω–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é)")
            return MedicineStatus.NOT_TODAY
        }
        
        if (medicine.takenToday) {
            android.util.Log.d("DosageCalculator", "–°—Ç–∞—Ç—É—Å: TAKEN_TODAY (—É–∂–µ –ø—Ä–∏–Ω—è—Ç–æ)")
            return MedicineStatus.TAKEN_TODAY
        }
        
        val doseTimes = getDoseTimesForDate(medicine, date)
        val now = java.time.LocalDateTime.now()
        
        android.util.Log.d("DosageCalculator", "–í—Ä–µ–º–µ–Ω–∞ –ø—Ä–∏–µ–º–∞: $doseTimes")
        android.util.Log.d("DosageCalculator", "–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: $now")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–∏–µ–º—ã
        val overdueDoses = doseTimes.filter { doseTime ->
            val doseDateTime = date.atTime(doseTime)
            val timeDiff = java.time.Duration.between(doseDateTime, now)
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –±—É—Ñ–µ—Ä (5 –º–∏–Ω—É—Ç) –Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 24 —á–∞—Å–∞–º–∏
            val isOverdue = timeDiff.toMinutes() > OVERDUE_BUFFER_MINUTES && 
                           timeDiff.toHours() <= MAX_OVERDUE_HOURS && 
                           doseDateTime.isBefore(now)
            android.util.Log.d("DosageCalculator", "–î–æ–∑–∞ ${doseTime}: –≤—Ä–µ–º—è –ø—Ä–æ—à–ª–æ ${timeDiff.toMinutes()} –º–∏–Ω—É—Ç, –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: $isOverdue")
            isOverdue
        }
        
        android.util.Log.d("DosageCalculator", "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–∏–µ–º—ã: $overdueDoses")
        
        return when {
            overdueDoses.isNotEmpty() -> {
                android.util.Log.d("DosageCalculator", "–°—Ç–∞—Ç—É—Å: OVERDUE (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ)")
                MedicineStatus.OVERDUE
            }
            doseTimes.any { it.atDate(date).isAfter(now) } -> {
                android.util.Log.d("DosageCalculator", "–°—Ç–∞—Ç—É—Å: UPCOMING (–ø—Ä–µ–¥—Å—Ç–æ–∏—Ç)")
                MedicineStatus.UPCOMING
            }
            else -> {
                android.util.Log.d("DosageCalculator", "–°—Ç–∞—Ç—É—Å: OVERDUE (–≤—Ä–µ–º—è –ø—Ä–æ—à–ª–æ)")
                MedicineStatus.OVERDUE
            }
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ –¥–ª—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
     */
    fun getNextDoseTime(medicine: Medicine, date: LocalDate = LocalDate.now()): LocalTime? {
        if (!shouldTakeMedicine(medicine, date)) {
            return null
        }
        
        val doseTimes = getDoseTimesForDate(medicine, date)
        val now = java.time.LocalDateTime.now()
        
        return doseTimes.find { doseTime ->
            val doseDateTime = date.atTime(doseTime)
            doseDateTime.isAfter(now)
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –≤ –≥—Ä—É–ø–ø–µ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
     */
    private fun shouldTakeMedicineInGroup(medicine: Medicine, date: LocalDate, allMedicines: List<Medicine>? = null): Boolean {
        android.util.Log.d("DosageCalculator", "=== –ì–†–£–ü–ü–û–í–ê–Ø –õ–û–ì–ò–ö–ê –° –í–ê–õ–ò–î–ê–¶–ò–ï–ô ===")
        android.util.Log.d("DosageCalculator", "–õ–µ–∫–∞—Ä—Å—Ç–≤–æ: ${medicine.name}")
        android.util.Log.d("DosageCalculator", "  - –ì—Ä—É–ø–ø–∞ ID: ${medicine.groupId}")
        android.util.Log.d("DosageCalculator", "  - –ì—Ä—É–ø–ø–∞: ${medicine.groupName}")
        android.util.Log.d("DosageCalculator", "  - –ü–æ—Ä—è–¥–æ–∫ –≤ –≥—Ä—É–ø–ø–µ: ${medicine.groupOrder}")
        android.util.Log.d("DosageCalculator", "  - groupStartDate: ${medicine.groupStartDate}")
        android.util.Log.d("DosageCalculator", "  - groupFrequency: ${medicine.groupFrequency}")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã
        if (!medicine.isValidGroup()) {
            android.util.Log.w("DosageCalculator", "  - –ì—Ä—É–ø–ø–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞ –¥–ª—è ${medicine.name}")
            android.util.Log.w("DosageCalculator", "  - isValidGroup() = false")
            return false
        }
        
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤—Å–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã
        if (allMedicines != null) {
            val groupValidationStatus = medicine.getGroupValidationStatus(allMedicines)
            android.util.Log.d("DosageCalculator", "  - –°—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã: $groupValidationStatus")
            
            if (groupValidationStatus != com.medicalnotes.app.models.GroupValidationStatus.VALID) {
                android.util.Log.w("DosageCalculator", "  - –ì—Ä—É–ø–ø–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞: $groupValidationStatus")
                return false
            }
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ groupStartDate
        val startDate = if (medicine.groupStartDate > 0) {
            java.time.Instant.ofEpochMilli(medicine.groupStartDate)
                .atZone(java.time.ZoneId.systemDefault())
                .toLocalDate()
        } else {
            // –ï—Å–ª–∏ groupStartDate –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π startDate
            java.time.Instant.ofEpochMilli(medicine.startDate)
                .atZone(java.time.ZoneId.systemDefault())
                .toLocalDate()
        }
        
        val daysSinceStart = ChronoUnit.DAYS.between(startDate, date)
        
        android.util.Log.d("DosageCalculator", "  - –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≥—Ä—É–ø–ø—ã: $startDate")
        android.util.Log.d("DosageCalculator", "  - –ü—Ä–æ–≤–µ—Ä—è–µ–º–∞—è –¥–∞—Ç–∞: $date")
        android.util.Log.d("DosageCalculator", "  - –î–Ω–µ–π —Å –Ω–∞—á–∞–ª–∞: $daysSinceStart")
        android.util.Log.d("DosageCalculator", "  - –ß–∞—Å—Ç–æ—Ç–∞ –≥—Ä—É–ø–ø—ã: ${medicine.groupFrequency}")
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —á–∞—Å—Ç–æ—Ç—É –ª–µ–∫–∞—Ä—Å—Ç–≤–∞, –∞ –Ω–µ –≥—Ä—É–ø–ø–æ–≤—É—é
        // –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        val frequencyToUse = medicine.frequency // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —á–∞—Å—Ç–æ—Ç—É, –Ω–µ –≥—Ä—É–ø–ø–æ–≤—É—é!
        android.util.Log.d("DosageCalculator", "  - –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —á–∞—Å—Ç–æ—Ç—É: $frequencyToUse (–Ω–µ –≥—Ä—É–ø–ø–æ–≤—É—é: ${medicine.groupFrequency})")
        
        if (frequencyToUse == DosageFrequency.EVERY_OTHER_DAY) {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –¥–µ–Ω—å –≥—Ä—É–ø–ø—ã —Å–µ–≥–æ–¥–Ω—è (0, 1, 2, 3...)
            val groupDay = (daysSinceStart % 2).toInt()
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –ø—Ä–∏–Ω—è—Ç–æ –≤—á–µ—Ä–∞
            val yesterday = date.minusDays(1)
            val wasTakenYesterday = if (medicine.lastTakenTime > 0) {
                val lastTakenDate = java.time.Instant.ofEpochMilli(medicine.lastTakenTime)
                    .atZone(java.time.ZoneId.systemDefault())
                    .toLocalDate()
                lastTakenDate == yesterday
            } else {
                false
            }
            
            android.util.Log.d("DosageCalculator", "  - –í—á–µ—Ä–∞—à–Ω—è—è –¥–∞—Ç–∞: $yesterday")
            android.util.Log.d("DosageCalculator", "  - –ü—Ä–∏–Ω—è—Ç–æ –≤—á–µ—Ä–∞: $wasTakenYesterday")
            
            // –î–ª—è –≥—Ä—É–ø–ø—ã "—á–µ—Ä–µ–∑ –¥–µ–Ω—å":
            // - –õ–µ–∫–∞—Ä—Å—Ç–≤–æ —Å groupOrder = 1 –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –≤ –¥–Ω–∏ 0, 2, 4, 6... (—á–µ—Ç–Ω—ã–µ –¥–Ω–∏ –≥—Ä—É–ø–ø—ã)
            // - –õ–µ–∫–∞—Ä—Å—Ç–≤–æ —Å groupOrder = 2 –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –≤ –¥–Ω–∏ 1, 3, 5, 7... (–Ω–µ—á–µ—Ç–Ω—ã–µ –¥–Ω–∏ –≥—Ä—É–ø–ø—ã)
            
            val shouldTake = when {
                medicine.groupOrder <= 0 -> false  // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
                medicine.groupOrder == 1 -> groupDay == 0  // –ü–µ—Ä–≤–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –≤ —á–µ—Ç–Ω—ã–µ –¥–Ω–∏ –≥—Ä—É–ø–ø—ã
                medicine.groupOrder == 2 -> groupDay == 1  // –í—Ç–æ—Ä–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –≤ –Ω–µ—á–µ—Ç–Ω—ã–µ –¥–Ω–∏ –≥—Ä—É–ø–ø—ã
                else -> false  // –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø–æ—Ä—è–¥–æ–∫
            }
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ï—Å–ª–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ –≤—á–µ—Ä–∞ –∏ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é,
            // —Ç–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –∫–∞–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ
            val finalResult = if (wasTakenYesterday && !shouldTake) {
                android.util.Log.d("DosageCalculator", "  - –õ–µ–∫–∞—Ä—Å—Ç–≤–æ –ø—Ä–∏–Ω—è—Ç–æ –≤—á–µ—Ä–∞ –∏ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º")
                false
            } else if (wasTakenYesterday && shouldTake) {
                // –ï—Å–ª–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ –≤—á–µ—Ä–∞, –Ω–æ —Å–µ–≥–æ–¥–Ω—è –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é,
                // —Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å –µ—â–µ —Ä–∞–∑)
                android.util.Log.d("DosageCalculator", "  - –õ–µ–∫–∞—Ä—Å—Ç–≤–æ –ø—Ä–∏–Ω—è—Ç–æ –≤—á–µ—Ä–∞, –Ω–æ —Å–µ–≥–æ–¥–Ω—è —Ç–æ–∂–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º")
                true
            } else {
                shouldTake
            }
            
            android.util.Log.d("DosageCalculator", "  - –î–µ–Ω—å –≥—Ä—É–ø–ø—ã: $groupDay")
            android.util.Log.d("DosageCalculator", "  - –ü–æ—Ä—è–¥–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞: ${medicine.groupOrder}")
            android.util.Log.d("DosageCalculator", "  - –ù—É–∂–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å: $shouldTake")
            android.util.Log.d("DosageCalculator", "  - –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: $finalResult")
            android.util.Log.d("DosageCalculator", "  - –õ–æ–≥–∏–∫–∞: groupOrder=${medicine.groupOrder}, groupDay=$groupDay, wasTakenYesterday=$wasTakenYesterday")
            return finalResult
        }
        
        // –î–ª—è –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –ª–æ–≥–∏–∫—É
        val result = when (medicine.groupFrequency) {
            DosageFrequency.DAILY -> true
            DosageFrequency.TWICE_A_WEEK -> {
                daysSinceStart % 3L == 0L || daysSinceStart % 3L == 1L
            }
            DosageFrequency.THREE_TIMES_A_WEEK -> {
                daysSinceStart % 2L == 0L
            }
            DosageFrequency.WEEKLY -> {
                daysSinceStart % 7L == 0L
            }
            DosageFrequency.CUSTOM -> {
                val dayOfWeek = date.dayOfWeek.value
                medicine.customDays.contains(dayOfWeek)
            }
            else -> false
        }
        
        android.util.Log.d("DosageCalculator", "  - –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç–æ—Ç: $result")
        return result
    }
}

enum class MedicineStatus {
    NOT_TODAY,      // –ù–µ —Å–µ–≥–æ–¥–Ω—è
    UPCOMING,       // –ü—Ä–µ–¥—Å—Ç–æ–∏—Ç —Å–µ–≥–æ–¥–Ω—è
    OVERDUE,        // –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ
    TAKEN_TODAY     // –ü—Ä–∏–Ω—è—Ç–æ —Å–µ–≥–æ–¥–Ω—è
} 