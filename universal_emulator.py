#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —ç–º—É–ª—è—Ç–æ—Ä - —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±—ã–º –¥–æ—Å—Ç—É–ø–Ω—ã–º —ç–º—É–ª—è—Ç–æ—Ä–æ–º
"""

import os
import sys
import subprocess
import time
from pathlib import Path

class UniversalEmulator:
    def __init__(self):
        self.project_dir = Path(__file__).parent
        self.adb_path = None
        self.device_id = None
        self.emulator_path = None
        self.emulator_name = None
        
    def find_adb(self):
        """–ü–æ–∏—Å–∫ ADB"""
        possible_paths = [
            os.path.expanduser("~/AppData/Local/Android/Sdk/platform-tools/adb.exe"),
            "C:/Users/%USERNAME%/AppData/Local/Android/Sdk/platform-tools/adb.exe",
            "C:/Android/Sdk/platform-tools/adb.exe",
            "C:/Program Files/Android/Android Studio/sdk/platform-tools/adb.exe",
            "adb.exe"
        ]
        
        for path in possible_paths:
            path = os.path.expandvars(path)
            if os.path.exists(path):
                self.adb_path = path
                print(f"‚úÖ ADB –Ω–∞–π–¥–µ–Ω: {path}")
                return True
                
        print("‚ùå ADB –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    def find_emulators(self):
        """–ü–æ–∏—Å–∫ –≤—Å–µ—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤"""
        emulators = {}
        
        # Android Studio AVD
        avd_paths = [
            os.path.expanduser("~/AppData/Local/Android/Sdk/emulator/emulator.exe"),
            "C:/Android/Sdk/emulator/emulator.exe",
            "C:/Program Files/Android/Android Studio/sdk/emulator/emulator.exe"
        ]
        
        for path in avd_paths:
            if os.path.exists(path):
                emulators["Android Studio AVD"] = path
                break
        
        # Genymotion
        genymotion_paths = [
            "C:/Program Files/Genymobile/Genymotion/genymotion.exe",
            "C:/Program Files (x86)/Genymobile/Genymotion/genymotion.exe"
        ]
        
        for path in genymotion_paths:
            if os.path.exists(path):
                emulators["Genymotion"] = path
                break
        
        # BlueStacks
        bluestacks_paths = [
            "C:/Program Files/BlueStacks_nxt/HD-Player.exe",
            "C:/Program Files (x86)/BlueStacks_nxt/HD-Player.exe",
            "C:/Program Files/BlueStacks/HD-Player.exe",
            "C:/Program Files (x86)/BlueStacks/HD-Player.exe"
        ]
        
        for path in bluestacks_paths:
            if os.path.exists(path):
                emulators["BlueStacks"] = path
                break
        
        # NoxPlayer
        nox_paths = [
            "C:/Program Files/Nox/bin/Nox.exe",
            "C:/Program Files (x86)/Nox/bin/Nox.exe"
        ]
        
        for path in nox_paths:
            if os.path.exists(path):
                emulators["NoxPlayer"] = path
                break
        
        # LDPlayer
        ld_paths = [
            "C:/Program Files/LDPlayer/LDPlayer9/ldconsole.exe",
            "C:/Program Files (x86)/LDPlayer/LDPlayer9/ldconsole.exe"
        ]
        
        for path in ld_paths:
            if os.path.exists(path):
                emulators["LDPlayer"] = path
                break
        
        return emulators
    
    def start_android_studio_avd(self, path):
        """–ó–∞–ø—É—Å–∫ Android Studio AVD"""
        try:
            print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Android Studio AVD...")
            
            # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö AVD
            result = subprocess.run([
                path.replace("emulator.exe", "emulator.exe"), "-list-avds"
            ], capture_output=True, text=True, encoding='utf-8')
            
            if result.returncode == 0 and result.stdout.strip():
                avds = result.stdout.strip().split('\n')
                print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ AVD: {avds}")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π AVD
                avd_name = avds[0]
                print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º AVD: {avd_name}")
                
                subprocess.Popen([path, "-avd", avd_name])
                print("‚úÖ AVD –∑–∞–ø—É—â–µ–Ω")
                return True
            else:
                print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö AVD")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ AVD: {e}")
            return False
    
    def start_genymotion(self, path):
        """–ó–∞–ø—É—Å–∫ Genymotion"""
        try:
            print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Genymotion...")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º QEMU –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            gmtool_path = path.replace("genymotion.exe", "gmtool.exe")
            if os.path.exists(gmtool_path):
                try:
                    subprocess.run([gmtool_path, "config", "--hypervisor", "qemu"], 
                                 capture_output=True, text=True, encoding='utf-8')
                    print("‚úÖ QEMU –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                except:
                    pass
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Genymotion
            subprocess.Popen([path])
            print("‚úÖ Genymotion –∑–∞–ø—É—â–µ–Ω")
            print("üí° –°–æ–∑–¥–∞–π—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—Ä—É—á–Ω—É—é")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Genymotion: {e}")
            return False
    
    def start_bluestacks(self, path):
        """–ó–∞–ø—É—Å–∫ BlueStacks"""
        try:
            print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º BlueStacks...")
            subprocess.Popen([path])
            print("‚úÖ BlueStacks –∑–∞–ø—É—â–µ–Ω")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ BlueStacks: {e}")
            return False
    
    def start_noxplayer(self, path):
        """–ó–∞–ø—É—Å–∫ NoxPlayer"""
        try:
            print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º NoxPlayer...")
            subprocess.Popen([path])
            print("‚úÖ NoxPlayer –∑–∞–ø—É—â–µ–Ω")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ NoxPlayer: {e}")
            return False
    
    def start_ldplayer(self, path):
        """–ó–∞–ø—É—Å–∫ LDPlayer"""
        try:
            print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º LDPlayer...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º LDPlayer —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å
            result = subprocess.run([path, "launch", "--index", "0"], 
                                  capture_output=True, text=True, encoding='utf-8')
            
            if result.returncode == 0:
                print("‚úÖ LDPlayer –∑–∞–ø—É—â–µ–Ω")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ LDPlayer: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ LDPlayer: {e}")
            return False
    
    def start_emulator(self, name, path):
        """–ó–∞–ø—É—Å–∫ —ç–º—É–ª—è—Ç–æ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏"""
        self.emulator_name = name
        self.emulator_path = path
        
        if name == "Android Studio AVD":
            return self.start_android_studio_avd(path)
        elif name == "Genymotion":
            return self.start_genymotion(path)
        elif name == "BlueStacks":
            return self.start_bluestacks(path)
        elif name == "NoxPlayer":
            return self.start_noxplayer(path)
        elif name == "LDPlayer":
            return self.start_ldplayer(path)
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç–º—É–ª—è—Ç–æ—Ä: {name}")
            return False
    
    def wait_for_device(self, timeout=300):
        """–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        print("‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...")
        
        for i in range(timeout):
            try:
                result = subprocess.run([self.adb_path, "devices"], 
                                      capture_output=True, text=True, encoding='utf-8')
                
                lines = result.stdout.strip().split('\n')[1:]
                devices = []
                
                for line in lines:
                    if line.strip() and '\t' in line:
                        device_id, status = line.split('\t')
                        if status == 'device':
                            devices.append(device_id)
                
                if devices:
                    self.device_id = devices[0]
                    print(f"‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ: {self.device_id}")
                    return True
                
                print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ... ({i+1}/{timeout})")
                time.sleep(2)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
                time.sleep(2)
        
        print("‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª–æ—Å—å")
        return False
    
    def install_and_run_app(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –ò—â–µ–º APK
            apk_paths = [
                self.project_dir / "MedicalNotes-v2.2-fixed.apk",
                self.project_dir / "MedicalNotes-v2.1-update.apk",
                self.project_dir / "MedicalNotes-with-alarm-sound.apk"
            ]
            
            apk_path = None
            for path in apk_paths:
                if path.exists():
                    apk_path = path
                    break
            
            if not apk_path:
                print("‚ùå APK –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            print(f"üì± –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º APK
            result = subprocess.run([
                self.adb_path, "-s", self.device_id, "install", "-r", str(apk_path)
            ], capture_output=True, text=True, encoding='utf-8')
            
            if "Success" in result.stdout:
                print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
                result = subprocess.run([
                    self.adb_path, "-s", self.device_id, "shell", 
                    "am", "start", "-n", "com.medicalnotes.app/.MainActivity"
                ], capture_output=True, text=True, encoding='utf-8')
                
                if result.returncode == 0:
                    print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {result.stderr}")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    def create_launcher(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞—Ç–æ—Ä–∞"""
        try:
            print("üìã –°–æ–∑–¥–∞–µ–º –∑–∞–ø—É—Å–∫–∞—Ç–æ—Ä...")
            
            launcher_content = f"""@echo off
echo –ó–∞–ø—É—Å–∫ MedicalNotes –Ω–∞ {self.emulator_name}...
python universal_emulator.py
pause
"""
            
            launcher_path = self.project_dir / f"–ó–∞–ø—É—Å—Ç–∏—Ç—å_{self.emulator_name.replace(' ', '_')}.bat"
            with open(launcher_path, "w", encoding="utf-8") as f:
                f.write(launcher_content)
            
            print(f"‚úÖ –ó–∞–ø—É—Å–∫–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω: {launcher_path}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞—Ç–æ—Ä–∞: {e}")
            return False
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥"""
        print("üöÄ Universal Emulator Launcher")
        print("=" * 35)
        
        if not self.find_adb():
            return False
        
        # –ò—â–µ–º —ç–º—É–ª—è—Ç–æ—Ä—ã
        emulators = self.find_emulators()
        
        if not emulators:
            print("\n‚ùå –≠–º—É–ª—è—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print("\nüí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤:")
            print("   1. BlueStacks: https://www.bluestacks.com/")
            print("   2. NoxPlayer: https://www.bignox.com/")
            print("   3. LDPlayer: https://www.ldplayer.net/")
            print("   4. Genymotion: https://www.genymotion.com/")
            return False
        
        print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {len(emulators)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
        for i, (name, path) in enumerate(emulators.items(), 1):
            print(f"   {i}. {name}: {path}")
        
        # –í—ã–±–∏—Ä–∞–µ–º —ç–º—É–ª—è—Ç–æ—Ä
        try:
            choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ —ç–º—É–ª—è—Ç–æ—Ä (1-{len(emulators)}): ")
            choice = int(choice) - 1
            
            if 0 <= choice < len(emulators):
                emulator_list = list(emulators.items())
                name, path = emulator_list[choice]
                
                print(f"\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º {name}...")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —ç–º—É–ª—è—Ç–æ—Ä
                if self.start_emulator(name, path):
                    print(f"\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è {name}:")
                    if name == "Genymotion":
                        print("1. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≥—Ä—É–∑–∫–∏ Genymotion")
                        print("2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–µ—Å–ª–∏ –Ω–µ—Ç)")
                        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
                        print("4. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ Android")
                    elif name == "Android Studio AVD":
                        print("1. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ AVD")
                        print("2. –†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ —ç–∫—Ä–∞–Ω –µ—Å–ª–∏ –Ω—É–∂–Ω–æ")
                    else:
                        print("1. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞")
                        print("2. –†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ —ç–∫—Ä–∞–Ω –µ—Å–ª–∏ –Ω—É–∂–Ω–æ")
                    
                    print("3. –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                    input()
                    
                    # –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                    if self.wait_for_device():
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                        if self.install_and_run_app():
                            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—É—Å–∫–∞—Ç–æ—Ä
                            self.create_launcher()
                            
                            print(f"\nüéâ MedicalNotes –∑–∞–ø—É—â–µ–Ω –Ω–∞ {name}!")
                            print(f"üí° –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
                            print(f"   –ó–∞–ø—É—Å—Ç–∏—Ç—å_{name.replace(' ', '_')}.bat")
                            
                            return True
                        else:
                            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
                            return False
                    else:
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
                        return False
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å {name}")
                    return False
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                return False
                
        except (ValueError, KeyboardInterrupt):
            print("\nüëã –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False

def main():
    launcher = UniversalEmulator()
    launcher.run()

if __name__ == "__main__":
    main() 