#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë—ã—Å—Ç—Ä—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã –±–µ–∑ VirtualBox
BlueStacks –∏ NoxPlayer - –ª–µ–≥–∫–∏–µ –∏ –±—ã—Å—Ç—Ä—ã–µ
"""

import os
import sys
import subprocess
import time
import urllib.request
from pathlib import Path

class FastEmulatorLauncher:
    def __init__(self):
        self.project_dir = Path(__file__).parent
        self.adb_path = None
        self.device_id = None
        
    def find_adb(self):
        """–ü–æ–∏—Å–∫ ADB"""
        possible_paths = [
            os.path.expanduser("~/AppData/Local/Android/Sdk/platform-tools/adb.exe"),
            "C:/Users/%USERNAME%/AppData/Local/Android/Sdk/platform-tools/adb.exe",
            "C:/Android/Sdk/platform-tools/adb.exe",
            "C:/Program Files/Android/Android Studio/sdk/platform-tools/adb.exe",
            "adb.exe"
        ]
        
        for path in possible_paths:
            path = os.path.expandvars(path)
            if os.path.exists(path):
                self.adb_path = path
                print(f"‚úÖ ADB –Ω–∞–π–¥–µ–Ω: {path}")
                return True
                
        print("‚ùå ADB –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    def find_bluestacks(self):
        """–ü–æ–∏—Å–∫ BlueStacks"""
        possible_paths = [
            "C:/Program Files/BlueStacks_nxt/HD-Player.exe",
            "C:/Program Files (x86)/BlueStacks_nxt/HD-Player.exe",
            "C:/Program Files/BlueStacks/HD-Player.exe",
            "C:/Program Files (x86)/BlueStacks/HD-Player.exe"
        ]
        
        for path in possible_paths:
            if os.path.exists(path):
                print(f"‚úÖ BlueStacks –Ω–∞–π–¥–µ–Ω: {path}")
                return path
                
        print("‚ùå BlueStacks –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    def find_noxplayer(self):
        """–ü–æ–∏—Å–∫ NoxPlayer"""
        possible_paths = [
            "C:/Program Files/Nox/bin/Nox.exe",
            "C:/Program Files (x86)/Nox/bin/Nox.exe"
        ]
        
        for path in possible_paths:
            if os.path.exists(path):
                print(f"‚úÖ NoxPlayer –Ω–∞–π–¥–µ–Ω: {path}")
                return path
                
        print("‚ùå NoxPlayer –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    def download_bluestacks(self):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ BlueStacks"""
        try:
            print("üì• –°–∫–∞—á–∏–≤–∞–µ–º BlueStacks...")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º BlueStacks
            url = "https://cdn3.bluestacks.com/downloads/windows/nxt/5.10.0.1082/5.10.0.1082_BlueStacksInstaller_5.10.0.1082_native.exe"
            filename = "BlueStacks-Installer.exe"
            
            print(f"–°–∫–∞—á–∏–≤–∞–µ–º {filename}...")
            urllib.request.urlretrieve(url, filename)
            
            print(f"‚úÖ {filename} —Å–∫–∞—á–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return filename
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
            return None
    
    def download_noxplayer(self):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ NoxPlayer"""
        try:
            print("üì• –°–∫–∞—á–∏–≤–∞–µ–º NoxPlayer...")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º NoxPlayer
            url = "https://res06.bignox.com/full/20231201/NoxInstaller_7.0.5.9_full.exe"
            filename = "NoxPlayer-Installer.exe"
            
            print(f"–°–∫–∞—á–∏–≤–∞–µ–º {filename}...")
            urllib.request.urlretrieve(url, filename)
            
            print(f"‚úÖ {filename} —Å–∫–∞—á–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return filename
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
            return None
    
    def start_bluestacks(self):
        """–ó–∞–ø—É—Å–∫ BlueStacks"""
        bluestacks_path = self.find_bluestacks()
        if not bluestacks_path:
            print("‚ùå BlueStacks –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        try:
            print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º BlueStacks...")
            subprocess.Popen([bluestacks_path])
            print("‚úÖ BlueStacks –∑–∞–ø—É—â–µ–Ω")
            print("üí° –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ BlueStacks")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ BlueStacks: {e}")
            return False
    
    def start_noxplayer(self):
        """–ó–∞–ø—É—Å–∫ NoxPlayer"""
        nox_path = self.find_noxplayer()
        if not nox_path:
            print("‚ùå NoxPlayer –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        try:
            print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º NoxPlayer...")
            subprocess.Popen([nox_path])
            print("‚úÖ NoxPlayer –∑–∞–ø—É—â–µ–Ω")
            print("üí° –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ NoxPlayer")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ NoxPlayer: {e}")
            return False
    
    def wait_for_device(self, timeout=180):
        """–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        print("‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...")
        
        for i in range(timeout):
            try:
                result = subprocess.run([self.adb_path, "devices"], 
                                      capture_output=True, text=True, encoding='utf-8')
                
                lines = result.stdout.strip().split('\n')[1:]
                devices = []
                
                for line in lines:
                    if line.strip() and '\t' in line:
                        device_id, status = line.split('\t')
                        if status == 'device':
                            devices.append(device_id)
                
                if devices:
                    self.device_id = devices[0]
                    print(f"‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ: {self.device_id}")
                    return True
                
                print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ... ({i+1}/{timeout})")
                time.sleep(1)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
                time.sleep(1)
        
        print("‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª–æ—Å—å")
        return False
    
    def install_and_run_app(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –ò—â–µ–º APK
            apk_paths = [
                self.project_dir / "MedicalNotes-v2.2-fixed.apk",
                self.project_dir / "MedicalNotes-v2.1-update.apk",
                self.project_dir / "MedicalNotes-with-alarm-sound.apk"
            ]
            
            apk_path = None
            for path in apk_paths:
                if path.exists():
                    apk_path = path
                    break
            
            if not apk_path:
                print("‚ùå APK –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            print(f"üì± –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º APK
            result = subprocess.run([
                self.adb_path, "-s", self.device_id, "install", "-r", str(apk_path)
            ], capture_output=True, text=True, encoding='utf-8')
            
            if "Success" in result.stdout:
                print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
                result = subprocess.run([
                    self.adb_path, "-s", self.device_id, "shell", 
                    "am", "start", "-n", "com.medicalnotes.app/.MainActivity"
                ], capture_output=True, text=True, encoding='utf-8')
                
                if result.returncode == 0:
                    print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {result.stderr}")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    def create_quick_launcher(self, emulator_name):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
        try:
            print("üìã –°–æ–∑–¥–∞–µ–º –±—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫...")
            
            launcher_content = f"""@echo off
echo –ó–∞–ø—É—Å–∫ MedicalNotes –Ω–∞ {emulator_name}...
python fast_emulator.py
pause
"""
            
            launcher_path = self.project_dir / f"–ó–∞–ø—É—Å—Ç–∏—Ç—å_{emulator_name}.bat"
            with open(launcher_path, "w", encoding="utf-8") as f:
                f.write(launcher_content)
            
            print(f"‚úÖ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω: {launcher_path}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞: {e}")
            return False
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥"""
        print("üöÄ Fast Emulator Launcher")
        print("=" * 30)
        
        if not self.find_adb():
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã
        bluestacks = self.find_bluestacks()
        noxplayer = self.find_noxplayer()
        
        if not bluestacks and not noxplayer:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –±—ã—Å—Ç—Ä–æ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–∞")
            print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤:")
            print("   1. BlueStacks (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
            print("   2. NoxPlayer")
            
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —ç–º—É–ª—è—Ç–æ—Ä –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (1-2): ")
            
            if choice == "1":
                installer_path = self.download_bluestacks()
                if installer_path:
                    print(f"‚úÖ BlueStacks —Å–∫–∞—á–∞–Ω: {installer_path}")
                    print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ")
            elif choice == "2":
                installer_path = self.download_noxplayer()
                if installer_path:
                    print(f"‚úÖ NoxPlayer —Å–∫–∞—á–∞–Ω: {installer_path}")
                    print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ")
            
            return False
        
        # –í—ã–±–∏—Ä–∞–µ–º —ç–º—É–ª—è—Ç–æ—Ä
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã:")
        if bluestacks:
            print("1. BlueStacks")
        if noxplayer:
            print("2. NoxPlayer")
        
        try:
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —ç–º—É–ª—è—Ç–æ—Ä (–Ω–æ–º–µ—Ä): ")
            
            if choice == "1" and bluestacks:
                self.start_bluestacks()
                emulator_name = "BlueStacks"
            elif choice == "2" and noxplayer:
                self.start_noxplayer()
                emulator_name = "NoxPlayer"
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                return False
            
            # –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            if self.wait_for_device():
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                if self.install_and_run_app():
                    # –°–æ–∑–¥–∞–µ–º –±—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫
                    self.create_quick_launcher(emulator_name)
                    
                    print(f"\nüéâ {emulator_name} –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
                    print("üí° –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                    print(f"üí° –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ó–∞–ø—É—Å—Ç–∏—Ç—å_{emulator_name}.bat")
                    
                    return True
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
                    return False
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
                return False
                
        except KeyboardInterrupt:
            print("\nüëã –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False

def main():
    launcher = FastEmulatorLauncher()
    launcher.run()

if __name__ == "__main__":
    main() 