#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ MedicalNotes
"""

import os
import sys
import subprocess
import time
from pathlib import Path

def find_adb():
    """–ü–æ–∏—Å–∫ ADB"""
    possible_paths = [
        os.path.expanduser("~/AppData/Local/Android/Sdk/platform-tools/adb.exe"),
        "C:/Users/%USERNAME%/AppData/Local/Android/Sdk/platform-tools/adb.exe",
        "C:/Android/Sdk/platform-tools/adb.exe",
        "C:/Program Files/Android/Android Studio/sdk/platform-tools/adb.exe",
        "adb.exe"
    ]
    
    for path in possible_paths:
        path = os.path.expandvars(path)
        if os.path.exists(path):
            print(f"‚úÖ ADB –Ω–∞–π–¥–µ–Ω: {path}")
            return path
            
    print("‚ùå ADB –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return None

def find_apk():
    """–ü–æ–∏—Å–∫ APK"""
    project_dir = Path(__file__).parent
    possible_paths = [
        project_dir / "MedicalNotes-v2.2-fixed.apk",
        project_dir / "MedicalNotes-v2.1-update.apk",
        project_dir / "MedicalNotes-with-alarm-sound.apk",
        project_dir / "app" / "build" / "outputs" / "apk" / "debug" / "app-debug.apk"
    ]
    
    for path in possible_paths:
        if path.exists():
            print(f"‚úÖ APK –Ω–∞–π–¥–µ–Ω: {path}")
            return path
            
    print("‚ùå APK –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return None

def check_devices(adb_path):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    try:
        result = subprocess.run([adb_path, "devices"], 
                              capture_output=True, text=True, encoding='utf-8')
        
        lines = result.stdout.strip().split('\n')[1:]
        devices = []
        
        for line in lines:
            if line.strip() and '\t' in line:
                device_id, status = line.split('\t')
                if status == 'device':
                    devices.append(device_id)
        
        if devices:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(devices)}")
            for device in devices:
                print(f"   - {device}")
            return devices
        else:
            print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç–º—É–ª—è—Ç–æ—Ä –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
            return []
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
        return []

def install_and_run(adb_path, apk_path, device_id):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        print(f"üì± –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ {device_id}...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º APK
        result = subprocess.run([
            adb_path, "-s", device_id, "install", "-r", str(apk_path)
        ], capture_output=True, text=True, encoding='utf-8')
        
        if "Success" in result.stdout:
            print("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
            result = subprocess.run([
                adb_path, "-s", device_id, "shell", 
                "am", "start", "-n", "com.medicalnotes.app/.MainActivity"
            ], capture_output=True, text=True, encoding='utf-8')
            
            if result.returncode == 0:
                print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {result.stderr}")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    print("üè• MedicalNotes Quick Check & Run")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ADB
    adb_path = find_adb()
    if not adb_path:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º APK
    apk_path = find_apk()
    if not apk_path:
        print("üí° –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ APK")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    devices = check_devices(adb_path)
    if not devices:
        print("\nüìã –ß—Ç–æ –¥–µ–ª–∞—Ç—å:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Genymotion: python light_emulator.py")
        print("2. –°–æ–∑–¥–∞–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
        print("4. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ: python check_and_run.py")
        return False
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–∞ –ø–µ—Ä–≤–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
    device_id = devices[0]
    if len(devices) > 1:
        print(f"üì± –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º: {device_id}")
    
    success = install_and_run(adb_path, apk_path, device_id)
    
    if success:
        print("\nüéâ –ì–æ—Ç–æ–≤–æ! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.")
        print("üí° –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤: adb logcat")
    
    return success

if __name__ == "__main__":
    main() 