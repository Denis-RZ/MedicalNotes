#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –≥—Ä—É–ø–ø –¥–ª—è MedicalNotes
"""

import subprocess
import time
import os

def run_adb_command(command):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç ADB –∫–æ–º–∞–Ω–¥—É"""
    try:
        result = subprocess.run(f"adb {command}", shell=True, capture_output=True, text=True)
        return result.returncode == 0, result.stdout, result.stderr
    except Exception as e:
        return False, "", str(e)

def install_apk():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç APK –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"""
    print("üì± –£—Å—Ç–∞–Ω–æ–≤–∫–∞ APK...")
    apk_path = "app/build/outputs/apk/debug/app-debug.apk"
    
    if not os.path.exists(apk_path):
        print("‚ùå APK –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç.")
        return False
    
    success, stdout, stderr = run_adb_command(f"install -r {apk_path}")
    
    if success:
        print("‚úÖ APK —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ APK: {stderr}")
        return False

def start_app():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    package_name = "com.medicalnotes.app"
    activity_name = "com.medicalnotes.app.MainActivity"
    
    success, stdout, stderr = run_adb_command(f"shell am start -n {package_name}/{activity_name}")
    
    if success:
        print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {stderr}")
        return False

def click_test_groups_button():
    """–ù–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø"""
    print("üîò –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–¢–ï–°–¢ –ì–†–£–ü–ü'...")
    
    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–Ω–æ–ø–∫–∏ (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ, –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É—Ç–æ—á–Ω–∏—Ç—å)
    x, y = 500, 1500
    
    success, stdout, stderr = run_adb_command(f"shell input tap {x} {y}")
    
    if success:
        print("‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏: {stderr}")
        return False

def get_logs():
    """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤...")
    
    package_name = "com.medicalnotes.app"
    success, stdout, stderr = run_adb_command(f"logcat -d -s {package_name}:*")
    
    if success:
        return stdout
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {stderr}")
        return ""

def analyze_test_results(logs):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤"""
    print("üîç –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤...")
    
    lines = logs.split('\n')
    test_results = []
    errors = []
    warnings = []
    
    for line in lines:
        if "=== –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ì–†–£–ü–ü ===" in line:
            test_results.append("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å")
        elif "‚ùå –û–®–ò–ë–ö–ê" in line:
            errors.append(line.strip())
        elif "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï" in line:
            warnings.append(line.strip())
        elif "‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û" in line:
            test_results.append("–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        elif "=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===" in line:
            test_results.append("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
    print(f"   - –¢–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {len(test_results)}")
    print(f"   - –û—à–∏–±–æ–∫: {len(errors)}")
    print(f"   - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(warnings)}")
    
    if errors:
        print("\n‚ùå –ù–ê–ô–î–ï–ù–ù–´–ï –û–®–ò–ë–ö–ò:")
        for error in errors[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫
            print(f"   {error}")
    
    if warnings:
        print("\n‚ö†Ô∏è –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
        for warning in warnings[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
            print(f"   {warning}")
    
    return len(errors), len(warnings)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê –ì–†–£–ü–ü")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    print("üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...")
    success, stdout, stderr = run_adb_command("devices")
    
    if "device" not in stdout:
        print("‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ –≤–∫–ª—é—á–∏—Ç–µ USB –æ—Ç–ª–∞–¥–∫—É.")
        return
    
    print("‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º APK
    if not install_apk():
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    if not start_app():
        return
    
    # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    time.sleep(3)
    
    # –û—á–∏—â–∞–µ–º –ª–æ–≥–∏
    run_adb_command("logcat -c")
    
    # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø
    if not click_test_groups_button():
        return
    
    # –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤...")
    time.sleep(5)
    
    # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏
    logs = get_logs()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    error_count, warning_count = analyze_test_results(logs)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª
    with open("group_test_results.log", "w", encoding="utf-8") as f:
        f.write(logs)
    
    print(f"\nüìÑ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: group_test_results.log")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if error_count == 0 and warning_count == 0:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    elif error_count == 0:
        print(f"\n‚ö†Ô∏è –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò ({warning_count})")
    else:
        print(f"\n‚ùå –ù–ê–ô–î–ï–ù–´ –û–®–ò–ë–ö–ò ({error_count}) –ò –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø ({warning_count})")

if __name__ == "__main__":
    main() 