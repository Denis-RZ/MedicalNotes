#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ Genymotion
"""

import os
import sys
import subprocess
import time
from pathlib import Path

def find_adb():
    """–ü–æ–∏—Å–∫ ADB"""
    possible_paths = [
        os.path.expanduser("~/AppData/Local/Android/Sdk/platform-tools/adb.exe"),
        "C:/Users/%USERNAME%/AppData/Local/Android/Sdk/platform-tools/adb.exe",
        "C:/Android/Sdk/platform-tools/adb.exe",
        "C:/Program Files/Android/Android Studio/sdk/platform-tools/adb.exe",
        "adb.exe"
    ]
    
    for path in possible_paths:
        path = os.path.expandvars(path)
        if os.path.exists(path):
            print(f"‚úÖ ADB –Ω–∞–π–¥–µ–Ω: {path}")
            return path
            
    print("‚ùå ADB –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return None

def check_devices(adb_path):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    try:
        result = subprocess.run([adb_path, "devices"], 
                              capture_output=True, text=True, encoding='utf-8')
        
        lines = result.stdout.strip().split('\n')[1:]
        devices = []
        
        for line in lines:
            if line.strip() and '\t' in line:
                device_id, status = line.split('\t')
                if status == 'device':
                    devices.append(device_id)
        
        if devices:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(devices)}")
            for device in devices:
                print(f"   - {device}")
            return devices
        else:
            print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            return []
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
        return []

def setup_autostart(adb_path, device_id):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞"""
    try:
        print(f"üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –Ω–∞ {device_id}...")
        
        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
        autostart_script = """#!/system/bin/sh
# –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ MedicalNotes –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
sleep 15
am start -n com.medicalnotes.app/.MainActivity
"""
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        script_path = Path("autostart_medicalnotes.sh")
        with open(script_path, "w") as f:
            f.write(autostart_script)
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        result = subprocess.run([
            adb_path, "-s", device_id, "push", 
            str(script_path), "/data/local/tmp/autostart_medicalnotes.sh"
        ], capture_output=True, text=True, encoding='utf-8')
        
        if result.returncode != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞: {result.stderr}")
            return False
        
        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
        result = subprocess.run([
            adb_path, "-s", device_id, "shell", 
            "chmod", "755", "/data/local/tmp/autostart_medicalnotes.sh"
        ], capture_output=True, text=True, encoding='utf-8')
        
        if result.returncode != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∞–≤: {result.stderr}")
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –≤ init.rc (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
        print("üìù –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫...")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
        autostart_cmd = "exec /system/bin/sh /data/local/tmp/autostart_medicalnotes.sh"
        
        # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        result = subprocess.run([
            adb_path, "-s", device_id, "shell", 
            "echo", autostart_cmd, ">>", "/system/etc/init.d/99autostart"
        ], capture_output=True, text=True, encoding='utf-8')
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        script_path.unlink()
        
        print("‚úÖ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print("üí° –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —ç–º—É–ª—è—Ç–æ—Ä–∞")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞: {e}")
        return False

def create_quick_launcher():
    """–°–æ–∑–¥–∞–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
    try:
        print("üìã –°–æ–∑–¥–∞–µ–º –±—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫...")
        
        launcher_content = """@echo off
echo –ó–∞–ø—É—Å–∫ MedicalNotes —Å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–æ–º...
python auto_launch.py
pause
"""
        
        launcher_path = Path("–ó–∞–ø—É—Å—Ç–∏—Ç—å_—Å_–∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–æ–º.bat")
        with open(launcher_path, "w", encoding="utf-8") as f:
            f.write(launcher_content)
        
        print(f"‚úÖ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω: {launcher_path}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞: {e}")
        return False

def main():
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ MedicalNotes")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ADB
    adb_path = find_adb()
    if not adb_path:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    devices = check_devices(adb_path)
    if not devices:
        print("\nüìã –ß—Ç–æ –¥–µ–ª–∞—Ç—å:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Genymotion: python light_emulator.py")
        print("2. –°–æ–∑–¥–∞–π—Ç–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
        print("3. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ: python setup_autostart.py")
        return False
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –Ω–∞ –ø–µ—Ä–≤–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
    device_id = devices[0]
    if len(devices) > 1:
        print(f"üì± –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º: {device_id}")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫
    if setup_autostart(adb_path, device_id):
        # –°–æ–∑–¥–∞–µ–º –±—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫
        create_quick_launcher()
        
        print("\nüéâ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("üí° –¢–µ–ø–µ—Ä—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        print("üí° –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ó–∞–ø—É—Å—Ç–∏—Ç—å_—Å_–∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–æ–º.bat")
        
        return True
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫")
        return False

if __name__ == "__main__":
    main() 