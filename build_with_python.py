#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∫–∏ Android –ø—Ä–æ–µ–∫—Ç–∞ MedicalNotes
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–±–æ—Ä–∫–∏
"""

import os
import sys
import subprocess
import time
from pathlib import Path

def print_step(step, description):
    """–í—ã–≤–æ–¥–∏—Ç —à–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    print(f"\n{'='*60}")
    print(f"–®–ê–ì {step}: {description}")
    print(f"{'='*60}")

def print_info(message):
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    print(f"[INFO] {message}")

def print_error(message):
    """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
    print(f"[ERROR] {message}")

def print_success(message):
    """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ"""
    print(f"[SUCCESS] {message}")

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–±–æ—Ä–∫–∏"""
    print_step(1, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è Gradle –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    gradle_home = Path('C:/gradle_home')
    if not gradle_home.exists():
        print_info("–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ C:/gradle_home...")
        gradle_home.mkdir(parents=True, exist_ok=True)
        print_success("–ü–∞–ø–∫–∞ C:/gradle_home —Å–æ–∑–¥–∞–Ω–∞")
    else:
        print_info("–ü–∞–ø–∫–∞ C:/gradle_home —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Java
    try:
        result = subprocess.run(['java', '-version'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print_info("Java –Ω–∞–π–¥–µ–Ω")
            print_info(result.stderr.split('\n')[0])  # –í–µ—Ä—Å–∏—è Java
        else:
            print_error("Java –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Java: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ gradlew
    if not os.path.exists('gradlew.bat'):
        print_error("–§–∞–π–ª gradlew.bat –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    print_info("gradlew.bat –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ gradle wrapper jar
    if not os.path.exists('gradle/wrapper/gradle-wrapper.jar'):
        print_error("gradle-wrapper.jar –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    print_info("gradle-wrapper.jar –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
    required_files = [
        'build.gradle',
        'app/build.gradle',
        'settings.gradle',
        'gradle.properties'
    ]
    
    for file in required_files:
        if not os.path.exists(file):
            print_error(f"–§–∞–π–ª {file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        print_info(f"–§–∞–π–ª {file} –Ω–∞–π–¥–µ–Ω")
    
    print_success("–í—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
    return True

def clean_project():
    """–û—á–∏—â–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç"""
    print_step(2, "–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞")
    
    try:
        print_info("–ó–∞–ø—É—Å–∫ gradlew clean...")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
        env = os.environ.copy()
        env['GRADLE_USER_HOME'] = 'C:\\gradle_home'
        print_info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω GRADLE_USER_HOME: {env['GRADLE_USER_HOME']}")
        
        result = subprocess.run(['gradlew.bat', 'clean'], 
                              capture_output=True, text=True, timeout=60, env=env)
        
        if result.returncode == 0:
            print_success("–ü—Ä–æ–µ–∫—Ç –æ—á–∏—â–µ–Ω")
            if result.stdout:
                print_info("–í—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã:")
                print(result.stdout)
        else:
            print_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–æ–µ–∫—Ç–∞")
            if result.stderr:
                print_error("–û—à–∏–±–∫–∞:")
                print(result.stderr)
            return False
    except subprocess.TimeoutExpired:
        print_error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–æ–µ–∫—Ç–∞")
        return False
    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
        return False
    
    return True

def build_debug_apk():
    """–°–æ–±–∏—Ä–∞–µ—Ç debug APK"""
    print_step(3, "–°–±–æ—Ä–∫–∞ debug APK")
    
    try:
        print_info("–ó–∞–ø—É—Å–∫ gradlew assembleDebug...")
        print_info("–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
        env = os.environ.copy()
        env['GRADLE_USER_HOME'] = 'C:\\gradle_home'
        print_info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω GRADLE_USER_HOME: {env['GRADLE_USER_HOME']}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É —Å –≤—ã–≤–æ–¥–æ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        process = subprocess.Popen(
            ['gradlew.bat', 'assembleDebug'],
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
            bufsize=1,
            universal_newlines=True,
            env=env
        )
        
        # –í—ã–≤–æ–¥–∏–º –≤—ã–≤–æ–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        for line in process.stdout:
            print(line.rstrip())
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        return_code = process.wait()
        
        if return_code == 0:
            print_success("APK —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω!")
            return True
        else:
            print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ. –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {return_code}")
            return False
            
    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ: {e}")
        return False

def find_apk():
    """–ò—â–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã–π APK —Ñ–∞–π–ª"""
    print_step(4, "–ü–æ–∏—Å–∫ APK —Ñ–∞–π–ª–∞")
    
    apk_path = Path('app/build/outputs/apk/debug/app-debug.apk')
    
    if apk_path.exists():
        size_mb = apk_path.stat().st_size / (1024 * 1024)
        print_success(f"APK –Ω–∞–π–¥–µ–Ω: {apk_path}")
        print_info(f"–†–∞–∑–º–µ—Ä: {size_mb:.2f} –ú–ë")
        print_info(f"–ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {apk_path.absolute()}")
        return True
    else:
        print_error("APK —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print_info("–û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å: app/build/outputs/apk/debug/app-debug.apk")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –°–±–æ—Ä–∫–∞ Android –ø—Ä–æ–µ–∫—Ç–∞ MedicalNotes")
    print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {time.strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not os.path.exists('build.gradle'):
        print_error("–§–∞–π–ª build.gradle –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞.")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    if not check_requirements():
        print_error("–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã. –°–±–æ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
        return False
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–æ–µ–∫—Ç
    if not clean_project():
        print_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–æ–µ–∫—Ç–∞. –°–±–æ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
        return False
    
    # –°–æ–±–∏—Ä–∞–µ–º APK
    if not build_debug_apk():
        print_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ APK. –°–±–æ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
        return False
    
    # –ò—â–µ–º APK
    if not find_apk():
        print_error("APK –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏.")
        return False
    
    print("\n" + "="*60)
    print_success("üéâ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print(f"–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {time.strftime('%Y-%m-%d %H:%M:%S')}")
    print("="*60)
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n[INFO] –°–±–æ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print_error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 