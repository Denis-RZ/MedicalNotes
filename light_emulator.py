#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ª–µ–≥–∫–∏—Ö Android —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Genymotion, BlueStacks, NoxPlayer
"""

import os
import sys
import subprocess
import time
import json
from pathlib import Path

class LightEmulatorLauncher:
    def __init__(self):
        self.project_dir = Path(__file__).parent
        self.adb_path = None
        
    def find_adb(self):
        """–ü–æ–∏—Å–∫ ADB –≤ —Å–∏—Å—Ç–µ–º–µ"""
        possible_paths = [
            os.path.expanduser("~/AppData/Local/Android/Sdk/platform-tools/adb.exe"),
            "C:/Users/%USERNAME%/AppData/Local/Android/Sdk/platform-tools/adb.exe",
            "C:/Android/Sdk/platform-tools/adb.exe",
            "C:/Program Files/Android/Android Studio/sdk/platform-tools/adb.exe",
            "adb.exe"
        ]
        
        for path in possible_paths:
            path = os.path.expandvars(path)
            if os.path.exists(path):
                self.adb_path = path
                print(f"‚úÖ ADB –Ω–∞–π–¥–µ–Ω: {path}")
                return True
                
        print("‚ùå ADB –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    def find_genymotion(self):
        """–ü–æ–∏—Å–∫ Genymotion"""
        possible_paths = [
            "C:/Program Files/Genymobile/Genymotion/genymotion.exe",
            "C:/Program Files (x86)/Genymobile/Genymotion/genymotion.exe",
            os.path.expanduser("~/AppData/Local/Genymobile/Genymotion/genymotion.exe")
        ]
        
        for path in possible_paths:
            if os.path.exists(path):
                print(f"‚úÖ Genymotion –Ω–∞–π–¥–µ–Ω: {path}")
                return path
                
        print("‚ùå Genymotion –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    def find_bluestacks(self):
        """–ü–æ–∏—Å–∫ BlueStacks"""
        possible_paths = [
            "C:/Program Files/BlueStacks_nxt/HD-Player.exe",
            "C:/Program Files (x86)/BlueStacks_nxt/HD-Player.exe",
            "C:/Program Files/BlueStacks/HD-Player.exe",
            "C:/Program Files (x86)/BlueStacks/HD-Player.exe"
        ]
        
        for path in possible_paths:
            if os.path.exists(path):
                print(f"‚úÖ BlueStacks –Ω–∞–π–¥–µ–Ω: {path}")
                return path
                
        print("‚ùå BlueStacks –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    def find_noxplayer(self):
        """–ü–æ–∏—Å–∫ NoxPlayer"""
        possible_paths = [
            "C:/Program Files/Nox/bin/Nox.exe",
            "C:/Program Files (x86)/Nox/bin/Nox.exe"
        ]
        
        for path in possible_paths:
            if os.path.exists(path):
                print(f"‚úÖ NoxPlayer –Ω–∞–π–¥–µ–Ω: {path}")
                return path
                
        print("‚ùå NoxPlayer –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    def install_light_emulator(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–µ–≥–∫–æ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–∞"""
        print("üì± –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–µ–≥–∫–æ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–∞...")
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:")
        print("1. Genymotion (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
        print("2. BlueStacks")
        print("3. NoxPlayer")
        
        try:
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —ç–º—É–ª—è—Ç–æ—Ä (1-3): ")
            
            if choice == "1":
                print("üì• –°–∫–∞—á–∏–≤–∞–µ–º Genymotion...")
                # –°–∫–∞—á–∏–≤–∞–µ–º Genymotion
                url = "https://dl.genymotion.com/releases/genymotion-3.5.0/genymotion-3.5.0.exe"
                self.download_file(url, "genymotion-installer.exe")
                print("‚úÖ Genymotion —Å–∫–∞—á–∞–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫.")
                
            elif choice == "2":
                print("üì• –°–∫–∞—á–∏–≤–∞–µ–º BlueStacks...")
                url = "https://cdn3.bluestacks.com/downloads/windows/nxt/5.10.0.1082/5.10.0.1082_BlueStacksInstaller_5.10.0.1082_native.exe"
                self.download_file(url, "bluestacks-installer.exe")
                print("‚úÖ BlueStacks —Å–∫–∞—á–∞–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫.")
                
            elif choice == "3":
                print("üì• –°–∫–∞—á–∏–≤–∞–µ–º NoxPlayer...")
                url = "https://res06.bignox.com/full/20231201/NoxInstaller_7.0.5.9_full.exe"
                self.download_file(url, "noxplayer-installer.exe")
                print("‚úÖ NoxPlayer —Å–∫–∞—á–∞–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫.")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def download_file(self, url, filename):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        try:
            import urllib.request
            print(f"–°–∫–∞—á–∏–≤–∞–µ–º {filename}...")
            urllib.request.urlretrieve(url, filename)
            print(f"‚úÖ {filename} —Å–∫–∞—á–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
    
    def start_genymotion(self):
        """–ó–∞–ø—É—Å–∫ Genymotion"""
        genymotion_path = self.find_genymotion()
        if not genymotion_path:
            print("‚ùå Genymotion –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞.")
            return False
        
        try:
            print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Genymotion...")
            subprocess.Popen([genymotion_path])
            print("‚úÖ Genymotion –∑–∞–ø—É—â–µ–Ω")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Genymotion: {e}")
            return False
    
    def start_bluestacks(self):
        """–ó–∞–ø—É—Å–∫ BlueStacks"""
        bluestacks_path = self.find_bluestacks()
        if not bluestacks_path:
            print("‚ùå BlueStacks –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞.")
            return False
        
        try:
            print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º BlueStacks...")
            subprocess.Popen([bluestacks_path])
            print("‚úÖ BlueStacks –∑–∞–ø—É—â–µ–Ω")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ BlueStacks: {e}")
            return False
    
    def start_noxplayer(self):
        """–ó–∞–ø—É—Å–∫ NoxPlayer"""
        nox_path = self.find_noxplayer()
        if not nox_path:
            print("‚ùå NoxPlayer –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞.")
            return False
        
        try:
            print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º NoxPlayer...")
            subprocess.Popen([nox_path])
            print("‚úÖ NoxPlayer –∑–∞–ø—É—â–µ–Ω")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ NoxPlayer: {e}")
            return False
    
    def wait_for_device(self, timeout=120):
        """–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        print("‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...")
        
        for i in range(timeout):
            try:
                result = subprocess.run([self.adb_path, "devices"], 
                                      capture_output=True, text=True, encoding='utf-8')
                
                lines = result.stdout.strip().split('\n')[1:]
                devices = []
                
                for line in lines:
                    if line.strip() and '\t' in line:
                        device_id, status = line.split('\t')
                        if status == 'device':
                            devices.append(device_id)
                
                if devices:
                    print(f"‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ: {devices[0]}")
                    return devices[0]
                
                print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ... ({i+1}/{timeout})")
                time.sleep(1)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
                time.sleep(1)
        
        print("‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª–æ—Å—å")
        return None
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞"""
        print("üì± Light Android Emulator Launcher")
        print("=" * 50)
        
        if not self.find_adb():
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã
        genymotion = self.find_genymotion()
        bluestacks = self.find_bluestacks()
        noxplayer = self.find_noxplayer()
        
        if not any([genymotion, bluestacks, noxplayer]):
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ª–µ–≥–∫–æ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–∞")
            print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤:")
            print("   - Genymotion (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
            print("   - BlueStacks")
            print("   - NoxPlayer")
            
            install = input("–•–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä? (y/n): ")
            if install.lower() == 'y':
                self.install_light_emulator()
            return False
        
        # –í—ã–±–∏—Ä–∞–µ–º —ç–º—É–ª—è—Ç–æ—Ä
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã:")
        if genymotion:
            print("1. Genymotion")
        if bluestacks:
            print("2. BlueStacks")
        if noxplayer:
            print("3. NoxPlayer")
        
        try:
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —ç–º—É–ª—è—Ç–æ—Ä (–Ω–æ–º–µ—Ä): ")
            
            if choice == "1" and genymotion:
                self.start_genymotion()
            elif choice == "2" and bluestacks:
                self.start_bluestacks()
            elif choice == "3" and noxplayer:
                self.start_noxplayer()
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                return False
            
            # –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            device_id = self.wait_for_device()
            if device_id:
                print("‚úÖ –≠–º—É–ª—è—Ç–æ—Ä –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
                return False
                
        except KeyboardInterrupt:
            print("\nüëã –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False

def main():
    launcher = LightEmulatorLauncher()
    launcher.run()

if __name__ == "__main__":
    main() 