#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —ç–º—É–ª—è—Ç–æ—Ä–∞ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º MedicalNotes
"""

import os
import sys
import subprocess
import time
import json
from pathlib import Path

class AutoLauncher:
    def __init__(self):
        self.project_dir = Path(__file__).parent
        self.adb_path = None
        self.genymotion_path = None
        self.device_id = None
        
    def find_adb(self):
        """–ü–æ–∏—Å–∫ ADB"""
        possible_paths = [
            os.path.expanduser("~/AppData/Local/Android/Sdk/platform-tools/adb.exe"),
            "C:/Users/%USERNAME%/AppData/Local/Android/Sdk/platform-tools/adb.exe",
            "C:/Android/Sdk/platform-tools/adb.exe",
            "C:/Program Files/Android/Android Studio/sdk/platform-tools/adb.exe",
            "adb.exe"
        ]
        
        for path in possible_paths:
            path = os.path.expandvars(path)
            if os.path.exists(path):
                self.adb_path = path
                print(f"‚úÖ ADB –Ω–∞–π–¥–µ–Ω: {path}")
                return True
                
        print("‚ùå ADB –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    def find_genymotion(self):
        """–ü–æ–∏—Å–∫ Genymotion"""
        possible_paths = [
            "C:/Program Files/Genymobile/Genymotion/genymotion.exe",
            "C:/Program Files (x86)/Genymobile/Genymotion/genymotion.exe",
            os.path.expanduser("~/AppData/Local/Genymobile/Genymotion/genymotion.exe")
        ]
        
        for path in possible_paths:
            if os.path.exists(path):
                self.genymotion_path = path
                print(f"‚úÖ Genymotion –Ω–∞–π–¥–µ–Ω: {path}")
                return True
                
        print("‚ùå Genymotion –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    def find_apk(self):
        """–ü–æ–∏—Å–∫ APK"""
        possible_paths = [
            self.project_dir / "MedicalNotes-v2.2-fixed.apk",
            self.project_dir / "MedicalNotes-v2.1-update.apk",
            self.project_dir / "MedicalNotes-with-alarm-sound.apk",
            self.project_dir / "app" / "build" / "outputs" / "apk" / "debug" / "app-debug.apk"
        ]
        
        for path in possible_paths:
            if path.exists():
                print(f"‚úÖ APK –Ω–∞–π–¥–µ–Ω: {path}")
                return path
                
        print("‚ùå APK –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    def start_genymotion(self):
        """–ó–∞–ø—É—Å–∫ Genymotion"""
        try:
            print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Genymotion...")
            subprocess.Popen([self.genymotion_path])
            print("‚úÖ Genymotion –∑–∞–ø—É—â–µ–Ω")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Genymotion: {e}")
            return False
    
    def wait_for_device(self, timeout=300):
        """–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        print("‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∑–∞–ø—É—â–µ–Ω–æ –≤ Genymotion")
        
        for i in range(timeout):
            try:
                result = subprocess.run([self.adb_path, "devices"], 
                                      capture_output=True, text=True, encoding='utf-8')
                
                lines = result.stdout.strip().split('\n')[1:]
                devices = []
                
                for line in lines:
                    if line.strip() and '\t' in line:
                        device_id, status = line.split('\t')
                        if status == 'device':
                            devices.append(device_id)
                
                if devices:
                    self.device_id = devices[0]
                    print(f"‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ: {self.device_id}")
                    return True
                
                print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ... ({i+1}/{timeout})")
                time.sleep(1)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
                time.sleep(1)
        
        print("‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª–æ—Å—å")
        return False
    
    def wait_for_boot_complete(self, timeout=120):
        """–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ Android"""
        print("‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ Android...")
        
        for i in range(timeout):
            try:
                result = subprocess.run([
                    self.adb_path, "-s", self.device_id, "shell", 
                    "getprop", "sys.boot_completed"
                ], capture_output=True, text=True, encoding='utf-8')
                
                if result.stdout.strip() == "1":
                    print("‚úÖ Android –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω")
                    return True
                
                print(f"‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞... ({i+1}/{timeout})")
                time.sleep(1)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
                time.sleep(1)
        
        print("‚ùå Android –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é")
        return False
    
    def install_app(self, apk_path):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            print(f"üì± –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
            
            result = subprocess.run([
                self.adb_path, "-s", self.device_id, "install", "-r", str(apk_path)
            ], capture_output=True, text=True, encoding='utf-8')
            
            if "Success" in result.stdout:
                print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
            return False
    
    def launch_app(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            result = subprocess.run([
                self.adb_path, "-s", self.device_id, "shell", 
                "am", "start", "-n", "com.medicalnotes.app/.MainActivity"
            ], capture_output=True, text=True, encoding='utf-8')
            
            if result.returncode == 0:
                print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            return False
    
    def set_auto_start(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            print("üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫...")
            
            # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
            auto_start_script = f"""
#!/system/bin/sh
# –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ MedicalNotes
sleep 10
am start -n com.medicalnotes.app/.MainActivity
"""
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            script_path = self.project_dir / "auto_start.sh"
            with open(script_path, "w") as f:
                f.write(auto_start_script)
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            result = subprocess.run([
                self.adb_path, "-s", self.device_id, "push", 
                str(script_path), "/data/local/tmp/auto_start.sh"
            ], capture_output=True, text=True, encoding='utf-8')
            
            if result.returncode == 0:
                # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
                subprocess.run([
                    self.adb_path, "-s", self.device_id, "shell", 
                    "chmod", "755", "/data/local/tmp/auto_start.sh"
                ])
                
                print("‚úÖ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                script_path.unlink()
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞: {e}")
            return False
    
    def create_shortcut(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —è—Ä–ª—ã–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
        try:
            print("üìã –°–æ–∑–¥–∞–µ–º —è—Ä–ª—ã–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞...")
            
            shortcut_content = f"""@echo off
cd /d "{self.project_dir}"
python auto_launch.py
pause
"""
            
            shortcut_path = self.project_dir / "–ó–∞–ø—É—Å—Ç–∏—Ç—å_MedicalNotes.bat"
            with open(shortcut_path, "w", encoding="utf-8") as f:
                f.write(shortcut_content)
            
            print(f"‚úÖ –Ø—Ä–ª—ã–∫ —Å–æ–∑–¥–∞–Ω: {shortcut_path}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —è—Ä–ª—ã–∫–∞: {e}")
            return False
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥"""
        print("üè• Auto MedicalNotes Launcher")
        print("=" * 40)
        
        if not self.find_adb():
            return False
        
        if not self.find_genymotion():
            print("‚ùå Genymotion –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞.")
            return False
        
        apk_path = self.find_apk()
        if not apk_path:
            print("üí° –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ APK")
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Genymotion
        if not self.start_genymotion():
            return False
        
        print("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:")
        print("1. –í –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è Genymotion –∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
        print("2. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ Android")
        print("3. –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –∏ –∑–∞–ø—É—Å—Ç–∏—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        
        # –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        if not self.wait_for_device():
            return False
        
        # –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ Android
        if not self.wait_for_boot_complete():
            return False
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        if not self.install_app(apk_path):
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        if not self.launch_app():
            return False
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫
        self.set_auto_start()
        
        # –°–æ–∑–¥–∞–µ–º —è—Ä–ª—ã–∫
        self.create_shortcut()
        
        print("\nüéâ –ì–æ—Ç–æ–≤–æ! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
        print("üí° –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ó–∞–ø—É—Å—Ç–∏—Ç—å_MedicalNotes.bat")
        print("üí° –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤: adb logcat")
        
        return True

def main():
    launcher = AutoLauncher()
    launcher.run()

if __name__ == "__main__":
    main() 