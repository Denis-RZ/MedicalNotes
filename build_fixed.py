#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∫–∏ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –ø—É—Ç–µ–º Gradle
"""

import os
import sys
import subprocess
import time
from pathlib import Path

def print_info(message):
    print(f"[INFO] {message}")

def print_error(message):
    print(f"[ERROR] {message}")

def print_success(message):
    print(f"[SUCCESS] {message}")

def build_project():
    """–°–æ–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –ø—É—Ç–µ–º Gradle"""
    print("üöÄ –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –ø—É—Ç–µ–º Gradle")
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        env = os.environ.copy()
        env['GRADLE_USER_HOME'] = 'C:\\gradle_home_clean'
        print_info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω GRADLE_USER_HOME: {env['GRADLE_USER_HOME']}")
        
        print_info("–ó–∞–ø—É—Å–∫ gradlew assembleDebug...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É —Å –≤—ã–≤–æ–¥–æ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        process = subprocess.Popen(
            ['gradlew.bat', 'assembleDebug'],
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
            bufsize=1,
            universal_newlines=True,
            env=env
        )
        
        # –í—ã–≤–æ–¥–∏–º –≤—ã–≤–æ–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        for line in process.stdout:
            print(line.rstrip())
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        return_code = process.wait()
        
        if return_code == 0:
            print_success("APK —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω!")
            return True
        else:
            print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ. –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {return_code}")
            return False
            
    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ: {e}")
        return False

def find_apk():
    """–ò—â–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã–π APK —Ñ–∞–π–ª"""
    apk_path = Path('app/build/outputs/apk/debug/app-debug.apk')
    
    if apk_path.exists():
        size_mb = apk_path.stat().st_size / (1024 * 1024)
        print_success(f"APK –Ω–∞–π–¥–µ–Ω: {apk_path}")
        print_info(f"–†–∞–∑–º–µ—Ä: {size_mb:.2f} –ú–ë")
        return True
    else:
        print_error("APK —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

if __name__ == "__main__":
    if build_project():
        find_apk()
    else:
        sys.exit(1)
