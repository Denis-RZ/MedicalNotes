#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import datetime

def test_fix():
    print("=== –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ===")
    print()
    
    # –î–∞–Ω–Ω—ã–µ –∏–∑ XML (–ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
    lipetor_data = {
        'name': '–õ–∏–ø–µ—Ç–æ—Ä',
        'groupStartDate': 1754451744031,
        'groupOrder': 1,
        'lastTakenTime': 0,  # –°–±—Ä–æ—à–µ–Ω–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
        'takenToday': False
    }
    
    fubuxusat_data = {
        'name': '–§—É–±—É–∫—Å—É—Å–∞—Ç',
        'groupStartDate': 1754451755574,
        'groupOrder': 2,
        'lastTakenTime': 0,  # –°–±—Ä–æ—à–µ–Ω–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
        'takenToday': False
    }
    
    today = datetime.datetime.now().date()
    print(f"–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞: {today}")
    print()
    
    for medicine_data in [lipetor_data, fubuxusat_data]:
        print(f"=== –¢–ï–°–¢: {medicine_data['name']} ===")
        
        group_start_date = datetime.datetime.fromtimestamp(medicine_data['groupStartDate'] / 1000).date()
        days_since_group_start = (today - group_start_date).days
        group_day = days_since_group_start % 2
        
        print(f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≥—Ä—É–ø–ø—ã: {group_start_date}")
        print(f"–î–Ω–µ–π —Å –Ω–∞—á–∞–ª–∞ –≥—Ä—É–ø–ø—ã: {days_since_group_start}")
        print(f"–î–µ–Ω—å –≥—Ä—É–ø–ø—ã (0/1): {group_day}")
        
        # –õ–æ–≥–∏–∫–∞ "—á–µ—Ä–µ–∑ –¥–µ–Ω—å"
        should_take = False
        if medicine_data['groupOrder'] == 1:
            should_take = group_day == 0
        elif medicine_data['groupOrder'] == 2:
            should_take = group_day == 1
        
        print(f"–î–æ–ª–∂–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è: {should_take}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –ø—Ä–∏–Ω—è—Ç–æ –≤—á–µ—Ä–∞ (—Ç–µ–ø–µ—Ä—å lastTakenTime = 0)
        yesterday = today - datetime.timedelta(days=1)
        was_taken_yesterday = False  # lastTakenTime —Å–±—Ä–æ—à–µ–Ω
        print(f"–ü—Ä–∏–Ω—è—Ç–æ –≤—á–µ—Ä–∞: {was_taken_yesterday}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
        final_result = should_take
        if was_taken_yesterday and not should_take:
            final_result = False
        
        print(f"–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {final_result}")
        print(f"–ë—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ –≤ —Å–ø–∏—Å–∫–µ: {final_result}")
        print()

def main():
    print("üîß –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–û–ë–õ–ï–ú–´")
    print("=" * 40)
    print()
    
    test_fix()
    
    print("=== –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ ===")
    print("–ü–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
    print("1. lastTakenTime —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏")
    print("2. wasTakenYesterday = false")
    print("3. –õ–µ–∫–∞—Ä—Å—Ç–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Å–æ–≥–ª–∞—Å–Ω–æ –≥—Ä—É–ø–ø–æ–≤–æ–π –ª–æ–≥–∏–∫–µ")
    print("4. –õ–∏–ø–µ—Ç–æ—Ä (–ø–æ—Ä—è–¥–æ–∫ 1) –≤ —á–µ—Ç–Ω—ã–µ –¥–Ω–∏ –≥—Ä—É–ø–ø—ã")
    print("5. –§—É–±—É–∫—Å—É—Å–∞—Ç (–ø–æ—Ä—è–¥–æ–∫ 2) –≤ –Ω–µ—á–µ—Ç–Ω—ã–µ –¥–Ω–∏ –≥—Ä—É–ø–ø—ã")

if __name__ == "__main__":
    main() 