#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ MedicalNotes –Ω–∞ –ª—é–±–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
"""

import os
import sys
import subprocess
import time
from pathlib import Path

class QuickLauncher:
    def __init__(self):
        self.project_dir = Path(__file__).parent
        self.adb_path = None
        self.device_id = None
        
    def find_adb(self):
        """–ü–æ–∏—Å–∫ ADB"""
        possible_paths = [
            os.path.expanduser("~/AppData/Local/Android/Sdk/platform-tools/adb.exe"),
            "C:/Users/%USERNAME%/AppData/Local/Android/Sdk/platform-tools/adb.exe",
            "C:/Android/Sdk/platform-tools/adb.exe",
            "C:/Program Files/Android/Android Studio/sdk/platform-tools/adb.exe",
            "adb.exe"
        ]
        
        for path in possible_paths:
            path = os.path.expandvars(path)
            if os.path.exists(path):
                self.adb_path = path
                print(f"‚úÖ ADB –Ω–∞–π–¥–µ–Ω: {path}")
                return True
                
        print("‚ùå ADB –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    def find_apk(self):
        """–ü–æ–∏—Å–∫ APK —Ñ–∞–π–ª–∞"""
        possible_paths = [
            self.project_dir / "app" / "build" / "outputs" / "apk" / "debug" / "app-debug.apk",
            self.project_dir / "MedicalNotes-v2.2-fixed.apk",
            self.project_dir / "MedicalNotes-v2.1-update.apk",
            self.project_dir / "MedicalNotes-with-alarm-sound.apk"
        ]
        
        for path in possible_paths:
            if path.exists():
                print(f"‚úÖ APK –Ω–∞–π–¥–µ–Ω: {path}")
                return path
                
        print("‚ùå APK —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    def check_devices(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        try:
            result = subprocess.run([self.adb_path, "devices"], 
                                  capture_output=True, text=True, encoding='utf-8')
            
            lines = result.stdout.strip().split('\n')[1:]
            devices = []
            
            for line in lines:
                if line.strip() and '\t' in line:
                    device_id, status = line.split('\t')
                    if status == 'device':
                        devices.append(device_id)
            
            if not devices:
                print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
                print("üí° –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç–º—É–ª—è—Ç–æ—Ä")
                return False
            
            if len(devices) == 1:
                self.device_id = devices[0]
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {self.device_id}")
                return True
            else:
                print("üì± –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:")
                for i, device in enumerate(devices, 1):
                    print(f"  {i}. {device}")
                
                try:
                    choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–Ω–æ–º–µ—Ä): ")) - 1
                    if 0 <= choice < len(devices):
                        self.device_id = devices[choice]
                        print(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {self.device_id}")
                        return True
                    else:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")
                        return False
                except ValueError:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
                    return False
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
            return False
    
    def install_app(self, apk_path):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            print(f"üì± –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ {self.device_id}...")
            
            result = subprocess.run([
                self.adb_path, "-s", self.device_id, "install", "-r", str(apk_path)
            ], capture_output=True, text=True, encoding='utf-8')
            
            if "Success" in result.stdout:
                print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
            return False
    
    def launch_app(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            result = subprocess.run([
                self.adb_path, "-s", self.device_id, "shell", 
                "am", "start", "-n", "com.medicalnotes.app/.MainActivity"
            ], capture_output=True, text=True, encoding='utf-8')
            
            if result.returncode == 0:
                print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            return False
    
    def show_logs(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            print("üìã –õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
            print("-" * 50)
            
            result = subprocess.run([
                self.adb_path, "-s", self.device_id, "logcat", 
                "-s", "MedicalNotes:*", "AndroidRuntime:E"
            ], capture_output=True, text=True, encoding='utf-8', timeout=10)
            
            if result.stdout:
                print(result.stdout)
            else:
                print("–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except subprocess.TimeoutExpired:
            print("‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥"""
        print("üè• Quick MedicalNotes Launcher")
        print("=" * 40)
        
        if not self.find_adb():
            return False
        
        apk_path = self.find_apk()
        if not apk_path:
            print("üí° –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ APK")
            return False
        
        if not self.check_devices():
            return False
        
        if not self.install_app(apk_path):
            return False
        
        if not self.launch_app():
            return False
        
        print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏
        show_logs = input("–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏? (y/n): ")
        if show_logs.lower() == 'y':
            self.show_logs()
        
        return True

def main():
    launcher = QuickLauncher()
    launcher.run()

if __name__ == "__main__":
    main() 