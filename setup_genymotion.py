#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Genymotion
–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Android —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
"""

import os
import sys
import subprocess
import time
import json
from pathlib import Path

class GenymotionSetup:
    def __init__(self):
        self.project_dir = Path(__file__).parent
        self.genymotion_path = None
        self.adb_path = None
        
    def find_genymotion(self):
        """–ü–æ–∏—Å–∫ Genymotion"""
        possible_paths = [
            "C:/Program Files/Genymobile/Genymotion/genymotion.exe",
            "C:/Program Files (x86)/Genymobile/Genymotion/genymotion.exe",
            os.path.expanduser("~/AppData/Local/Genymobile/Genymotion/genymotion.exe")
        ]
        
        for path in possible_paths:
            if os.path.exists(path):
                self.genymotion_path = path
                print(f"‚úÖ Genymotion –Ω–∞–π–¥–µ–Ω: {path}")
                return True
                
        print("‚ùå Genymotion –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    def find_adb(self):
        """–ü–æ–∏—Å–∫ ADB"""
        possible_paths = [
            os.path.expanduser("~/AppData/Local/Android/Sdk/platform-tools/adb.exe"),
            "C:/Users/%USERNAME%/AppData/Local/Android/Sdk/platform-tools/adb.exe",
            "C:/Android/Sdk/platform-tools/adb.exe",
            "C:/Program Files/Android/Android Studio/sdk/platform-tools/adb.exe",
            "adb.exe"
        ]
        
        for path in possible_paths:
            path = os.path.expandvars(path)
            if os.path.exists(path):
                self.adb_path = path
                print(f"‚úÖ ADB –Ω–∞–π–¥–µ–Ω: {path}")
                return True
                
        print("‚ùå ADB –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    def start_genymotion(self):
        """–ó–∞–ø—É—Å–∫ Genymotion"""
        try:
            print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Genymotion...")
            subprocess.Popen([self.genymotion_path])
            print("‚úÖ Genymotion –∑–∞–ø—É—â–µ–Ω")
            print("üí° –í –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –æ–∫–Ω–µ Genymotion:")
            print("   1. –°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π")
            print("   2. –ù–∞–∂–º–∏—Ç–µ 'Add' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
            print("   3. –í—ã–±–µ—Ä–∏—Ç–µ 'Google Pixel 2' —Å Android 9.0 (API 28)")
            print("   4. –ù–∞–∑–æ–≤–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 'MedicalNotes_Test'")
            print("   5. –ù–∞–∂–º–∏—Ç–µ 'Create'")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Genymotion: {e}")
            return False
    
    def wait_for_device(self, timeout=180):
        """–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        print("‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∑–∞–ø—É—â–µ–Ω–æ –≤ Genymotion")
        
        for i in range(timeout):
            try:
                result = subprocess.run([self.adb_path, "devices"], 
                                      capture_output=True, text=True, encoding='utf-8')
                
                lines = result.stdout.strip().split('\n')[1:]
                devices = []
                
                for line in lines:
                    if line.strip() and '\t' in line:
                        device_id, status = line.split('\t')
                        if status == 'device':
                            devices.append(device_id)
                
                if devices:
                    print(f"‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ: {devices[0]}")
                    return devices[0]
                
                print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ... ({i+1}/{timeout})")
                time.sleep(1)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
                time.sleep(1)
        
        print("‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª–æ—Å—å")
        return None
    
    def enable_developer_options(self, device_id):
        """–í–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        try:
            print("üîß –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞...")
            
            # –í–∫–ª—é—á–∞–µ–º USB –æ—Ç–ª–∞–¥–∫—É
            result = subprocess.run([
                self.adb_path, "-s", device_id, "shell", 
                "settings", "put", "global", "adb_enabled", "1"
            ], capture_output=True, text=True, encoding='utf-8')
            
            if result.returncode == 0:
                print("‚úÖ –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–∫–ª—é—á–µ–Ω")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    def install_google_play(self, device_id):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Google Play Services"""
        try:
            print("üì± –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Google Play Services...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ Google Play
            result = subprocess.run([
                self.adb_path, "-s", device_id, "shell", 
                "pm", "list", "packages", "com.android.vending"
            ], capture_output=True, text=True, encoding='utf-8')
            
            if "com.android.vending" in result.stdout:
                print("‚úÖ Google Play —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return True
            
            print("üí° Google Play –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é:")
            print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –≤ —ç–º—É–ª—è—Ç–æ—Ä–µ")
            print("   2. –°–∫–∞—á–∞–π—Ç–µ Google Play Services APK")
            print("   3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ APK")
            
            return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Google Play: {e}")
            return False
    
    def test_device(self, device_id):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Android
            result = subprocess.run([
                self.adb_path, "-s", device_id, "shell", 
                "getprop", "ro.build.version.release"
            ], capture_output=True, text=True, encoding='utf-8')
            
            if result.returncode == 0:
                android_version = result.stdout.strip()
                print(f"‚úÖ Android –≤–µ—Ä—Å–∏—è: {android_version}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ
            result = subprocess.run([
                self.adb_path, "-s", device_id, "shell", 
                "df", "/data"
            ], capture_output=True, text=True, encoding='utf-8')
            
            if result.returncode == 0:
                print("‚úÖ –ú–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç—å
            result = subprocess.run([
                self.adb_path, "-s", device_id, "shell", 
                "ping", "-c", "1", "8.8.8.8"
            ], capture_output=True, text=True, encoding='utf-8')
            
            if result.returncode == 0:
                print("‚úÖ –°–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
    
    def create_setup_guide(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"""
        guide = """
# –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Genymotion

## 1. –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞

1. –û—Ç–∫—Ä–æ–π—Ç–µ Genymotion
2. –ù–∞–∂–º–∏—Ç–µ "Add" (–¥–æ–±–∞–≤–∏—Ç—å)
3. –í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: **Google Pixel 2**
4. –í—ã–±–µ—Ä–∏—Ç–µ Android: **9.0 (API 28)**
5. –ù–∞–∑–æ–≤–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: **MedicalNotes_Test**
6. –ù–∞–∂–º–∏—Ç–µ "Create"

## 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞

1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
2. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ Android
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Wi-Fi –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
4. –í–æ–π–¥–∏—Ç–µ –≤ Google –∞–∫–∫–∞—É–Ω—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

## 3. –í–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞

1. –û—Ç–∫—Ä–æ–π—Ç–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏
2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "–û —Ç–µ–ª–µ—Ñ–æ–Ω–µ"
3. –ù–∞–∂–º–∏—Ç–µ 7 —Ä–∞–∑ –Ω–∞ "–ù–æ–º–µ—Ä —Å–±–æ—Ä–∫–∏"
4. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
5. –í–∫–ª—é—á–∏—Ç–µ "–û—Ç–ª–∞–¥–∫–∞ –ø–æ USB"

## 4. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Google Play Services

1. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –≤ —ç–º—É–ª—è—Ç–æ—Ä–µ
2. –°–∫–∞—á–∞–π—Ç–µ Google Play Services APK
3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ APK
4. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ

## 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:
```
python quick_launch.py
```

## –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã

- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: `adb devices`
- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å APK: `adb install app.apk`
- –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: `adb shell am start -n com.medicalnotes.app/.MainActivity`
- –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤: `adb logcat`
"""
        
        with open("GENYMOTION_SETUP_GUIDE.md", "w", encoding="utf-8") as f:
            f.write(guide)
        
        print("‚úÖ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Å–æ–∑–¥–∞–Ω–æ: GENYMOTION_SETUP_GUIDE.md")
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        print("üîß Genymotion Setup")
        print("=" * 30)
        
        if not self.find_genymotion():
            print("‚ùå Genymotion –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞.")
            return False
        
        if not self.find_adb():
            print("‚ùå ADB –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Android SDK.")
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Genymotion
        if not self.start_genymotion():
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ
        self.create_setup_guide()
        
        print("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:")
        print("1. –í –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è Genymotion —Å–æ–∑–¥–∞–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≥—Ä—É–∑–∫–∏")
        print("3. –í–∫–ª—é—á–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞")
        print("4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Google Play Services (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
        print("5. –ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python quick_launch.py")
        
        # –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        device_id = self.wait_for_device()
        if device_id:
            print(f"‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≥–æ—Ç–æ–≤–æ: {device_id}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            self.test_device(device_id)
            
            print("\nüéâ Genymotion –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print("–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:")
            print("python quick_launch.py")
            
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∑–∞–ø—É—â–µ–Ω–æ –≤ Genymotion")
            return False

def main():
    setup = GenymotionSetup()
    setup.run()

if __name__ == "__main__":
    main() 