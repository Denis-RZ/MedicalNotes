#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Genymotion —Å QEMU –≤–º–µ—Å—Ç–æ VirtualBox
"""

import os
import sys
import subprocess
import time
from pathlib import Path

def find_genymotion():
    """–ü–æ–∏—Å–∫ Genymotion"""
    genymotion_paths = [
        "C:/Program Files/Genymobile/Genymotion/genymotion.exe",
        "C:/Program Files (x86)/Genymobile/Genymotion/genymotion.exe"
    ]
    
    for path in genymotion_paths:
        if os.path.exists(path):
            print(f"‚úÖ Genymotion –Ω–∞–π–¥–µ–Ω: {path}")
            return path
    
    print("‚ùå Genymotion –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return None

def find_gmtool():
    """–ü–æ–∏—Å–∫ gmtool"""
    gmtool_paths = [
        "C:/Program Files/Genymobile/Genymotion/gmtool.exe",
        "C:/Program Files (x86)/Genymobile/Genymotion/gmtool.exe"
    ]
    
    for path in gmtool_paths:
        if os.path.exists(path):
            print(f"‚úÖ gmtool –Ω–∞–π–¥–µ–Ω: {path}")
            return path
    
    print("‚ùå gmtool –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return None

def configure_qemu(gmtool_path):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ QEMU –≤ Genymotion"""
    try:
        print("üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º QEMU...")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–∏–ø–µ—Ä–≤–∏–∑–æ—Ä –Ω–∞ QEMU
        result = subprocess.run([
            gmtool_path, "config", "--hypervisor", "qemu"
        ], capture_output=True, text=True, encoding='utf-8')
        
        if result.returncode == 0:
            print("‚úÖ QEMU –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ QEMU: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ QEMU: {e}")
        return False

def create_virtual_device(gmtool_path):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    try:
        print("üì± –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ...")
        
        # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        result = subprocess.run([
            gmtool_path, "list", "templates"
        ], capture_output=True, text=True, encoding='utf-8')
        
        if result.returncode == 0:
            print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
            print(result.stdout)
            
            # –°–æ–∑–¥–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ)
            create_result = subprocess.run([
                gmtool_path, "create", "MedicalNotes_Device", "Google Nexus 5 - 6.0.0 - API 23 - 1080x1920"
            ], capture_output=True, text=True, encoding='utf-8')
            
            if create_result.returncode == 0:
                print("‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {create_result.stderr}")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
        return False

def start_device(gmtool_path, device_name="MedicalNotes_Device"):
    """–ó–∞–ø—É—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    try:
        print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_name}")
        
        result = subprocess.run([
            gmtool_path, "start", device_name
        ], capture_output=True, text=True, encoding='utf-8')
        
        if result.returncode == 0:
            print("‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∑–∞–ø—É—â–µ–Ω–æ")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
        return False

def create_launcher():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞—Ç–æ—Ä–∞"""
    try:
        print("üìã –°–æ–∑–¥–∞–µ–º –∑–∞–ø—É—Å–∫–∞—Ç–æ—Ä...")
        
        launcher_content = """@echo off
echo –ó–∞–ø—É—Å–∫ MedicalNotes –Ω–∞ Genymotion —Å QEMU...
python setup_qemu.py
pause
"""
        
        launcher_path = Path("–ó–∞–ø—É—Å—Ç–∏—Ç—å_Genymotion_QEMU.bat")
        with open(launcher_path, "w", encoding="utf-8") as f:
            f.write(launcher_content)
        
        print(f"‚úÖ –ó–∞–ø—É—Å–∫–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω: {launcher_path}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞—Ç–æ—Ä–∞: {e}")
        return False

def main():
    print("üîß Genymotion QEMU Setup")
    print("=" * 30)
    
    # –ò—â–µ–º Genymotion
    genymotion_path = find_genymotion()
    if not genymotion_path:
        return False
    
    # –ò—â–µ–º gmtool
    gmtool_path = find_gmtool()
    if not gmtool_path:
        return False
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º QEMU
    if not configure_qemu(gmtool_path):
        return False
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    if not create_virtual_device(gmtool_path):
        return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    if not start_device(gmtool_path):
        return False
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—É—Å–∫–∞—Ç–æ—Ä
    create_launcher()
    
    print("\nüéâ Genymotion –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å QEMU!")
    print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:")
    print("   python fast_emulator.py")
    print("   –∏–ª–∏")
    print("   –ó–∞–ø—É—Å—Ç–∏—Ç—å_Genymotion_QEMU.bat")
    
    return True

if __name__ == "__main__":
    main() 