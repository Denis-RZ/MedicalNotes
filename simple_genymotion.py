#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ Genymotion —Å QEMU
"""

import os
import sys
import subprocess
import time
from pathlib import Path

def find_adb():
    """–ü–æ–∏—Å–∫ ADB"""
    possible_paths = [
        os.path.expanduser("~/AppData/Local/Android/Sdk/platform-tools/adb.exe"),
        "C:/Users/%USERNAME%/AppData/Local/Android/Sdk/platform-tools/adb.exe",
        "C:/Android/Sdk/platform-tools/adb.exe",
        "C:/Program Files/Android/Android Studio/sdk/platform-tools/adb.exe",
        "adb.exe"
    ]
    
    for path in possible_paths:
        path = os.path.expandvars(path)
        if os.path.exists(path):
            return path
    return None

def find_gmtool():
    """–ü–æ–∏—Å–∫ gmtool"""
    gmtool_paths = [
        "C:/Program Files/Genymobile/Genymotion/gmtool.exe",
        "C:/Program Files (x86)/Genymobile/Genymotion/gmtool.exe"
    ]
    
    for path in gmtool_paths:
        if os.path.exists(path):
            return path
    return None

def configure_qemu(gmtool_path):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ QEMU"""
    try:
        print("üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º QEMU...")
        result = subprocess.run([
            gmtool_path, "config", "--hypervisor", "qemu"
        ], capture_output=True, text=True, encoding='utf-8')
        
        if result.returncode == 0:
            print("‚úÖ QEMU –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ QEMU: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def start_genymotion():
    """–ó–∞–ø—É—Å–∫ Genymotion"""
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Genymotion...")
        
        genymotion_path = "C:/Program Files/Genymobile/Genymotion/genymotion.exe"
        if not os.path.exists(genymotion_path):
            print("‚ùå Genymotion –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Genymotion
        subprocess.Popen([genymotion_path])
        print("‚úÖ Genymotion –∑–∞–ø—É—â–µ–Ω")
        print("üí° –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–æ–∑–¥–∞–π—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—Ä—É—á–Ω—É—é")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        return False

def wait_for_device(adb_path, timeout=300):
    """–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    print("‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...")
    
    for i in range(timeout):
        try:
            result = subprocess.run([adb_path, "devices"], 
                                  capture_output=True, text=True, encoding='utf-8')
            
            lines = result.stdout.strip().split('\n')[1:]
            devices = []
            
            for line in lines:
                if line.strip() and '\t' in line:
                    device_id, status = line.split('\t')
                    if status == 'device':
                        devices.append(device_id)
            
            if devices:
                print(f"‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ: {devices[0]}")
                return devices[0]
            
            print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ... ({i+1}/{timeout})")
            time.sleep(2)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            time.sleep(2)
    
    print("‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª–æ—Å—å")
    return None

def install_and_run_app(adb_path, device_id):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –ò—â–µ–º APK
        apk_paths = [
            Path("MedicalNotes-v2.2-fixed.apk"),
            Path("MedicalNotes-v2.1-update.apk"),
            Path("MedicalNotes-with-alarm-sound.apk")
        ]
        
        apk_path = None
        for path in apk_paths:
            if path.exists():
                apk_path = path
                break
        
        if not apk_path:
            print("‚ùå APK –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        print(f"üì± –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º APK
        result = subprocess.run([
            adb_path, "-s", device_id, "install", "-r", str(apk_path)
        ], capture_output=True, text=True, encoding='utf-8')
        
        if "Success" in result.stdout:
            print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
            result = subprocess.run([
                adb_path, "-s", device_id, "shell", 
                "am", "start", "-n", "com.medicalnotes.app/.MainActivity"
            ], capture_output=True, text=True, encoding='utf-8')
            
            if result.returncode == 0:
                print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {result.stderr}")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def create_launcher():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞—Ç–æ—Ä–∞"""
    try:
        print("üìã –°–æ–∑–¥–∞–µ–º –∑–∞–ø—É—Å–∫–∞—Ç–æ—Ä...")
        
        launcher_content = """@echo off
echo –ó–∞–ø—É—Å–∫ MedicalNotes –Ω–∞ Genymotion...
python simple_genymotion.py
pause
"""
        
        launcher_path = Path("–ó–∞–ø—É—Å—Ç–∏—Ç—å_Genymotion_–ü—Ä–æ—Å—Ç–æ–π.bat")
        with open(launcher_path, "w", encoding="utf-8") as f:
            f.write(launcher_content)
        
        print(f"‚úÖ –ó–∞–ø—É—Å–∫–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω: {launcher_path}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞—Ç–æ—Ä–∞: {e}")
        return False

def main():
    print("üöÄ Simple Genymotion Launcher")
    print("=" * 35)
    
    # –ò—â–µ–º ADB
    adb_path = find_adb()
    if not adb_path:
        print("‚ùå ADB –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print(f"‚úÖ ADB –Ω–∞–π–¥–µ–Ω: {adb_path}")
    
    # –ò—â–µ–º gmtool
    gmtool_path = find_gmtool()
    if gmtool_path:
        print(f"‚úÖ gmtool –Ω–∞–π–¥–µ–Ω: {gmtool_path}")
        configure_qemu(gmtool_path)
    else:
        print("‚ö†Ô∏è gmtool –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É QEMU")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Genymotion
    if not start_genymotion():
        return False
    
    print("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:")
    print("1. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≥—Ä—É–∑–∫–∏ Genymotion")
    print("2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–µ—Å–ª–∏ –Ω–µ—Ç)")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
    print("4. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ Android")
    print("5. –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    input()
    
    # –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    device_id = wait_for_device(adb_path)
    if not device_id:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
        return False
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    if install_and_run_app(adb_path, device_id):
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—É—Å–∫–∞—Ç–æ—Ä
        create_launcher()
        
        print("\nüéâ MedicalNotes –∑–∞–ø—É—â–µ–Ω –Ω–∞ Genymotion!")
        print("üí° –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("   –ó–∞–ø—É—Å—Ç–∏—Ç—å_Genymotion_–ü—Ä–æ—Å—Ç–æ–π.bat")
        
        return True
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        return False

if __name__ == "__main__":
    main() 