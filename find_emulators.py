#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–æ–∏—Å–∫ –≤—Å–µ—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –Ω–∞ —Å–∏—Å—Ç–µ–º–µ
"""

import os
import sys
import subprocess
import time
from pathlib import Path

def find_all_emulators():
    """–ü–æ–∏—Å–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤"""
    emulators = {}
    
    # BlueStacks
    bluestacks_paths = [
        "C:/Program Files/BlueStacks_nxt/HD-Player.exe",
        "C:/Program Files (x86)/BlueStacks_nxt/HD-Player.exe",
        "C:/Program Files/BlueStacks/HD-Player.exe",
        "C:/Program Files (x86)/BlueStacks/HD-Player.exe",
        "C:/Program Files/BlueStacks_nxt/HD-Adb.exe",
        "C:/Program Files (x86)/BlueStacks_nxt/HD-Adb.exe"
    ]
    
    for path in bluestacks_paths:
        if os.path.exists(path):
            emulators["BlueStacks"] = path
            break
    
    # NoxPlayer
    nox_paths = [
        "C:/Program Files/Nox/bin/Nox.exe",
        "C:/Program Files (x86)/Nox/bin/Nox.exe",
        "C:/Program Files/Nox/bin/NoxAdb.exe",
        "C:/Program Files (x86)/Nox/bin/NoxAdb.exe"
    ]
    
    for path in nox_paths:
        if os.path.exists(path):
            emulators["NoxPlayer"] = path
            break
    
    # LDPlayer
    ld_paths = [
        "C:/Program Files/LDPlayer/LDPlayer9/ldconsole.exe",
        "C:/Program Files (x86)/LDPlayer/LDPlayer9/ldconsole.exe",
        "C:/Program Files/LDPlayer/LDPlayer4.0/ldconsole.exe",
        "C:/Program Files (x86)/LDPlayer/LDPlayer4.0/ldconsole.exe"
    ]
    
    for path in ld_paths:
        if os.path.exists(path):
            emulators["LDPlayer"] = path
            break
    
    # MEmu
    memu_paths = [
        "C:/Program Files/MEmu/MEmu.exe",
        "C:/Program Files (x86)/MEmu/MEmu.exe",
        "C:/Program Files/MEmu/MEmuConsole.exe",
        "C:/Program Files (x86)/MEmu/MEmuConsole.exe"
    ]
    
    for path in memu_paths:
        if os.path.exists(path):
            emulators["MEmu"] = path
            break
    
    # Android Studio AVD
    avd_paths = [
        os.path.expanduser("~/AppData/Local/Android/Sdk/emulator/emulator.exe"),
        "C:/Android/Sdk/emulator/emulator.exe",
        "C:/Program Files/Android/Android Studio/sdk/emulator/emulator.exe"
    ]
    
    for path in avd_paths:
        if os.path.exists(path):
            emulators["Android Studio AVD"] = path
            break
    
    # Genymotion
    genymotion_paths = [
        "C:/Program Files/Genymobile/Genymotion/genymotion.exe",
        "C:/Program Files (x86)/Genymobile/Genymotion/genymotion.exe"
    ]
    
    for path in genymotion_paths:
        if os.path.exists(path):
            emulators["Genymotion"] = path
            break
    
    return emulators

def find_adb():
    """–ü–æ–∏—Å–∫ ADB"""
    possible_paths = [
        os.path.expanduser("~/AppData/Local/Android/Sdk/platform-tools/adb.exe"),
        "C:/Users/%USERNAME%/AppData/Local/Android/Sdk/platform-tools/adb.exe",
        "C:/Android/Sdk/platform-tools/adb.exe",
        "C:/Program Files/Android/Android Studio/sdk/platform-tools/adb.exe",
        "adb.exe"
    ]
    
    for path in possible_paths:
        path = os.path.expandvars(path)
        if os.path.exists(path):
            return path
    return None

def check_devices(adb_path):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    try:
        result = subprocess.run([adb_path, "devices"], 
                              capture_output=True, text=True, encoding='utf-8')
        
        lines = result.stdout.strip().split('\n')[1:]
        devices = []
        
        for line in lines:
            if line.strip() and '\t' in line:
                device_id, status = line.split('\t')
                if status == 'device':
                    devices.append(device_id)
        
        return devices
    except:
        return []

def main():
    print("üîç –ü–æ–∏—Å–∫ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –Ω–∞ —Å–∏—Å—Ç–µ–º–µ")
    print("=" * 40)
    
    # –ò—â–µ–º ADB
    adb_path = find_adb()
    if adb_path:
        print(f"‚úÖ ADB –Ω–∞–π–¥–µ–Ω: {adb_path}")
    else:
        print("‚ùå ADB –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ò—â–µ–º —ç–º—É–ª—è—Ç–æ—Ä—ã
    emulators = find_all_emulators()
    
    if not emulators:
        print("\n‚ùå –≠–º—É–ª—è—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BlueStacks —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞:")
        print("      https://www.bluestacks.com/")
        print("   2. –ò–ª–∏ NoxPlayer:")
        print("      https://www.bignox.com/")
        print("   3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Android Studio")
        return
    
    print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {len(emulators)}")
    
    for name, path in emulators.items():
        print(f"   üì± {name}: {path}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    if adb_path:
        devices = check_devices(adb_path)
        if devices:
            print(f"\n‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {len(devices)}")
            for device in devices:
                print(f"   üì± {device}")
        else:
            print("\n‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—É—Å–∫–∞—Ç–æ—Ä—ã –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
    print("\nüìã –°–æ–∑–¥–∞–µ–º –∑–∞–ø—É—Å–∫–∞—Ç–æ—Ä—ã...")
    
    for name, path in emulators.items():
        try:
            launcher_content = f"""@echo off
echo –ó–∞–ø—É—Å–∫ MedicalNotes –Ω–∞ {name}...
python fast_emulator.py
pause
"""
            
            launcher_path = Path(f"–ó–∞–ø—É—Å—Ç–∏—Ç—å_{name.replace(' ', '_')}.bat")
            with open(launcher_path, "w", encoding="utf-8") as f:
                f.write(launcher_content)
            
            print(f"   ‚úÖ {launcher_path}")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {name}: {e}")
    
    print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –ù–∞–π–¥–µ–Ω–æ {len(emulators)} —ç–º—É–ª—è—Ç–æ—Ä–æ–≤")
    print("üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    for name in emulators.keys():
        print(f"   –ó–∞–ø—É—Å—Ç–∏—Ç—å_{name.replace(' ', '_')}.bat")

if __name__ == "__main__":
    main() 