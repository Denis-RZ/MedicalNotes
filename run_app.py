#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è MedicalNotes –Ω–∞ Windows
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —ç–º—É–ª—è—Ç–æ—Ä –∏ —Ä–µ–∞–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
"""

import os
import sys
import subprocess
import time
import json
from pathlib import Path

class MedicalNotesLauncher:
    def __init__(self):
        self.project_dir = Path(__file__).parent
        self.apk_path = self.project_dir / "app" / "build" / "outputs" / "apk" / "debug" / "app-debug.apk"
        self.adb_path = None
        self.device_id = None
        
    def find_adb(self):
        """–ü–æ–∏—Å–∫ ADB –≤ —Å–∏—Å—Ç–µ–º–µ"""
        possible_paths = [
            # Android SDK
            os.path.expanduser("~/AppData/Local/Android/Sdk/platform-tools/adb.exe"),
            "C:/Users/%USERNAME%/AppData/Local/Android/Sdk/platform-tools/adb.exe",
            "C:/Android/Sdk/platform-tools/adb.exe",
            # Android Studio
            "C:/Program Files/Android/Android Studio/sdk/platform-tools/adb.exe",
            # –í PATH
            "adb.exe"
        ]
        
        for path in possible_paths:
            if os.path.exists(path):
                self.adb_path = path
                print(f"‚úÖ ADB –Ω–∞–π–¥–µ–Ω: {path}")
                return True
                
        print("‚ùå ADB –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Android SDK –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ ADB –≤ PATH")
        return False
    
    def check_devices(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        try:
            result = subprocess.run([self.adb_path, "devices"], 
                                  capture_output=True, text=True, encoding='utf-8')
            
            if result.returncode != 0:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ADB: {result.stderr}")
                return False
            
            lines = result.stdout.strip().split('\n')[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            devices = []
            
            for line in lines:
                if line.strip() and '\t' in line:
                    device_id, status = line.split('\t')
                    if status == 'device':
                        devices.append(device_id)
            
            if not devices:
                print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
                print("üí° –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç–º—É–ª—è—Ç–æ—Ä")
                return False
            
            if len(devices) == 1:
                self.device_id = devices[0]
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {self.device_id}")
                return True
            else:
                print("üì± –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:")
                for i, device in enumerate(devices, 1):
                    print(f"  {i}. {device}")
                
                try:
                    choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–Ω–æ–º–µ—Ä): ")) - 1
                    if 0 <= choice < len(devices):
                        self.device_id = devices[choice]
                        print(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {self.device_id}")
                        return True
                    else:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")
                        return False
                except ValueError:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
                    return False
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
            return False
    
    def check_apk(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è APK —Ñ–∞–π–ª–∞"""
        if not self.apk_path.exists():
            print(f"‚ùå APK —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.apk_path}")
            print("üí° –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç: .\\gradlew.bat assembleDebug")
            return False
        
        print(f"‚úÖ APK –Ω–∞–π–¥–µ–Ω: {self.apk_path}")
        return True
    
    def install_app(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"""
        try:
            print("üì± –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º MedicalNotes...")
            
            # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é
            subprocess.run([self.adb_path, "-s", self.device_id, "uninstall", "com.medicalnotes.app"], 
                         capture_output=True)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
            result = subprocess.run([self.adb_path, "-s", self.device_id, "install", "-r", str(self.apk_path)], 
                                  capture_output=True, text=True, encoding='utf-8')
            
            if result.returncode == 0 and "Success" in result.stdout:
                print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
            return False
    
    def launch_app(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º MedicalNotes...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            result = subprocess.run([
                self.adb_path, "-s", self.device_id, "shell", 
                "am", "start", "-n", "com.medicalnotes.app/.MainActivity"
            ], capture_output=True, text=True, encoding='utf-8')
            
            if result.returncode == 0:
                print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            return False
    
    def show_logs(self):
        """–ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            print("üìã –õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏):")
            print("-" * 50)
            
            process = subprocess.Popen([
                self.adb_path, "-s", self.device_id, "logcat", 
                "-s", "MedicalNotes:*", "MainActivity:*", "NotificationManager:*"
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            
            try:
                for line in process.stdout:
                    print(line.strip())
            except KeyboardInterrupt:
                print("\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤...")
                process.terminate()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤: {e}")
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞"""
        print("üè• MedicalNotes Launcher")
        print("=" * 40)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ADB
        if not self.find_adb():
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        if not self.check_devices():
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º APK
        if not self.check_apk():
            return False
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        if not self.install_app():
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        if not self.launch_app():
            return False
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –ª–æ–≥–∏
        try:
            show_logs = input("\nüìã –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è? (y/n): ").lower().strip()
            if show_logs in ['y', 'yes', '–¥–∞', '–¥']:
                self.show_logs()
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    launcher = MedicalNotesLauncher()
    
    try:
        success = launcher.run()
        if success:
            print("\nüéâ MedicalNotes —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        else:
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\nüëã –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 