#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from datetime import datetime, timedelta

def test_every_other_day_with_yesterday_logic():
    """Test the correct logic for 'every other day' medicines considering yesterday's intake"""
    
    print("=== –¢–ï–°–¢ –õ–û–ì–ò–ö–ò '–ß–ï–†–ï–ó –î–ï–ù–¨' –° –£–ß–ï–¢–û–ú –í–ß–ï–†–ê–®–ù–ï–ì–û –ü–†–ò–ï–ú–ê ===")
    print()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—É "—á–µ—Ä–µ–∑ –¥–µ–Ω—å" —Å –¥–≤—É–º—è —Ä–∞–∑–Ω—ã–º–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞–º–∏
    group_start_date = datetime(2025, 8, 6)  # –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≥—Ä—É–ø–ø—ã
    
    print(f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≥—Ä—É–ø–ø—ã: {group_start_date.strftime('%Y-%m-%d')}")
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–∞—Ç–∞—Ö
    test_dates = [
        datetime(2025, 8, 6),   # –î–µ–Ω—å 0 - —á–µ—Ç–Ω—ã–π –¥–µ–Ω—å –≥—Ä—É–ø–ø—ã
        datetime(2025, 8, 7),   # –î–µ–Ω—å 1 - –Ω–µ—á–µ—Ç–Ω—ã–π –¥–µ–Ω—å –≥—Ä—É–ø–ø—ã  
        datetime(2025, 8, 8),   # –î–µ–Ω—å 2 - —á–µ—Ç–Ω—ã–π –¥–µ–Ω—å –≥—Ä—É–ø–ø—ã
        datetime(2025, 8, 9),   # –î–µ–Ω—å 3 - –Ω–µ—á–µ—Ç–Ω—ã–π –¥–µ–Ω—å –≥—Ä—É–ø–ø—ã
        datetime(2025, 8, 10),  # –î–µ–Ω—å 4 - —á–µ—Ç–Ω—ã–π –¥–µ–Ω—å –≥—Ä—É–ø–ø—ã
        datetime(2025, 8, 11),  # –î–µ–Ω—å 5 - –Ω–µ—á–µ—Ç–Ω—ã–π –¥–µ–Ω—å –≥—Ä—É–ø–ø—ã
    ]
    
    print("=== –õ–û–ì–ò–ö–ê –ë–ï–ó –£–ß–ï–¢–ê –í–ß–ï–†–ê–®–ù–ï–ì–û –ü–†–ò–ï–ú–ê (–ù–ï–ü–†–ê–í–ò–õ–¨–ù–û) ===")
    print("–ü—Ä–æ–±–ª–µ–º–∞: –õ–µ–∫–∞—Ä—Å—Ç–≤–∞ –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!")
    print()
    
    for test_date in test_dates:
        days_since_start = (test_date - group_start_date).days
        group_day = days_since_start % 2
        
        print(f"–î–∞—Ç–∞: {test_date.strftime('%Y-%m-%d')} (–¥–µ–Ω—å –≥—Ä—É–ø–ø—ã: {group_day})")
        
        # –õ–µ–∫–∞—Ä—Å—Ç–≤–æ 1 (groupOrder = 1) - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –≤ —á–µ—Ç–Ω—ã–µ –¥–Ω–∏ –≥—Ä—É–ø–ø—ã (0, 2, 4...)
        should_take_1 = group_day == 0
        print(f"  –õ–∏–ø–µ—Ç–æ—Ä (–ø–æ—Ä—è–¥–æ–∫ 1): {'–ü–†–ò–ù–ò–ú–ê–¢–¨' if should_take_1 else '–ù–ï –ü–†–ò–ù–ò–ú–ê–¢–¨'}")
        
        # –õ–µ–∫–∞—Ä—Å—Ç–≤–æ 2 (groupOrder = 2) - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –≤ –Ω–µ—á–µ—Ç–Ω—ã–µ –¥–Ω–∏ –≥—Ä—É–ø–ø—ã (1, 3, 5...)
        should_take_2 = group_day == 1
        print(f"  –§—É–±—É–∫—Å—É—Å–∞—Ç (–ø–æ—Ä—è–¥–æ–∫ 2): {'–ü–†–ò–ù–ò–ú–ê–¢–¨' if should_take_2 else '–ù–ï –ü–†–ò–ù–ò–ú–ê–¢–¨'}")
        print()
    
    print("=== –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –° –£–ß–ï–¢–û–ú –í–ß–ï–†–ê–®–ù–ï–ì–û –ü–†–ò–ï–ú–ê ===")
    print("–†–µ—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –ø—Ä–∏–Ω—è—Ç–æ –≤—á–µ—Ä–∞")
    print()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º, —á—Ç–æ –õ–∏–ø–µ—Ç–æ—Ä –±—ã–ª –ø—Ä–∏–Ω—è—Ç 7 –∞–≤–≥—É—Å—Ç–∞ (–≤—á–µ—Ä–∞ –¥–ª—è 8 –∞–≤–≥—É—Å—Ç–∞)
    lipitor_taken_yesterday = datetime(2025, 8, 7)
    
    for test_date in test_dates:
        days_since_start = (test_date - group_start_date).days
        group_day = days_since_start % 2
        yesterday = test_date - timedelta(days=1)
        
        print(f"–î–∞—Ç–∞: {test_date.strftime('%Y-%m-%d')} (–¥–µ–Ω—å –≥—Ä—É–ø–ø—ã: {group_day})")
        
        # –õ–µ–∫–∞—Ä—Å—Ç–≤–æ 1 (groupOrder = 1)
        should_take_1 = group_day == 0
        was_taken_yesterday_1 = lipitor_taken_yesterday.date() == yesterday.date()
        
        # –ï—Å–ª–∏ –ø—Ä–∏–Ω—è—Ç–æ –≤—á–µ—Ä–∞ –∏ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é - –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
        final_result_1 = False
        if was_taken_yesterday_1 and not should_take_1:
            final_result_1 = False
        elif was_taken_yesterday_1 and should_take_1:
            final_result_1 = True  # –ü—Ä–∏–Ω—è—Ç–æ –≤—á–µ—Ä–∞, –Ω–æ —Å–µ–≥–æ–¥–Ω—è —Ç–æ–∂–µ –Ω—É–∂–Ω–æ
        else:
            final_result_1 = should_take_1
        
        print(f"  –õ–∏–ø–µ—Ç–æ—Ä:")
        print(f"    - –ü–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: {'–î–ê' if should_take_1 else '–ù–ï–¢'}")
        print(f"    - –ü—Ä–∏–Ω—è—Ç–æ –≤—á–µ—Ä–∞: {'–î–ê' if was_taken_yesterday_1 else '–ù–ï–¢'}")
        print(f"    - –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {'–ü–†–ò–ù–ò–ú–ê–¢–¨' if final_result_1 else '–ù–ï –ü–†–ò–ù–ò–ú–ê–¢–¨'}")
        
        # –õ–µ–∫–∞—Ä—Å—Ç–≤–æ 2 (groupOrder = 2) - –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–ª–æ—Å—å –≤—á–µ—Ä–∞
        should_take_2 = group_day == 1
        was_taken_yesterday_2 = False  # –§—É–±—É–∫—Å—É—Å–∞—Ç –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–ª—Å—è –≤—á–µ—Ä–∞
        
        final_result_2 = should_take_2  # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–ª—Å—è –≤—á–µ—Ä–∞
        
        print(f"  –§—É–±—É–∫—Å—É—Å–∞—Ç:")
        print(f"    - –ü–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: {'–î–ê' if should_take_2 else '–ù–ï–¢'}")
        print(f"    - –ü—Ä–∏–Ω—è—Ç–æ –≤—á–µ—Ä–∞: {'–î–ê' if was_taken_yesterday_2 else '–ù–ï–¢'}")
        print(f"    - –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {'–ü–†–ò–ù–ò–ú–ê–¢–¨' if final_result_2 else '–ù–ï –ü–†–ò–ù–ò–ú–ê–¢–¨'}")
        print()
    
    print("=== –í–´–í–û–î ===")
    print("‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ª–æ–≥–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ —É—á–∏—Ç—ã–≤–∞—Ç—å –≤—á–µ—Ä–∞—à–Ω–∏–π –ø—Ä–∏–µ–º!")
    print("‚ùå –ë–ï–ó —É—á–µ—Ç–∞ –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –ø—Ä–∏–µ–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    print()
    print("–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–±–ª–µ–º—ã:")
    print("- 8 –∞–≤–≥—É—Å—Ç–∞: –õ–∏–ø–µ—Ç–æ—Ä –ø—Ä–∏–Ω—è—Ç 7 –∞–≤–≥—É—Å—Ç–∞, –Ω–æ 8 –∞–≤–≥—É—Å—Ç–∞ –Ω–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é")
    print("- –ë–ï–ó –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ: –õ–∏–ø–µ—Ç–æ—Ä –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –∫–∞–∫ '–ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π'")
    print("- –° –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ: –õ–∏–ø–µ—Ç–æ—Ä –ù–ï –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω (–ø—Ä–∞–≤–∏–ª—å–Ω–æ!)")
    print()
    print("üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∏ –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –ø—Ä–∏–µ–º–∞ –ù–£–ñ–ù–´ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã!")

if __name__ == "__main__":
    test_every_other_day_with_yesterday_logic() 